//
// File generated by /home/coda/software/root/bin/rootcint at Wed Dec  5 22:24:17 2018

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME sbsDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "sbsDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace Decoder {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Decoder_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Decoder", 0 /*version*/, "./SBSDecodeF1TDCModule.h", 13,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Decoder_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Decoder_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void DecodercLcLMPDModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DecodercLcLMPDModule(void *p = 0);
   static void *newArray_DecodercLcLMPDModule(Long_t size, void *p);
   static void delete_DecodercLcLMPDModule(void *p);
   static void deleteArray_DecodercLcLMPDModule(void *p);
   static void destruct_DecodercLcLMPDModule(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Decoder::MPDModule*)
   {
      ::Decoder::MPDModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Decoder::MPDModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Decoder::MPDModule", ::Decoder::MPDModule::Class_Version(), "./MPDModule.h", 35,
                  typeid(::Decoder::MPDModule), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Decoder::MPDModule::Dictionary, isa_proxy, 4,
                  sizeof(::Decoder::MPDModule) );
      instance.SetNew(&new_DecodercLcLMPDModule);
      instance.SetNewArray(&newArray_DecodercLcLMPDModule);
      instance.SetDelete(&delete_DecodercLcLMPDModule);
      instance.SetDeleteArray(&deleteArray_DecodercLcLMPDModule);
      instance.SetDestructor(&destruct_DecodercLcLMPDModule);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Decoder::MPDModule*)
   {
      return GenerateInitInstanceLocal((::Decoder::MPDModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Decoder::MPDModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSBigBite_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSBigBite(void *p);
   static void deleteArray_SBSBigBite(void *p);
   static void destruct_SBSBigBite(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSBigBite*)
   {
      ::SBSBigBite *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSBigBite >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSBigBite", ::SBSBigBite::Class_Version(), "./SBSBigBite.h", 6,
                  typeid(::SBSBigBite), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSBigBite::Dictionary, isa_proxy, 4,
                  sizeof(::SBSBigBite) );
      instance.SetDelete(&delete_SBSBigBite);
      instance.SetDeleteArray(&deleteArray_SBSBigBite);
      instance.SetDestructor(&destruct_SBSBigBite);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSBigBite*)
   {
      return GenerateInitInstanceLocal((::SBSBigBite*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSBigBite*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSGEMPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSGEMPlane(void *p);
   static void deleteArray_SBSGEMPlane(void *p);
   static void destruct_SBSGEMPlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSGEMPlane*)
   {
      ::SBSGEMPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSGEMPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSGEMPlane", ::SBSGEMPlane::Class_Version(), "./SBSGEMPlane.h", 23,
                  typeid(::SBSGEMPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSGEMPlane::Dictionary, isa_proxy, 4,
                  sizeof(::SBSGEMPlane) );
      instance.SetDelete(&delete_SBSGEMPlane);
      instance.SetDeleteArray(&deleteArray_SBSGEMPlane);
      instance.SetDestructor(&destruct_SBSGEMPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSGEMPlane*)
   {
      return GenerateInitInstanceLocal((::SBSGEMPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSGEMPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSGEMStand_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSGEMStand(void *p);
   static void deleteArray_SBSGEMStand(void *p);
   static void destruct_SBSGEMStand(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSGEMStand*)
   {
      ::SBSGEMStand *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSGEMStand >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSGEMStand", ::SBSGEMStand::Class_Version(), "./SBSGEMStand.h", 10,
                  typeid(::SBSGEMStand), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSGEMStand::Dictionary, isa_proxy, 4,
                  sizeof(::SBSGEMStand) );
      instance.SetDelete(&delete_SBSGEMStand);
      instance.SetDeleteArray(&deleteArray_SBSGEMStand);
      instance.SetDestructor(&destruct_SBSGEMStand);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSGEMStand*)
   {
      return GenerateInitInstanceLocal((::SBSGEMStand*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSGEMStand*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSShowerBlock_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSShowerBlock(void *p = 0);
   static void *newArray_SBSShowerBlock(Long_t size, void *p);
   static void delete_SBSShowerBlock(void *p);
   static void deleteArray_SBSShowerBlock(void *p);
   static void destruct_SBSShowerBlock(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSShowerBlock*)
   {
      ::SBSShowerBlock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSShowerBlock >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSShowerBlock", ::SBSShowerBlock::Class_Version(), "./SBSShowerBlock.h", 12,
                  typeid(::SBSShowerBlock), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSShowerBlock::Dictionary, isa_proxy, 4,
                  sizeof(::SBSShowerBlock) );
      instance.SetNew(&new_SBSShowerBlock);
      instance.SetNewArray(&newArray_SBSShowerBlock);
      instance.SetDelete(&delete_SBSShowerBlock);
      instance.SetDeleteArray(&deleteArray_SBSShowerBlock);
      instance.SetDestructor(&destruct_SBSShowerBlock);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSShowerBlock*)
   {
      return GenerateInitInstanceLocal((::SBSShowerBlock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSShowerBlock*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSBBShowerCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSBBShowerCluster(void *p = 0);
   static void *newArray_SBSBBShowerCluster(Long_t size, void *p);
   static void delete_SBSBBShowerCluster(void *p);
   static void deleteArray_SBSBBShowerCluster(void *p);
   static void destruct_SBSBBShowerCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSBBShowerCluster*)
   {
      ::SBSBBShowerCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSBBShowerCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSBBShowerCluster", ::SBSBBShowerCluster::Class_Version(), "./SBSBBShowerCluster.h", 13,
                  typeid(::SBSBBShowerCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSBBShowerCluster::Dictionary, isa_proxy, 4,
                  sizeof(::SBSBBShowerCluster) );
      instance.SetNew(&new_SBSBBShowerCluster);
      instance.SetNewArray(&newArray_SBSBBShowerCluster);
      instance.SetDelete(&delete_SBSBBShowerCluster);
      instance.SetDeleteArray(&deleteArray_SBSBBShowerCluster);
      instance.SetDestructor(&destruct_SBSBBShowerCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSBBShowerCluster*)
   {
      return GenerateInitInstanceLocal((::SBSBBShowerCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSBBShowerCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSBBShower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSBBShower(void *p);
   static void deleteArray_SBSBBShower(void *p);
   static void destruct_SBSBBShower(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSBBShower*)
   {
      ::SBSBBShower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSBBShower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSBBShower", ::SBSBBShower::Class_Version(), "./SBSBBShower.h", 15,
                  typeid(::SBSBBShower), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSBBShower::Dictionary, isa_proxy, 4,
                  sizeof(::SBSBBShower) );
      instance.SetDelete(&delete_SBSBBShower);
      instance.SetDeleteArray(&deleteArray_SBSBBShower);
      instance.SetDestructor(&destruct_SBSBBShower);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSBBShower*)
   {
      return GenerateInitInstanceLocal((::SBSBBShower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSBBShower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSBBTotalShower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSBBTotalShower(void *p);
   static void deleteArray_SBSBBTotalShower(void *p);
   static void destruct_SBSBBTotalShower(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSBBTotalShower*)
   {
      ::SBSBBTotalShower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSBBTotalShower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSBBTotalShower", ::SBSBBTotalShower::Class_Version(), "./SBSBBTotalShower.h", 35,
                  typeid(::SBSBBTotalShower), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSBBTotalShower::Dictionary, isa_proxy, 4,
                  sizeof(::SBSBBTotalShower) );
      instance.SetDelete(&delete_SBSBBTotalShower);
      instance.SetDeleteArray(&deleteArray_SBSBBTotalShower);
      instance.SetDestructor(&destruct_SBSBBTotalShower);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSBBTotalShower*)
   {
      return GenerateInitInstanceLocal((::SBSBBTotalShower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSBBTotalShower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSScintPMT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSScintPMT(void *p = 0);
   static void *newArray_SBSScintPMT(Long_t size, void *p);
   static void delete_SBSScintPMT(void *p);
   static void deleteArray_SBSScintPMT(void *p);
   static void destruct_SBSScintPMT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSScintPMT*)
   {
      ::SBSScintPMT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSScintPMT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSScintPMT", ::SBSScintPMT::Class_Version(), "./SBSScintPMT.h", 21,
                  typeid(::SBSScintPMT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSScintPMT::Dictionary, isa_proxy, 4,
                  sizeof(::SBSScintPMT) );
      instance.SetNew(&new_SBSScintPMT);
      instance.SetNewArray(&newArray_SBSScintPMT);
      instance.SetDelete(&delete_SBSScintPMT);
      instance.SetDeleteArray(&deleteArray_SBSScintPMT);
      instance.SetDestructor(&destruct_SBSScintPMT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSScintPMT*)
   {
      return GenerateInitInstanceLocal((::SBSScintPMT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSScintPMT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSScintHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSScintHit(void *p = 0);
   static void *newArray_SBSScintHit(Long_t size, void *p);
   static void delete_SBSScintHit(void *p);
   static void deleteArray_SBSScintHit(void *p);
   static void destruct_SBSScintHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSScintHit*)
   {
      ::SBSScintHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSScintHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSScintHit", ::SBSScintHit::Class_Version(), "./SBSScintHit.h", 15,
                  typeid(::SBSScintHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSScintHit::Dictionary, isa_proxy, 4,
                  sizeof(::SBSScintHit) );
      instance.SetNew(&new_SBSScintHit);
      instance.SetNewArray(&newArray_SBSScintHit);
      instance.SetDelete(&delete_SBSScintHit);
      instance.SetDeleteArray(&deleteArray_SBSScintHit);
      instance.SetDestructor(&destruct_SBSScintHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSScintHit*)
   {
      return GenerateInitInstanceLocal((::SBSScintHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSScintHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSScintBar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSScintBar(void *p = 0);
   static void *newArray_SBSScintBar(Long_t size, void *p);
   static void delete_SBSScintBar(void *p);
   static void deleteArray_SBSScintBar(void *p);
   static void destruct_SBSScintBar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSScintBar*)
   {
      ::SBSScintBar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSScintBar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSScintBar", ::SBSScintBar::Class_Version(), "./SBSScintBar.h", 19,
                  typeid(::SBSScintBar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSScintBar::Dictionary, isa_proxy, 4,
                  sizeof(::SBSScintBar) );
      instance.SetNew(&new_SBSScintBar);
      instance.SetNewArray(&newArray_SBSScintBar);
      instance.SetDelete(&delete_SBSScintBar);
      instance.SetDeleteArray(&deleteArray_SBSScintBar);
      instance.SetDestructor(&destruct_SBSScintBar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSScintBar*)
   {
      return GenerateInitInstanceLocal((::SBSScintBar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSScintBar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSAdcHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSAdcHit(void *p = 0);
   static void *newArray_SBSAdcHit(Long_t size, void *p);
   static void delete_SBSAdcHit(void *p);
   static void deleteArray_SBSAdcHit(void *p);
   static void destruct_SBSAdcHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSAdcHit*)
   {
      ::SBSAdcHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSAdcHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSAdcHit", ::SBSAdcHit::Class_Version(), "./SBSAdcHit.h", 14,
                  typeid(::SBSAdcHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSAdcHit::Dictionary, isa_proxy, 4,
                  sizeof(::SBSAdcHit) );
      instance.SetNew(&new_SBSAdcHit);
      instance.SetNewArray(&newArray_SBSAdcHit);
      instance.SetDelete(&delete_SBSAdcHit);
      instance.SetDeleteArray(&deleteArray_SBSAdcHit);
      instance.SetDestructor(&destruct_SBSAdcHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSAdcHit*)
   {
      return GenerateInitInstanceLocal((::SBSAdcHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSAdcHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSTdcHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSTdcHit(void *p = 0);
   static void *newArray_SBSTdcHit(Long_t size, void *p);
   static void delete_SBSTdcHit(void *p);
   static void deleteArray_SBSTdcHit(void *p);
   static void destruct_SBSTdcHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSTdcHit*)
   {
      ::SBSTdcHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSTdcHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSTdcHit", ::SBSTdcHit::Class_Version(), "./SBSTdcHit.h", 15,
                  typeid(::SBSTdcHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSTdcHit::Dictionary, isa_proxy, 4,
                  sizeof(::SBSTdcHit) );
      instance.SetNew(&new_SBSTdcHit);
      instance.SetNewArray(&newArray_SBSTdcHit);
      instance.SetDelete(&delete_SBSTdcHit);
      instance.SetDeleteArray(&deleteArray_SBSTdcHit);
      instance.SetDestructor(&destruct_SBSTdcHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSTdcHit*)
   {
      return GenerateInitInstanceLocal((::SBSTdcHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSTdcHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSScintPartialHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSScintPartialHit(void *p = 0);
   static void *newArray_SBSScintPartialHit(Long_t size, void *p);
   static void delete_SBSScintPartialHit(void *p);
   static void deleteArray_SBSScintPartialHit(void *p);
   static void destruct_SBSScintPartialHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSScintPartialHit*)
   {
      ::SBSScintPartialHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSScintPartialHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSScintPartialHit", ::SBSScintPartialHit::Class_Version(), "./SBSScintPartialHit.h", 15,
                  typeid(::SBSScintPartialHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSScintPartialHit::Dictionary, isa_proxy, 4,
                  sizeof(::SBSScintPartialHit) );
      instance.SetNew(&new_SBSScintPartialHit);
      instance.SetNewArray(&newArray_SBSScintPartialHit);
      instance.SetDelete(&delete_SBSScintPartialHit);
      instance.SetDeleteArray(&deleteArray_SBSScintPartialHit);
      instance.SetDestructor(&destruct_SBSScintPartialHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSScintPartialHit*)
   {
      return GenerateInitInstanceLocal((::SBSScintPartialHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSScintPartialHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSCDet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSCDet(void *p = 0);
   static void *newArray_SBSCDet(Long_t size, void *p);
   static void delete_SBSCDet(void *p);
   static void deleteArray_SBSCDet(void *p);
   static void destruct_SBSCDet(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSCDet*)
   {
      ::SBSCDet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSCDet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSCDet", ::SBSCDet::Class_Version(), "./SBSCDet.h", 76,
                  typeid(::SBSCDet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSCDet::Dictionary, isa_proxy, 4,
                  sizeof(::SBSCDet) );
      instance.SetNew(&new_SBSCDet);
      instance.SetNewArray(&newArray_SBSCDet);
      instance.SetDelete(&delete_SBSCDet);
      instance.SetDeleteArray(&deleteArray_SBSCDet);
      instance.SetDestructor(&destruct_SBSCDet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSCDet*)
   {
      return GenerateInitInstanceLocal((::SBSCDet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSCDet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSTimingHodoscope_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSTimingHodoscope(void *p = 0);
   static void *newArray_SBSTimingHodoscope(Long_t size, void *p);
   static void delete_SBSTimingHodoscope(void *p);
   static void deleteArray_SBSTimingHodoscope(void *p);
   static void destruct_SBSTimingHodoscope(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSTimingHodoscope*)
   {
      ::SBSTimingHodoscope *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSTimingHodoscope >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSTimingHodoscope", ::SBSTimingHodoscope::Class_Version(), "./SBSTimingHodoscope.h", 76,
                  typeid(::SBSTimingHodoscope), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSTimingHodoscope::Dictionary, isa_proxy, 4,
                  sizeof(::SBSTimingHodoscope) );
      instance.SetNew(&new_SBSTimingHodoscope);
      instance.SetNewArray(&newArray_SBSTimingHodoscope);
      instance.SetDelete(&delete_SBSTimingHodoscope);
      instance.SetDeleteArray(&deleteArray_SBSTimingHodoscope);
      instance.SetDestructor(&destruct_SBSTimingHodoscope);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSTimingHodoscope*)
   {
      return GenerateInitInstanceLocal((::SBSTimingHodoscope*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSTimingHodoscope*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSGRINCH_Hit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSGRINCH_Hit(void *p = 0);
   static void *newArray_SBSGRINCH_Hit(Long_t size, void *p);
   static void delete_SBSGRINCH_Hit(void *p);
   static void deleteArray_SBSGRINCH_Hit(void *p);
   static void destruct_SBSGRINCH_Hit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSGRINCH_Hit*)
   {
      ::SBSGRINCH_Hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSGRINCH_Hit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSGRINCH_Hit", ::SBSGRINCH_Hit::Class_Version(), "./SBSGRINCH_ClusterList.h", 24,
                  typeid(::SBSGRINCH_Hit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSGRINCH_Hit::Dictionary, isa_proxy, 4,
                  sizeof(::SBSGRINCH_Hit) );
      instance.SetNew(&new_SBSGRINCH_Hit);
      instance.SetNewArray(&newArray_SBSGRINCH_Hit);
      instance.SetDelete(&delete_SBSGRINCH_Hit);
      instance.SetDeleteArray(&deleteArray_SBSGRINCH_Hit);
      instance.SetDestructor(&destruct_SBSGRINCH_Hit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSGRINCH_Hit*)
   {
      return GenerateInitInstanceLocal((::SBSGRINCH_Hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSGRINCH_Hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSGRINCH_Cluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSGRINCH_Cluster(void *p = 0);
   static void *newArray_SBSGRINCH_Cluster(Long_t size, void *p);
   static void delete_SBSGRINCH_Cluster(void *p);
   static void deleteArray_SBSGRINCH_Cluster(void *p);
   static void destruct_SBSGRINCH_Cluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSGRINCH_Cluster*)
   {
      ::SBSGRINCH_Cluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSGRINCH_Cluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSGRINCH_Cluster", ::SBSGRINCH_Cluster::Class_Version(), "./SBSGRINCH_ClusterList.h", 98,
                  typeid(::SBSGRINCH_Cluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSGRINCH_Cluster::Dictionary, isa_proxy, 4,
                  sizeof(::SBSGRINCH_Cluster) );
      instance.SetNew(&new_SBSGRINCH_Cluster);
      instance.SetNewArray(&newArray_SBSGRINCH_Cluster);
      instance.SetDelete(&delete_SBSGRINCH_Cluster);
      instance.SetDeleteArray(&deleteArray_SBSGRINCH_Cluster);
      instance.SetDestructor(&destruct_SBSGRINCH_Cluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSGRINCH_Cluster*)
   {
      return GenerateInitInstanceLocal((::SBSGRINCH_Cluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSGRINCH_Cluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSGRINCH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSGRINCH(void *p);
   static void deleteArray_SBSGRINCH(void *p);
   static void destruct_SBSGRINCH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSGRINCH*)
   {
      ::SBSGRINCH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSGRINCH >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSGRINCH", ::SBSGRINCH::Class_Version(), "./SBSGRINCH.h", 26,
                  typeid(::SBSGRINCH), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSGRINCH::Dictionary, isa_proxy, 4,
                  sizeof(::SBSGRINCH) );
      instance.SetDelete(&delete_SBSGRINCH);
      instance.SetDeleteArray(&deleteArray_SBSGRINCH);
      instance.SetDestructor(&destruct_SBSGRINCH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSGRINCH*)
   {
      return GenerateInitInstanceLocal((::SBSGRINCH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSGRINCH*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSScintPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSScintPlane(void *p = 0);
   static void *newArray_SBSScintPlane(Long_t size, void *p);
   static void delete_SBSScintPlane(void *p);
   static void deleteArray_SBSScintPlane(void *p);
   static void destruct_SBSScintPlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSScintPlane*)
   {
      ::SBSScintPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSScintPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSScintPlane", ::SBSScintPlane::Class_Version(), "./SBSScintPlane.h", 74,
                  typeid(::SBSScintPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSScintPlane::Dictionary, isa_proxy, 4,
                  sizeof(::SBSScintPlane) );
      instance.SetNew(&new_SBSScintPlane);
      instance.SetNewArray(&newArray_SBSScintPlane);
      instance.SetDelete(&delete_SBSScintPlane);
      instance.SetDeleteArray(&deleteArray_SBSScintPlane);
      instance.SetDestructor(&destruct_SBSScintPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSScintPlane*)
   {
      return GenerateInitInstanceLocal((::SBSScintPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSScintPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSECalCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSECalCluster(void *p = 0);
   static void *newArray_SBSECalCluster(Long_t size, void *p);
   static void delete_SBSECalCluster(void *p);
   static void deleteArray_SBSECalCluster(void *p);
   static void destruct_SBSECalCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSECalCluster*)
   {
      ::SBSECalCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSECalCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSECalCluster", ::SBSECalCluster::Class_Version(), "./SBSECalCluster.h", 13,
                  typeid(::SBSECalCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSECalCluster::Dictionary, isa_proxy, 4,
                  sizeof(::SBSECalCluster) );
      instance.SetNew(&new_SBSECalCluster);
      instance.SetNewArray(&newArray_SBSECalCluster);
      instance.SetDelete(&delete_SBSECalCluster);
      instance.SetDeleteArray(&deleteArray_SBSECalCluster);
      instance.SetDestructor(&destruct_SBSECalCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSECalCluster*)
   {
      return GenerateInitInstanceLocal((::SBSECalCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSECalCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSECal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSECal(void *p);
   static void deleteArray_SBSECal(void *p);
   static void destruct_SBSECal(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSECal*)
   {
      ::SBSECal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSECal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSECal", ::SBSECal::Class_Version(), "./SBSECal.h", 15,
                  typeid(::SBSECal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSECal::Dictionary, isa_proxy, 4,
                  sizeof(::SBSECal) );
      instance.SetDelete(&delete_SBSECal);
      instance.SetDeleteArray(&deleteArray_SBSECal);
      instance.SetDestructor(&destruct_SBSECal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSECal*)
   {
      return GenerateInitInstanceLocal((::SBSECal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSECal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSEArm_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSEArm(void *p);
   static void deleteArray_SBSEArm(void *p);
   static void destruct_SBSEArm(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSEArm*)
   {
      ::SBSEArm *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSEArm >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSEArm", ::SBSEArm::Class_Version(), "./SBSEArm.h", 6,
                  typeid(::SBSEArm), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSEArm::Dictionary, isa_proxy, 4,
                  sizeof(::SBSEArm) );
      instance.SetDelete(&delete_SBSEArm);
      instance.SetDeleteArray(&deleteArray_SBSEArm);
      instance.SetDestructor(&destruct_SBSEArm);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSEArm*)
   {
      return GenerateInitInstanceLocal((::SBSEArm*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSEArm*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace SBSCalorimeterBlockData {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void SBSCalorimeterBlockData_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("SBSCalorimeterBlockData", 0 /*version*/, "./SBSCalorimeterBlockData.h", 7,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &SBSCalorimeterBlockData_Dictionary, 4);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void SBSCalorimeterBlockData_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void SBSCalorimeterBlock_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSCalorimeterBlock(void *p = 0);
   static void *newArray_SBSCalorimeterBlock(Long_t size, void *p);
   static void delete_SBSCalorimeterBlock(void *p);
   static void deleteArray_SBSCalorimeterBlock(void *p);
   static void destruct_SBSCalorimeterBlock(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSCalorimeterBlock*)
   {
      ::SBSCalorimeterBlock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSCalorimeterBlock >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSCalorimeterBlock", ::SBSCalorimeterBlock::Class_Version(), "./SBSCalorimeterBlock.h", 17,
                  typeid(::SBSCalorimeterBlock), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSCalorimeterBlock::Dictionary, isa_proxy, 4,
                  sizeof(::SBSCalorimeterBlock) );
      instance.SetNew(&new_SBSCalorimeterBlock);
      instance.SetNewArray(&newArray_SBSCalorimeterBlock);
      instance.SetDelete(&delete_SBSCalorimeterBlock);
      instance.SetDeleteArray(&deleteArray_SBSCalorimeterBlock);
      instance.SetDestructor(&destruct_SBSCalorimeterBlock);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSCalorimeterBlock*)
   {
      return GenerateInitInstanceLocal((::SBSCalorimeterBlock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSCalorimeterBlock*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSCalorimeterBlockTDC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSCalorimeterBlockTDC(void *p = 0);
   static void *newArray_SBSCalorimeterBlockTDC(Long_t size, void *p);
   static void delete_SBSCalorimeterBlockTDC(void *p);
   static void deleteArray_SBSCalorimeterBlockTDC(void *p);
   static void destruct_SBSCalorimeterBlockTDC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSCalorimeterBlockTDC*)
   {
      ::SBSCalorimeterBlockTDC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSCalorimeterBlockTDC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSCalorimeterBlockTDC", ::SBSCalorimeterBlockTDC::Class_Version(), "./SBSCalorimeterBlock.h", 65,
                  typeid(::SBSCalorimeterBlockTDC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSCalorimeterBlockTDC::Dictionary, isa_proxy, 4,
                  sizeof(::SBSCalorimeterBlockTDC) );
      instance.SetNew(&new_SBSCalorimeterBlockTDC);
      instance.SetNewArray(&newArray_SBSCalorimeterBlockTDC);
      instance.SetDelete(&delete_SBSCalorimeterBlockTDC);
      instance.SetDeleteArray(&deleteArray_SBSCalorimeterBlockTDC);
      instance.SetDestructor(&destruct_SBSCalorimeterBlockTDC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSCalorimeterBlockTDC*)
   {
      return GenerateInitInstanceLocal((::SBSCalorimeterBlockTDC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSCalorimeterBlockTDC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSCalorimeterBlockSamples_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSCalorimeterBlockSamples(void *p = 0);
   static void *newArray_SBSCalorimeterBlockSamples(Long_t size, void *p);
   static void delete_SBSCalorimeterBlockSamples(void *p);
   static void deleteArray_SBSCalorimeterBlockSamples(void *p);
   static void destruct_SBSCalorimeterBlockSamples(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSCalorimeterBlockSamples*)
   {
      ::SBSCalorimeterBlockSamples *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSCalorimeterBlockSamples >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSCalorimeterBlockSamples", ::SBSCalorimeterBlockSamples::Class_Version(), "./SBSCalorimeterBlock.h", 87,
                  typeid(::SBSCalorimeterBlockSamples), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSCalorimeterBlockSamples::Dictionary, isa_proxy, 4,
                  sizeof(::SBSCalorimeterBlockSamples) );
      instance.SetNew(&new_SBSCalorimeterBlockSamples);
      instance.SetNewArray(&newArray_SBSCalorimeterBlockSamples);
      instance.SetDelete(&delete_SBSCalorimeterBlockSamples);
      instance.SetDeleteArray(&deleteArray_SBSCalorimeterBlockSamples);
      instance.SetDestructor(&destruct_SBSCalorimeterBlockSamples);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSCalorimeterBlockSamples*)
   {
      return GenerateInitInstanceLocal((::SBSCalorimeterBlockSamples*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamples*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSCalorimeterBlockSamplesTDC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SBSCalorimeterBlockSamplesTDC(void *p = 0);
   static void *newArray_SBSCalorimeterBlockSamplesTDC(Long_t size, void *p);
   static void delete_SBSCalorimeterBlockSamplesTDC(void *p);
   static void deleteArray_SBSCalorimeterBlockSamplesTDC(void *p);
   static void destruct_SBSCalorimeterBlockSamplesTDC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSCalorimeterBlockSamplesTDC*)
   {
      ::SBSCalorimeterBlockSamplesTDC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSCalorimeterBlockSamplesTDC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSCalorimeterBlockSamplesTDC", ::SBSCalorimeterBlockSamplesTDC::Class_Version(), "./SBSCalorimeterBlock.h", 109,
                  typeid(::SBSCalorimeterBlockSamplesTDC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSCalorimeterBlockSamplesTDC::Dictionary, isa_proxy, 4,
                  sizeof(::SBSCalorimeterBlockSamplesTDC) );
      instance.SetNew(&new_SBSCalorimeterBlockSamplesTDC);
      instance.SetNewArray(&newArray_SBSCalorimeterBlockSamplesTDC);
      instance.SetDelete(&delete_SBSCalorimeterBlockSamplesTDC);
      instance.SetDeleteArray(&deleteArray_SBSCalorimeterBlockSamplesTDC);
      instance.SetDestructor(&destruct_SBSCalorimeterBlockSamplesTDC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSCalorimeterBlockSamplesTDC*)
   {
      return GenerateInitInstanceLocal((::SBSCalorimeterBlockSamplesTDC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamplesTDC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSCalorimeter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSCalorimeter(void *p);
   static void deleteArray_SBSCalorimeter(void *p);
   static void destruct_SBSCalorimeter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSCalorimeter*)
   {
      ::SBSCalorimeter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSCalorimeter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSCalorimeter", ::SBSCalorimeter::Class_Version(), "./SBSCalorimeter.h", 25,
                  typeid(::SBSCalorimeter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSCalorimeter::Dictionary, isa_proxy, 4,
                  sizeof(::SBSCalorimeter) );
      instance.SetDelete(&delete_SBSCalorimeter);
      instance.SetDeleteArray(&deleteArray_SBSCalorimeter);
      instance.SetDestructor(&destruct_SBSCalorimeter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSCalorimeter*)
   {
      return GenerateInitInstanceLocal((::SBSCalorimeter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSCalorimeter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SBSHCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SBSHCal(void *p);
   static void deleteArray_SBSHCal(void *p);
   static void destruct_SBSHCal(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SBSHCal*)
   {
      ::SBSHCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SBSHCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SBSHCal", ::SBSHCal::Class_Version(), "./SBSHCal.h", 14,
                  typeid(::SBSHCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::SBSHCal::Dictionary, isa_proxy, 4,
                  sizeof(::SBSHCal) );
      instance.SetDelete(&delete_SBSHCal);
      instance.SetDeleteArray(&deleteArray_SBSHCal);
      instance.SetDestructor(&destruct_SBSHCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SBSHCal*)
   {
      return GenerateInitInstanceLocal((::SBSHCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SBSHCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DecodercLcLSBSDecodeF1TDCModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DecodercLcLSBSDecodeF1TDCModule(void *p = 0);
   static void *newArray_DecodercLcLSBSDecodeF1TDCModule(Long_t size, void *p);
   static void delete_DecodercLcLSBSDecodeF1TDCModule(void *p);
   static void deleteArray_DecodercLcLSBSDecodeF1TDCModule(void *p);
   static void destruct_DecodercLcLSBSDecodeF1TDCModule(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Decoder::SBSDecodeF1TDCModule*)
   {
      ::Decoder::SBSDecodeF1TDCModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Decoder::SBSDecodeF1TDCModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Decoder::SBSDecodeF1TDCModule", ::Decoder::SBSDecodeF1TDCModule::Class_Version(), "./SBSDecodeF1TDCModule.h", 15,
                  typeid(::Decoder::SBSDecodeF1TDCModule), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Decoder::SBSDecodeF1TDCModule::Dictionary, isa_proxy, 4,
                  sizeof(::Decoder::SBSDecodeF1TDCModule) );
      instance.SetNew(&new_DecodercLcLSBSDecodeF1TDCModule);
      instance.SetNewArray(&newArray_DecodercLcLSBSDecodeF1TDCModule);
      instance.SetDelete(&delete_DecodercLcLSBSDecodeF1TDCModule);
      instance.SetDeleteArray(&deleteArray_DecodercLcLSBSDecodeF1TDCModule);
      instance.SetDestructor(&destruct_DecodercLcLSBSDecodeF1TDCModule);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Decoder::SBSDecodeF1TDCModule*)
   {
      return GenerateInitInstanceLocal((::Decoder::SBSDecodeF1TDCModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Decoder::SBSDecodeF1TDCModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace Decoder {
//______________________________________________________________________________
atomic_TClass_ptr MPDModule::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MPDModule::Class_Name()
{
   return "Decoder::MPDModule";
}

//______________________________________________________________________________
const char *MPDModule::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::MPDModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MPDModule::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::MPDModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MPDModule::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::MPDModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MPDModule::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::MPDModule*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace Decoder
//______________________________________________________________________________
atomic_TClass_ptr SBSBigBite::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSBigBite::Class_Name()
{
   return "SBSBigBite";
}

//______________________________________________________________________________
const char *SBSBigBite::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBigBite*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSBigBite::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBigBite*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSBigBite::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBigBite*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSBigBite::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBigBite*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSGEMPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSGEMPlane::Class_Name()
{
   return "SBSGEMPlane";
}

//______________________________________________________________________________
const char *SBSGEMPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSGEMPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSGEMPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSGEMPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSGEMStand::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSGEMStand::Class_Name()
{
   return "SBSGEMStand";
}

//______________________________________________________________________________
const char *SBSGEMStand::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMStand*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSGEMStand::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMStand*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSGEMStand::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMStand*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSGEMStand::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGEMStand*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSShowerBlock::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSShowerBlock::Class_Name()
{
   return "SBSShowerBlock";
}

//______________________________________________________________________________
const char *SBSShowerBlock::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSShowerBlock*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSShowerBlock::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSShowerBlock*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSShowerBlock::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSShowerBlock*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSShowerBlock::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSShowerBlock*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSBBShowerCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSBBShowerCluster::Class_Name()
{
   return "SBSBBShowerCluster";
}

//______________________________________________________________________________
const char *SBSBBShowerCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShowerCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSBBShowerCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShowerCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSBBShowerCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShowerCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSBBShowerCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShowerCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSBBShower::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSBBShower::Class_Name()
{
   return "SBSBBShower";
}

//______________________________________________________________________________
const char *SBSBBShower::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSBBShower::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSBBShower::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSBBShower::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBShower*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSBBTotalShower::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSBBTotalShower::Class_Name()
{
   return "SBSBBTotalShower";
}

//______________________________________________________________________________
const char *SBSBBTotalShower::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBTotalShower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSBBTotalShower::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBTotalShower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSBBTotalShower::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBTotalShower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSBBTotalShower::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSBBTotalShower*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSScintPMT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSScintPMT::Class_Name()
{
   return "SBSScintPMT";
}

//______________________________________________________________________________
const char *SBSScintPMT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPMT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSScintPMT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPMT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSScintPMT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPMT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSScintPMT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPMT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSScintHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSScintHit::Class_Name()
{
   return "SBSScintHit";
}

//______________________________________________________________________________
const char *SBSScintHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSScintHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSScintHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSScintHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSScintBar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSScintBar::Class_Name()
{
   return "SBSScintBar";
}

//______________________________________________________________________________
const char *SBSScintBar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintBar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSScintBar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintBar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSScintBar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintBar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSScintBar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintBar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSAdcHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSAdcHit::Class_Name()
{
   return "SBSAdcHit";
}

//______________________________________________________________________________
const char *SBSAdcHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSAdcHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSAdcHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSAdcHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSAdcHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSAdcHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSAdcHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSAdcHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSTdcHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSTdcHit::Class_Name()
{
   return "SBSTdcHit";
}

//______________________________________________________________________________
const char *SBSTdcHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTdcHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSTdcHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTdcHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSTdcHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTdcHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSTdcHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTdcHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSScintPartialHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSScintPartialHit::Class_Name()
{
   return "SBSScintPartialHit";
}

//______________________________________________________________________________
const char *SBSScintPartialHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPartialHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSScintPartialHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPartialHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSScintPartialHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPartialHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSScintPartialHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPartialHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSCDet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSCDet::Class_Name()
{
   return "SBSCDet";
}

//______________________________________________________________________________
const char *SBSCDet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCDet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSCDet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCDet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSCDet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCDet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSCDet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCDet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSTimingHodoscope::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSTimingHodoscope::Class_Name()
{
   return "SBSTimingHodoscope";
}

//______________________________________________________________________________
const char *SBSTimingHodoscope::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTimingHodoscope*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSTimingHodoscope::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTimingHodoscope*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSTimingHodoscope::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTimingHodoscope*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSTimingHodoscope::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSTimingHodoscope*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSGRINCH_Hit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSGRINCH_Hit::Class_Name()
{
   return "SBSGRINCH_Hit";
}

//______________________________________________________________________________
const char *SBSGRINCH_Hit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Hit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSGRINCH_Hit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Hit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSGRINCH_Hit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Hit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSGRINCH_Hit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Hit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSGRINCH_Cluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSGRINCH_Cluster::Class_Name()
{
   return "SBSGRINCH_Cluster";
}

//______________________________________________________________________________
const char *SBSGRINCH_Cluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Cluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSGRINCH_Cluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Cluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSGRINCH_Cluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Cluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSGRINCH_Cluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH_Cluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSGRINCH::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSGRINCH::Class_Name()
{
   return "SBSGRINCH";
}

//______________________________________________________________________________
const char *SBSGRINCH::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSGRINCH::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSGRINCH::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSGRINCH::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSGRINCH*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSScintPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSScintPlane::Class_Name()
{
   return "SBSScintPlane";
}

//______________________________________________________________________________
const char *SBSScintPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSScintPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSScintPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSScintPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSScintPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSECalCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSECalCluster::Class_Name()
{
   return "SBSECalCluster";
}

//______________________________________________________________________________
const char *SBSECalCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECalCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSECalCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECalCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSECalCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECalCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSECalCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECalCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSECal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSECal::Class_Name()
{
   return "SBSECal";
}

//______________________________________________________________________________
const char *SBSECal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSECal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSECal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSECal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSECal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSEArm::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSEArm::Class_Name()
{
   return "SBSEArm";
}

//______________________________________________________________________________
const char *SBSEArm::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSEArm*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSEArm::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSEArm*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSEArm::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSEArm*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSEArm::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSEArm*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSCalorimeterBlock::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSCalorimeterBlock::Class_Name()
{
   return "SBSCalorimeterBlock";
}

//______________________________________________________________________________
const char *SBSCalorimeterBlock::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlock*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSCalorimeterBlock::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlock*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSCalorimeterBlock::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlock*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSCalorimeterBlock::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlock*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSCalorimeterBlockTDC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSCalorimeterBlockTDC::Class_Name()
{
   return "SBSCalorimeterBlockTDC";
}

//______________________________________________________________________________
const char *SBSCalorimeterBlockTDC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockTDC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSCalorimeterBlockTDC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockTDC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSCalorimeterBlockTDC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockTDC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSCalorimeterBlockTDC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockTDC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSCalorimeterBlockSamples::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSCalorimeterBlockSamples::Class_Name()
{
   return "SBSCalorimeterBlockSamples";
}

//______________________________________________________________________________
const char *SBSCalorimeterBlockSamples::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamples*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSCalorimeterBlockSamples::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamples*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSCalorimeterBlockSamples::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamples*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSCalorimeterBlockSamples::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamples*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSCalorimeterBlockSamplesTDC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSCalorimeterBlockSamplesTDC::Class_Name()
{
   return "SBSCalorimeterBlockSamplesTDC";
}

//______________________________________________________________________________
const char *SBSCalorimeterBlockSamplesTDC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamplesTDC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSCalorimeterBlockSamplesTDC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamplesTDC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSCalorimeterBlockSamplesTDC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamplesTDC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSCalorimeterBlockSamplesTDC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeterBlockSamplesTDC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSCalorimeter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSCalorimeter::Class_Name()
{
   return "SBSCalorimeter";
}

//______________________________________________________________________________
const char *SBSCalorimeter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSCalorimeter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSCalorimeter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSCalorimeter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSCalorimeter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SBSHCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSHCal::Class_Name()
{
   return "SBSHCal";
}

//______________________________________________________________________________
const char *SBSHCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSHCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSHCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::SBSHCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSHCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSHCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSHCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::SBSHCal*)0x0)->GetClass();} }
   return fgIsA;
}

      namespace Decoder {
//______________________________________________________________________________
atomic_TClass_ptr SBSDecodeF1TDCModule::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SBSDecodeF1TDCModule::Class_Name()
{
   return "Decoder::SBSDecodeF1TDCModule";
}

//______________________________________________________________________________
const char *SBSDecodeF1TDCModule::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::SBSDecodeF1TDCModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SBSDecodeF1TDCModule::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::SBSDecodeF1TDCModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SBSDecodeF1TDCModule::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::SBSDecodeF1TDCModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SBSDecodeF1TDCModule::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Decoder::SBSDecodeF1TDCModule*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace Decoder
      namespace Decoder {
//______________________________________________________________________________
void SBSDecodeF1TDCModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class Decoder::SBSDecodeF1TDCModule.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Decoder::SBSDecodeF1TDCModule::Class(),this);
   } else {
      R__b.WriteClassBuffer(Decoder::SBSDecodeF1TDCModule::Class(),this);
   }
}

} // namespace Decoder
//______________________________________________________________________________
      namespace Decoder {
void SBSDecodeF1TDCModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Decoder::SBSDecodeF1TDCModule.
      TClass *R__cl = ::Decoder::SBSDecodeF1TDCModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHits", (void*)&fNumHits);
      R__insp.InspectMember("vector<Int_t>", (void*)&fNumHits, "fNumHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTdcData", (void*)&fTdcData);
      R__insp.InspectMember("vector<Int_t>", (void*)&fTdcData, "fTdcData.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResol", &fResol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsInit", &IsInit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slotmask", &slotmask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chanmask", &chanmask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "datamask", &datamask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nF1", &nF1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*F1slots", &F1slots);
      //This works around a msvc bug and should be harmless on other platforms
      typedef Decoder::VmeModule baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace Decoder
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DecodercLcLSBSDecodeF1TDCModule(void *p) {
      return  p ? new(p) ::Decoder::SBSDecodeF1TDCModule : new ::Decoder::SBSDecodeF1TDCModule;
   }
   static void *newArray_DecodercLcLSBSDecodeF1TDCModule(Long_t nElements, void *p) {
      return p ? new(p) ::Decoder::SBSDecodeF1TDCModule[nElements] : new ::Decoder::SBSDecodeF1TDCModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_DecodercLcLSBSDecodeF1TDCModule(void *p) {
      delete ((::Decoder::SBSDecodeF1TDCModule*)p);
   }
   static void deleteArray_DecodercLcLSBSDecodeF1TDCModule(void *p) {
      delete [] ((::Decoder::SBSDecodeF1TDCModule*)p);
   }
   static void destruct_DecodercLcLSBSDecodeF1TDCModule(void *p) {
      typedef ::Decoder::SBSDecodeF1TDCModule current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Decoder::SBSDecodeF1TDCModule

      namespace Decoder {
//______________________________________________________________________________
void MPDModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class Decoder::MPDModule.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Decoder::MPDModule::Class(),this);
   } else {
      R__b.WriteClassBuffer(Decoder::MPDModule::Class(),this);
   }
}

} // namespace Decoder
//______________________________________________________________________________
      namespace Decoder {
void MPDModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Decoder::MPDModule.
      TClass *R__cl = ::Decoder::MPDModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAcqMode", &fAcqMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSamplePeriod", &fSamplePeriod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSample", &fNumSample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumADC", &fNumADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdxA", &fIdxA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdxS", &fIdxS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdxC", &fIdxC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdxMPD", &fIdxMPD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCountS", &fCountS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCountW", &fCountW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHits", &fNumHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrameHeader", (void*)&fFrameHeader);
      R__insp.InspectMember("vector<Int_t>", (void*)&fFrameHeader, "fFrameHeader.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrameTrailer", (void*)&fFrameTrailer);
      R__insp.InspectMember("vector<Int_t>", (void*)&fFrameTrailer, "fFrameTrailer.", false);
      //This works around a msvc bug and should be harmless on other platforms
      typedef Decoder::VmeModule baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace Decoder
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DecodercLcLMPDModule(void *p) {
      return  p ? new(p) ::Decoder::MPDModule : new ::Decoder::MPDModule;
   }
   static void *newArray_DecodercLcLMPDModule(Long_t nElements, void *p) {
      return p ? new(p) ::Decoder::MPDModule[nElements] : new ::Decoder::MPDModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_DecodercLcLMPDModule(void *p) {
      delete ((::Decoder::MPDModule*)p);
   }
   static void deleteArray_DecodercLcLMPDModule(void *p) {
      delete [] ((::Decoder::MPDModule*)p);
   }
   static void destruct_DecodercLcLMPDModule(void *p) {
      typedef ::Decoder::MPDModule current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Decoder::MPDModule

//______________________________________________________________________________
void SBSBigBite::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSBigBite.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSBigBite::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSBigBite::Class(),this);
   }
}

//______________________________________________________________________________
void SBSBigBite::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSBigBite.
      TClass *R__cl = ::SBSBigBite::IsA();
      if (R__cl || R__insp.IsA()) { }
      THaSpectrometer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSBigBite(void *p) {
      delete ((::SBSBigBite*)p);
   }
   static void deleteArray_SBSBigBite(void *p) {
      delete [] ((::SBSBigBite*)p);
   }
   static void destruct_SBSBigBite(void *p) {
      typedef ::SBSBigBite current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSBigBite

//______________________________________________________________________________
void SBSGEMStand::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSGEMStand.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSGEMStand::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSGEMStand::Class(),this);
   }
}

//______________________________________________________________________________
void SBSGEMStand::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSGEMStand.
      TClass *R__cl = ::SBSGEMStand::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlanes", (void*)&fPlanes);
      R__insp.InspectMember("vector<SBSGEMPlane*>", (void*)&fPlanes, "fPlanes.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCrateMap", &fCrateMap);
      THaTrackingDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSGEMStand(void *p) {
      delete ((::SBSGEMStand*)p);
   }
   static void deleteArray_SBSGEMStand(void *p) {
      delete [] ((::SBSGEMStand*)p);
   }
   static void destruct_SBSGEMStand(void *p) {
      typedef ::SBSGEMStand current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSGEMStand

//______________________________________________________________________________
void SBSGEMPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSGEMPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSGEMPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSGEMPlane::Class(),this);
   }
}

//______________________________________________________________________________
void SBSGEMPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSGEMPlane.
      TClass *R__cl = ::SBSGEMPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMPDmap", (void*)&fMPDmap);
      R__insp.InspectMember("vector<mpdmap_t>", (void*)&fMPDmap, "fMPDmap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChanMapData", (void*)&fChanMapData);
      R__insp.InspectMember("vector<Int_t>", (void*)&fChanMapData, "fChanMapData.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZeroSuppressRMS", &fZeroSuppressRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZeroSuppress", &fZeroSuppress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNch", &fNch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStrip", &fStrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fadc[6]", &fadc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fadc0", &fadc0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fadc1", &fadc1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fadc2", &fadc2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fadc3", &fadc3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fadc4", &fadc4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fadc5", &fadc5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPedestal", &fPedestal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRMS", &fRMS);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSGEMPlane(void *p) {
      delete ((::SBSGEMPlane*)p);
   }
   static void deleteArray_SBSGEMPlane(void *p) {
      delete [] ((::SBSGEMPlane*)p);
   }
   static void destruct_SBSGEMPlane(void *p) {
      typedef ::SBSGEMPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSGEMPlane

//______________________________________________________________________________
void SBSGRINCH::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSGRINCH.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSGRINCH::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSGRINCH::Class(),this);
   }
}

//______________________________________________________________________________
void SBSGRINCH::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSGRINCH.
      TClass *R__cl = ::SBSGRINCH::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNypads", &fNypads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResolvedHits", &fResolvedHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResolvedClusters", &fResolvedClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMIPs", &fMIPs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMIP", &fMIP);
      R__insp.InspectMember(fMIP, "fMIP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "L_RAD", &L_RAD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l_quartz", &l_quartz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l_gap", &l_gap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l_emission", &l_emission);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_radiator", &n_radiator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_quartz", &n_quartz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_gap", &n_gap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_quartz_min", &n_quartz_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_quartz_max", &n_quartz_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_radiator_min", &n_radiator_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n_radiator_max", &n_radiator_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiducial_zone_range", &fiducial_zone_range);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster_distribution_sigma", &cluster_distribution_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PAD_SIZE_X", &PAD_SIZE_X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PAD_SIZE_Y", &PAD_SIZE_Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxdist2", &fMaxdist2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxxMIP", &fMaxxMIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinxMIP", &fMinxMIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxyMIP", &fMaxyMIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinyMIP", &fMinyMIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMIP_through_interception", &fMIP_through_interception);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxNumHits", &fMaxNumHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoResolve", &fDoResolve);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNseg", &fNseg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fXseg", &fXseg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackX", &fTrackX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackY", &fTrackY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoBench", &fDoBench);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBench", &fBench);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minimum_chi2_degree_of_freedom", &minimum_chi2_degree_of_freedom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clear_noise_trial_maximum_number", &clear_noise_trial_maximum_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acceptable_chi2_prob", &acceptable_chi2_prob);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "epsilon", &epsilon);
      THaPidDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSGRINCH(void *p) {
      delete ((::SBSGRINCH*)p);
   }
   static void deleteArray_SBSGRINCH(void *p) {
      delete [] ((::SBSGRINCH*)p);
   }
   static void destruct_SBSGRINCH(void *p) {
      typedef ::SBSGRINCH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSGRINCH

//______________________________________________________________________________
void SBSGRINCH_Cluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSGRINCH_Cluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSGRINCH_Cluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSGRINCH_Cluster::Class(),this);
   }
}

//______________________________________________________________________________
void SBSGRINCH_Cluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSGRINCH_Cluster.
      TClass *R__cl = ::SBSGRINCH_Cluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitList", &fHitList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLocalMaximumNumber", &fLocalMaximumNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMIPflag", &fMIPflag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFictious_Mip_Flag", &fFictious_Mip_Flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPionChi2AnalysisFlag", &fPionChi2AnalysisFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKaonChi2AnalysisFlag", &fKaonChi2AnalysisFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProtonChi2AnalysisFlag", &fProtonChi2AnalysisFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXcenter", &fXcenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYcenter", &fYcenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta_photon", &fTheta_photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi_photon", &fPhi_photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngle", &fAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMIP", &fMIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrack", &fTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N_Photon[3]", N_Photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angle[3]", angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angle_corrected[3]", angle_corrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N_chi2_Photon[3]", N_chi2_Photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2[3]", chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2_prob[3]", chi2_prob);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N_chi2_corrected_Photon[3]", N_chi2_corrected_Photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2_corrected[3]", chi2_corrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2_corrected_prob[3]", chi2_corrected_prob);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnoise_cut_success", &fnoise_cut_success);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaximumLikelihood[3]", MaximumLikelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N_MaximumLikelihood_Photon[3]", N_MaximumLikelihood_Photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ResolvedN_Photon[3]", ResolvedN_Photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Resolvedangle[3]", Resolvedangle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Resolvedangle_corrected[3]", Resolvedangle_corrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ResolvedN_chi2_Photon[3]", ResolvedN_chi2_Photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Resolvedchi2[3]", Resolvedchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Resolvedchi2_prob[3]", Resolvedchi2_prob);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ResolvedN_chi2_corrected_Photon[3]", ResolvedN_chi2_corrected_Photon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Resolvedchi2_corrected[3]", Resolvedchi2_corrected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Resolvedchi2_corrected_prob[3]", Resolvedchi2_corrected_prob);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolved_noise_cut_success", &fResolved_noise_cut_success);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ResolvedMaximumLikelihood[3]", ResolvedMaximumLikelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ResolvedN_MaximumLikelihood_Photon[3]", ResolvedN_MaximumLikelihood_Photon);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSGRINCH_Cluster(void *p) {
      return  p ? new(p) ::SBSGRINCH_Cluster : new ::SBSGRINCH_Cluster;
   }
   static void *newArray_SBSGRINCH_Cluster(Long_t nElements, void *p) {
      return p ? new(p) ::SBSGRINCH_Cluster[nElements] : new ::SBSGRINCH_Cluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSGRINCH_Cluster(void *p) {
      delete ((::SBSGRINCH_Cluster*)p);
   }
   static void deleteArray_SBSGRINCH_Cluster(void *p) {
      delete [] ((::SBSGRINCH_Cluster*)p);
   }
   static void destruct_SBSGRINCH_Cluster(void *p) {
      typedef ::SBSGRINCH_Cluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSGRINCH_Cluster

//______________________________________________________________________________
void SBSGRINCH_Hit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSGRINCH_Hit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSGRINCH_Hit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSGRINCH_Hit::Class(),this);
   }
}

//______________________________________________________________________________
void SBSGRINCH_Hit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSGRINCH_Hit.
      TClass *R__cl = ::SBSGRINCH_Hit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumber", &fNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fI", &fI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJ", &fJ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlag", &fFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVeto", &fVeto);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSGRINCH_Hit(void *p) {
      return  p ? new(p) ::SBSGRINCH_Hit : new ::SBSGRINCH_Hit;
   }
   static void *newArray_SBSGRINCH_Hit(Long_t nElements, void *p) {
      return p ? new(p) ::SBSGRINCH_Hit[nElements] : new ::SBSGRINCH_Hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSGRINCH_Hit(void *p) {
      delete ((::SBSGRINCH_Hit*)p);
   }
   static void deleteArray_SBSGRINCH_Hit(void *p) {
      delete [] ((::SBSGRINCH_Hit*)p);
   }
   static void destruct_SBSGRINCH_Hit(void *p) {
      typedef ::SBSGRINCH_Hit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSGRINCH_Hit

//______________________________________________________________________________
void SBSECal::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSECal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSECal::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSECal::Class(),this);
   }
}

//______________________________________________________________________________
void SBSECal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSECal.
      TClass *R__cl = ::SBSECal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoarseProcessed", &fCoarseProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFineProcessed", &fFineProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxNClust", &fMaxNClust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNChan", &fNChan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChanMap", &fChanMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclublk", &fNclublk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrows", &fNrows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNcols", &fNcols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlockX", &fBlockX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlockY", &fBlockY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGain", &fGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gconst", &gconst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gslope", &gslope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acc_charge", &acc_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEmin", &fEmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNhits", &fNhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fA_p", &fA_p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fA_c", &fA_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAsum_p", &fAsum_p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAsum_c", &fAsum_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclust", &fNclust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fE", &fE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMult", &fMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNblk", &fNblk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEblk", &fEblk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRX", &fTRX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRY", &fTRY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fE_c", &fE_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdX", &fdX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdY", &fdY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdZ", &fdZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlocks", &fBlocks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlkGrid", &fBlkGrid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tan_angle", &tan_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sin_angle", &sin_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cos_angle", &cos_angle);
      THaPidDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSECal(void *p) {
      delete ((::SBSECal*)p);
   }
   static void deleteArray_SBSECal(void *p) {
      delete [] ((::SBSECal*)p);
   }
   static void destruct_SBSECal(void *p) {
      typedef ::SBSECal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSECal

//______________________________________________________________________________
void SBSECalCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSECalCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSECalCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSECalCluster::Class(),this);
   }
}

//______________________________________________________________________________
void SBSECalCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSECalCluster.
      TClass *R__cl = ::SBSECalCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fE", &fE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMult", &fMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMaxBlocks", &fNMaxBlocks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlocks", &fBlocks);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSECalCluster(void *p) {
      return  p ? new(p) ::SBSECalCluster : new ::SBSECalCluster;
   }
   static void *newArray_SBSECalCluster(Long_t nElements, void *p) {
      return p ? new(p) ::SBSECalCluster[nElements] : new ::SBSECalCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSECalCluster(void *p) {
      delete ((::SBSECalCluster*)p);
   }
   static void deleteArray_SBSECalCluster(void *p) {
      delete [] ((::SBSECalCluster*)p);
   }
   static void destruct_SBSECalCluster(void *p) {
      typedef ::SBSECalCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSECalCluster

//______________________________________________________________________________
void SBSEArm::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSEArm.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSEArm::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSEArm::Class(),this);
   }
}

//______________________________________________________________________________
void SBSEArm::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSEArm.
      TClass *R__cl = ::SBSEArm::IsA();
      if (R__cl || R__insp.IsA()) { }
      THaSpectrometer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSEArm(void *p) {
      delete ((::SBSEArm*)p);
   }
   static void deleteArray_SBSEArm(void *p) {
      delete [] ((::SBSEArm*)p);
   }
   static void destruct_SBSEArm(void *p) {
      typedef ::SBSEArm current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSEArm

//______________________________________________________________________________
void SBSHCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSHCal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSHCal::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSHCal::Class(),this);
   }
}

//______________________________________________________________________________
void SBSHCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSHCal.
      TClass *R__cl = ::SBSHCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      SBSCalorimeter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSHCal(void *p) {
      delete ((::SBSHCal*)p);
   }
   static void deleteArray_SBSHCal(void *p) {
      delete [] ((::SBSHCal*)p);
   }
   static void destruct_SBSHCal(void *p) {
      typedef ::SBSHCal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSHCal

//______________________________________________________________________________
void SBSCalorimeter::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSCalorimeter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSCalorimeter::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSCalorimeter::Class(),this);
   }
}

//______________________________________________________________________________
void SBSCalorimeter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSCalorimeter.
      TClass *R__cl = ::SBSCalorimeter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclublk", &fNclublk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrows", &fNrows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNcols", &fNcols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNlayers", &fNlayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWithTDC", &fWithTDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWithADCSamples", &fWithADCSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChanMapStart", &fChanMapStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChanMap", (void*)&fChanMap);
      R__insp.InspectMember("vector<std::vector<UShort_t> >", (void*)&fChanMap, "fChanMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataOut", (void*)&fDataOut);
      R__insp.InspectMember("SBSCalorimeter::OutputData", (void*)&fDataOut, "fDataOut.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBlocks", (void*)&fBlocks);
      R__insp.InspectMember("vector<SBSCalorimeterBlock*>", (void*)&fBlocks, "fBlocks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNhits", &fNhits);
      THaNonTrackingDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSCalorimeter(void *p) {
      delete ((::SBSCalorimeter*)p);
   }
   static void deleteArray_SBSCalorimeter(void *p) {
      delete [] ((::SBSCalorimeter*)p);
   }
   static void destruct_SBSCalorimeter(void *p) {
      typedef ::SBSCalorimeter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSCalorimeter

//______________________________________________________________________________
void SBSCalorimeterBlock::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSCalorimeterBlock.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSCalorimeterBlock::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSCalorimeterBlock::Class(),this);
   }
}

//______________________________________________________________________________
void SBSCalorimeterBlock::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSCalorimeterBlock.
      TClass *R__cl = ::SBSCalorimeterBlock::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCol", &fCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLayer", &fLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStat", &fStat);
      R__insp.GenericShowMembers("SBSCalorimeterBlockData::ADC", ( ::SBSCalorimeterBlockData::ADC *) (this ), false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSCalorimeterBlock(void *p) {
      return  p ? new(p) ::SBSCalorimeterBlock : new ::SBSCalorimeterBlock;
   }
   static void *newArray_SBSCalorimeterBlock(Long_t nElements, void *p) {
      return p ? new(p) ::SBSCalorimeterBlock[nElements] : new ::SBSCalorimeterBlock[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSCalorimeterBlock(void *p) {
      delete ((::SBSCalorimeterBlock*)p);
   }
   static void deleteArray_SBSCalorimeterBlock(void *p) {
      delete [] ((::SBSCalorimeterBlock*)p);
   }
   static void destruct_SBSCalorimeterBlock(void *p) {
      typedef ::SBSCalorimeterBlock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSCalorimeterBlock

//______________________________________________________________________________
void SBSCalorimeterBlockTDC::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSCalorimeterBlockTDC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSCalorimeterBlockTDC::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSCalorimeterBlockTDC::Class(),this);
   }
}

//______________________________________________________________________________
void SBSCalorimeterBlockTDC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSCalorimeterBlockTDC.
      TClass *R__cl = ::SBSCalorimeterBlockTDC::IsA();
      if (R__cl || R__insp.IsA()) { }
      SBSCalorimeterBlock::ShowMembers(R__insp);
      R__insp.GenericShowMembers("SBSCalorimeterBlockData::TDC", ( ::SBSCalorimeterBlockData::TDC *) (this ), false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSCalorimeterBlockTDC(void *p) {
      return  p ? new(p) ::SBSCalorimeterBlockTDC : new ::SBSCalorimeterBlockTDC;
   }
   static void *newArray_SBSCalorimeterBlockTDC(Long_t nElements, void *p) {
      return p ? new(p) ::SBSCalorimeterBlockTDC[nElements] : new ::SBSCalorimeterBlockTDC[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSCalorimeterBlockTDC(void *p) {
      delete ((::SBSCalorimeterBlockTDC*)p);
   }
   static void deleteArray_SBSCalorimeterBlockTDC(void *p) {
      delete [] ((::SBSCalorimeterBlockTDC*)p);
   }
   static void destruct_SBSCalorimeterBlockTDC(void *p) {
      typedef ::SBSCalorimeterBlockTDC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSCalorimeterBlockTDC

//______________________________________________________________________________
void SBSCalorimeterBlockSamples::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSCalorimeterBlockSamples.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSCalorimeterBlockSamples::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSCalorimeterBlockSamples::Class(),this);
   }
}

//______________________________________________________________________________
void SBSCalorimeterBlockSamples::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSCalorimeterBlockSamples.
      TClass *R__cl = ::SBSCalorimeterBlockSamples::IsA();
      if (R__cl || R__insp.IsA()) { }
      SBSCalorimeterBlock::ShowMembers(R__insp);
      R__insp.GenericShowMembers("SBSCalorimeterBlockData::Samples", ( ::SBSCalorimeterBlockData::Samples *) (this ), false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSCalorimeterBlockSamples(void *p) {
      return  p ? new(p) ::SBSCalorimeterBlockSamples : new ::SBSCalorimeterBlockSamples;
   }
   static void *newArray_SBSCalorimeterBlockSamples(Long_t nElements, void *p) {
      return p ? new(p) ::SBSCalorimeterBlockSamples[nElements] : new ::SBSCalorimeterBlockSamples[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSCalorimeterBlockSamples(void *p) {
      delete ((::SBSCalorimeterBlockSamples*)p);
   }
   static void deleteArray_SBSCalorimeterBlockSamples(void *p) {
      delete [] ((::SBSCalorimeterBlockSamples*)p);
   }
   static void destruct_SBSCalorimeterBlockSamples(void *p) {
      typedef ::SBSCalorimeterBlockSamples current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSCalorimeterBlockSamples

//______________________________________________________________________________
void SBSCalorimeterBlockSamplesTDC::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSCalorimeterBlockSamplesTDC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSCalorimeterBlockSamplesTDC::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSCalorimeterBlockSamplesTDC::Class(),this);
   }
}

//______________________________________________________________________________
void SBSCalorimeterBlockSamplesTDC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSCalorimeterBlockSamplesTDC.
      TClass *R__cl = ::SBSCalorimeterBlockSamplesTDC::IsA();
      if (R__cl || R__insp.IsA()) { }
      SBSCalorimeterBlockSamples::ShowMembers(R__insp);
      R__insp.GenericShowMembers("SBSCalorimeterBlockData::TDC", ( ::SBSCalorimeterBlockData::TDC *) (this ), false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSCalorimeterBlockSamplesTDC(void *p) {
      return  p ? new(p) ::SBSCalorimeterBlockSamplesTDC : new ::SBSCalorimeterBlockSamplesTDC;
   }
   static void *newArray_SBSCalorimeterBlockSamplesTDC(Long_t nElements, void *p) {
      return p ? new(p) ::SBSCalorimeterBlockSamplesTDC[nElements] : new ::SBSCalorimeterBlockSamplesTDC[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSCalorimeterBlockSamplesTDC(void *p) {
      delete ((::SBSCalorimeterBlockSamplesTDC*)p);
   }
   static void deleteArray_SBSCalorimeterBlockSamplesTDC(void *p) {
      delete [] ((::SBSCalorimeterBlockSamplesTDC*)p);
   }
   static void destruct_SBSCalorimeterBlockSamplesTDC(void *p) {
      typedef ::SBSCalorimeterBlockSamplesTDC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSCalorimeterBlockSamplesTDC

//______________________________________________________________________________
void SBSCDet::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSCDet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSCDet::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSCDet::Class(),this);
   }
}

//______________________________________________________________________________
void SBSCDet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSCDet.
      TClass *R__cl = ::SBSCDet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoarseProcessed", &fCoarseProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFineProcessed", &fFineProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBars", &fBars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBars", &fNBars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefHits", &fRefHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLaHits", &fLaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaHits", &fRaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLtHits", &fLtHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRtHits", &fRtHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartHits", &fPartHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefCh", &fRefCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRefHits", &fNRefHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefOkay", &fRefOkay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLTNhit", &fLTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRTNhit", &fRTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLANhit", &fLANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRANhit", &fRANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPaddlesHit", &fNPaddlesHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLtIndex", &fLtIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRtIndex", &fRtIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLaIndex", &fLaIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaIndex", &fRaIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLE", &fLE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRE", &fRE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLrawA", &fLrawA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRrawA", &fRrawA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLpedcA", &fLpedcA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpedcA", &fRpedcA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxADCHitBar", &fMaxADCHitBar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEnergyHitBar", &fMaxEnergyHitBar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxADCHit", &fMaxADCHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEnergyHit", &fMaxEnergyHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLT", &fLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRT", &fRT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLTcounter", &fLTcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRTcounter", &fRTcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hitcounter", &hitcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TDIFF", &TDIFF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TOF", &TOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*T_tot", &T_tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Yt_pos", &Yt_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ya_pos", &Ya_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Y_pred", &Y_pred);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Y_dev", &Y_dev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAngle", &fAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackAcceptanceDx", &fTrackAcceptanceDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackAcceptanceDy", &fTrackAcceptanceDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMatchRatioTrack", &fMatchRatioTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackProj", &fTrackProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventCount", &fEventCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorReferenceChCount", &fErrorReferenceChCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorReferenceChRateWarningThreshold", &fErrorReferenceChRateWarningThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTooManyErrRefCh", &fTooManyErrRefCh);
      THaNonTrackingDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSCDet(void *p) {
      return  p ? new(p) ::SBSCDet : new ::SBSCDet;
   }
   static void *newArray_SBSCDet(Long_t nElements, void *p) {
      return p ? new(p) ::SBSCDet[nElements] : new ::SBSCDet[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSCDet(void *p) {
      delete ((::SBSCDet*)p);
   }
   static void deleteArray_SBSCDet(void *p) {
      delete [] ((::SBSCDet*)p);
   }
   static void destruct_SBSCDet(void *p) {
      typedef ::SBSCDet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSCDet

//______________________________________________________________________________
void SBSTimingHodoscope::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSTimingHodoscope.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSTimingHodoscope::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSTimingHodoscope::Class(),this);
   }
}

//______________________________________________________________________________
void SBSTimingHodoscope::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSTimingHodoscope.
      TClass *R__cl = ::SBSTimingHodoscope::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoarseProcessed", &fCoarseProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFineProcessed", &fFineProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBars", &fBars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBars", &fNBars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefHits", &fRefHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLaHits", &fLaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaHits", &fRaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLtHits", &fLtHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRtHits", &fRtHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartHits", &fPartHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefCh", &fRefCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRefHits", &fNRefHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefOkay", &fRefOkay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLTNhit", &fLTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRTNhit", &fRTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLANhit", &fLANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRANhit", &fRANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPaddlesHit", &fNPaddlesHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLtIndex", &fLtIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRtIndex", &fRtIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLaIndex", &fLaIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaIndex", &fRaIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLE", &fLE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRE", &fRE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLrawA", &fLrawA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRrawA", &fRrawA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLpedcA", &fLpedcA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpedcA", &fRpedcA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxADCHitBar", &fMaxADCHitBar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEnergyHitBar", &fMaxEnergyHitBar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxADCHit", &fMaxADCHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEnergyHit", &fMaxEnergyHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLT", &fLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRT", &fRT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLTcounter", &fLTcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRTcounter", &fRTcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hitcounter", &hitcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TDIFF", &TDIFF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TOF", &TOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*T_tot", &T_tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Yt_pos", &Yt_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ya_pos", &Ya_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Y_pred", &Y_pred);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Y_dev", &Y_dev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAngle", &fAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackAcceptanceDx", &fTrackAcceptanceDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackAcceptanceDy", &fTrackAcceptanceDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMatchRatioTrack", &fMatchRatioTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackProj", &fTrackProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventCount", &fEventCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorReferenceChCount", &fErrorReferenceChCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorReferenceChRateWarningThreshold", &fErrorReferenceChRateWarningThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTooManyErrRefCh", &fTooManyErrRefCh);
      THaNonTrackingDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSTimingHodoscope(void *p) {
      return  p ? new(p) ::SBSTimingHodoscope : new ::SBSTimingHodoscope;
   }
   static void *newArray_SBSTimingHodoscope(Long_t nElements, void *p) {
      return p ? new(p) ::SBSTimingHodoscope[nElements] : new ::SBSTimingHodoscope[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSTimingHodoscope(void *p) {
      delete ((::SBSTimingHodoscope*)p);
   }
   static void deleteArray_SBSTimingHodoscope(void *p) {
      delete [] ((::SBSTimingHodoscope*)p);
   }
   static void destruct_SBSTimingHodoscope(void *p) {
      typedef ::SBSTimingHodoscope current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSTimingHodoscope

//______________________________________________________________________________
void SBSBBShower::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSBBShower.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSBBShower::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSBBShower::Class(),this);
   }
}

//______________________________________________________________________________
void SBSBBShower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSBBShower.
      TClass *R__cl = ::SBSBBShower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoarseProcessed", &fCoarseProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFineProcessed", &fFineProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxNClust", &fMaxNClust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNChan", &fNChan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChanMap", &fChanMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclublk", &fNclublk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrows", &fNrows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNcols", &fNcols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlockX", &fBlockX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlockY", &fBlockY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGain", &fGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gconst", &gconst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gslope", &gslope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acc_charge", &acc_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEmin", &fEmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNhits", &fNhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fA_p", &fA_p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fA_c", &fA_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAsum_p", &fAsum_p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAsum_c", &fAsum_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclust", &fNclust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fE", &fE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMult", &fMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNblk", &fNblk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEblk", &fEblk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRX", &fTRX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTRY", &fTRY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fE_c", &fE_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdX", &fdX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdY", &fdY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdZ", &fdZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlocks", &fBlocks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlkGrid", &fBlkGrid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tan_angle", &tan_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sin_angle", &sin_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cos_angle", &cos_angle);
      THaPidDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSBBShower(void *p) {
      delete ((::SBSBBShower*)p);
   }
   static void deleteArray_SBSBBShower(void *p) {
      delete [] ((::SBSBBShower*)p);
   }
   static void destruct_SBSBBShower(void *p) {
      typedef ::SBSBBShower current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSBBShower

//______________________________________________________________________________
void SBSBBTotalShower::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSBBTotalShower.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSBBTotalShower::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSBBTotalShower::Class(),this);
   }
}

//______________________________________________________________________________
void SBSBBTotalShower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSBBTotalShower.
      TClass *R__cl = ::SBSBBTotalShower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShower", &fShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPreShower", &fPreShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDx", &fMaxDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDy", &fMaxDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNclust", &fNclust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fE", &fE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fID", &fID);
      THaPidDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SBSBBTotalShower(void *p) {
      delete ((::SBSBBTotalShower*)p);
   }
   static void deleteArray_SBSBBTotalShower(void *p) {
      delete [] ((::SBSBBTotalShower*)p);
   }
   static void destruct_SBSBBTotalShower(void *p) {
      typedef ::SBSBBTotalShower current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSBBTotalShower

//______________________________________________________________________________
void SBSShowerBlock::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSShowerBlock.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSShowerBlock::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSShowerBlock::Class(),this);
   }
}

//______________________________________________________________________________
void SBSShowerBlock::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSShowerBlock.
      TClass *R__cl = ::SBSShowerBlock::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGain", &fGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fE", &fE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCol", &fCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStat", &fStat);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSShowerBlock(void *p) {
      return  p ? new(p) ::SBSShowerBlock : new ::SBSShowerBlock;
   }
   static void *newArray_SBSShowerBlock(Long_t nElements, void *p) {
      return p ? new(p) ::SBSShowerBlock[nElements] : new ::SBSShowerBlock[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSShowerBlock(void *p) {
      delete ((::SBSShowerBlock*)p);
   }
   static void deleteArray_SBSShowerBlock(void *p) {
      delete [] ((::SBSShowerBlock*)p);
   }
   static void destruct_SBSShowerBlock(void *p) {
      typedef ::SBSShowerBlock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSShowerBlock

//______________________________________________________________________________
void SBSBBShowerCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSBBShowerCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSBBShowerCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSBBShowerCluster::Class(),this);
   }
}

//______________________________________________________________________________
void SBSBBShowerCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSBBShowerCluster.
      TClass *R__cl = ::SBSBBShowerCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fE", &fE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMult", &fMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMaxBlocks", &fNMaxBlocks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlocks", &fBlocks);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSBBShowerCluster(void *p) {
      return  p ? new(p) ::SBSBBShowerCluster : new ::SBSBBShowerCluster;
   }
   static void *newArray_SBSBBShowerCluster(Long_t nElements, void *p) {
      return p ? new(p) ::SBSBBShowerCluster[nElements] : new ::SBSBBShowerCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSBBShowerCluster(void *p) {
      delete ((::SBSBBShowerCluster*)p);
   }
   static void deleteArray_SBSBBShowerCluster(void *p) {
      delete [] ((::SBSBBShowerCluster*)p);
   }
   static void destruct_SBSBBShowerCluster(void *p) {
      typedef ::SBSBBShowerCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSBBShowerCluster

//______________________________________________________________________________
void SBSScintHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSScintHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSScintHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSScintHit::Class(),this);
   }
}

//______________________________________________________________________________
void SBSScintHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSScintHit.
      TClass *R__cl = ::SBSScintHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScBar", &fScBar);
      R__insp.InspectMember(fScBar, "fScBar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlaneNum", &fPlaneNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum", &fBarNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum_nd", &fBarNum_nd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitXPos", &fHitXPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitYPos", &fHitYPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitZPos", &fHitZPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitTOF", &fHitTOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTdiff", &fTdiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitEdep", &fHitEdep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrder", &fOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterNum", &fClusterNum);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSScintHit(void *p) {
      return  p ? new(p) ::SBSScintHit : new ::SBSScintHit;
   }
   static void *newArray_SBSScintHit(Long_t nElements, void *p) {
      return p ? new(p) ::SBSScintHit[nElements] : new ::SBSScintHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSScintHit(void *p) {
      delete ((::SBSScintHit*)p);
   }
   static void deleteArray_SBSScintHit(void *p) {
      delete [] ((::SBSScintHit*)p);
   }
   static void destruct_SBSScintHit(void *p) {
      typedef ::SBSScintHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSScintHit

//______________________________________________________________________________
void SBSScintBar::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSScintBar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSScintBar::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSScintBar::Class(),this);
   }
}

//______________________________________________________________________________
void SBSScintBar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSScintBar.
      TClass *R__cl = ::SBSScintBar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLPMT", &fLPMT);
      R__insp.InspectMember(fLPMT, "fLPMT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRPMT", &fRPMT);
      R__insp.InspectMember(fRPMT, "fRPMT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXPosPlane", &fXPosPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYPosPlane", &fYPosPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZPosPlane", &fZPosPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXWidth", &fXWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYWidth", &fYWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZWidth", &fZWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fc", &fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fatt", &fatt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarType", &fBarType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum", &fBarNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum_nd", &fBarNum_nd);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSScintBar(void *p) {
      return  p ? new(p) ::SBSScintBar : new ::SBSScintBar;
   }
   static void *newArray_SBSScintBar(Long_t nElements, void *p) {
      return p ? new(p) ::SBSScintBar[nElements] : new ::SBSScintBar[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSScintBar(void *p) {
      delete ((::SBSScintBar*)p);
   }
   static void deleteArray_SBSScintBar(void *p) {
      delete [] ((::SBSScintBar*)p);
   }
   static void destruct_SBSScintBar(void *p) {
      typedef ::SBSScintBar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSScintBar

//______________________________________________________________________________
void SBSScintPMT::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSScintPMT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSScintPMT::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSScintPMT::Class(),this);
   }
}

//______________________________________________________________________________
void SBSScintPMT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSScintPMT.
      TClass *R__cl = ::SBSScintPMT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGain", &fGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDCRes", &fTDCRes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOffset", &fTOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWalkPar", &fTimeWalkPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWalkExp", &fTimeWalkExp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScBar", &fScBar);
      R__insp.InspectMember(fScBar, "fScBar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum", &fBarNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSide", &fSide);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawLowLim", &fRawLowLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawUpLim", &fRawUpLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawWrapAround", &fRawWrapAround);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSScintPMT(void *p) {
      return  p ? new(p) ::SBSScintPMT : new ::SBSScintPMT;
   }
   static void *newArray_SBSScintPMT(Long_t nElements, void *p) {
      return p ? new(p) ::SBSScintPMT[nElements] : new ::SBSScintPMT[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSScintPMT(void *p) {
      delete ((::SBSScintPMT*)p);
   }
   static void deleteArray_SBSScintPMT(void *p) {
      delete [] ((::SBSScintPMT*)p);
   }
   static void destruct_SBSScintPMT(void *p) {
      typedef ::SBSScintPMT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSScintPMT

//______________________________________________________________________________
void SBSTdcHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSTdcHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSTdcHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSTdcHit::Class(),this);
   }
}

//______________________________________________________________________________
void SBSTdcHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSTdcHit.
      TClass *R__cl = ::SBSTdcHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMT", &fPMT);
      R__insp.InspectMember(fPMT, "fPMT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawTime", &fRawTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum", &fBarNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSide", &fSide);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSTdcHit(void *p) {
      return  p ? new(p) ::SBSTdcHit : new ::SBSTdcHit;
   }
   static void *newArray_SBSTdcHit(Long_t nElements, void *p) {
      return p ? new(p) ::SBSTdcHit[nElements] : new ::SBSTdcHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSTdcHit(void *p) {
      delete ((::SBSTdcHit*)p);
   }
   static void deleteArray_SBSTdcHit(void *p) {
      delete [] ((::SBSTdcHit*)p);
   }
   static void destruct_SBSTdcHit(void *p) {
      typedef ::SBSTdcHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSTdcHit

//______________________________________________________________________________
void SBSAdcHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSAdcHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSAdcHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSAdcHit::Class(),this);
   }
}

//______________________________________________________________________________
void SBSAdcHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSAdcHit.
      TClass *R__cl = ::SBSAdcHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMT", &fPMT);
      R__insp.InspectMember(fPMT, "fPMT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawAmpl", &fRawAmpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplPedCor", &fAmplPedCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmpl", &fAmpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum", &fBarNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSide", &fSide);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSAdcHit(void *p) {
      return  p ? new(p) ::SBSAdcHit : new ::SBSAdcHit;
   }
   static void *newArray_SBSAdcHit(Long_t nElements, void *p) {
      return p ? new(p) ::SBSAdcHit[nElements] : new ::SBSAdcHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSAdcHit(void *p) {
      delete ((::SBSAdcHit*)p);
   }
   static void deleteArray_SBSAdcHit(void *p) {
      delete [] ((::SBSAdcHit*)p);
   }
   static void destruct_SBSAdcHit(void *p) {
      typedef ::SBSAdcHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSAdcHit

//______________________________________________________________________________
void SBSScintPartialHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSScintPartialHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSScintPartialHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSScintPartialHit::Class(),this);
   }
}

//______________________________________________________________________________
void SBSScintPartialHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSScintPartialHit.
      TClass *R__cl = ::SBSScintPartialHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScBar", &fScBar);
      R__insp.InspectMember(fScBar, "fScBar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBarNum", &fBarNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaseNum", &fCaseNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLt", &fLt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLt_raw", &fLt_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRt", &fRt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRt_raw", &fRt_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLa", &fLa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLa_raw", &fLa_raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRa", &fRa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRa_raw", &fRa_raw);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSScintPartialHit(void *p) {
      return  p ? new(p) ::SBSScintPartialHit : new ::SBSScintPartialHit;
   }
   static void *newArray_SBSScintPartialHit(Long_t nElements, void *p) {
      return p ? new(p) ::SBSScintPartialHit[nElements] : new ::SBSScintPartialHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSScintPartialHit(void *p) {
      delete ((::SBSScintPartialHit*)p);
   }
   static void deleteArray_SBSScintPartialHit(void *p) {
      delete [] ((::SBSScintPartialHit*)p);
   }
   static void destruct_SBSScintPartialHit(void *p) {
      typedef ::SBSScintPartialHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSScintPartialHit

//______________________________________________________________________________
void SBSScintPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class SBSScintPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SBSScintPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(SBSScintPlane::Class(),this);
   }
}

//______________________________________________________________________________
void SBSScintPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SBSScintPlane.
      TClass *R__cl = ::SBSScintPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBars", &fBars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNBars", &fNBars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefHits", &fRefHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLaHits", &fLaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaHits", &fRaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLtHits", &fLtHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRtHits", &fRtHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartHits", &fPartHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRefCh", &fRefCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRefHits", &fNRefHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefOkay", &fRefOkay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLTNhit", &fLTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRTNhit", &fRTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLANhit", &fLANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRANhit", &fRANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPaddlesHit", &fNPaddlesHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLtIndex", &fLtIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRtIndex", &fRtIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLaIndex", &fLaIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaIndex", &fRaIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLE", &fLE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRE", &fRE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLrawA", &fLrawA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRrawA", &fRrawA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLpedcA", &fLpedcA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpedcA", &fRpedcA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLT", &fLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRT", &fRT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLTcounter", &fLTcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRTcounter", &fRTcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hitcounter", &hitcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Energy", &Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TDIFF", &TDIFF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TOF", &TOF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*T_tot", &T_tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Yt_pos", &Yt_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ya_pos", &Ya_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Y_pred", &Y_pred);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Y_dev", &Y_dev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAngle", &fAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXax", &fXax);
      R__insp.InspectMember(fXax, "fXax.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventCount", &fEventCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorReferenceChCount", &fErrorReferenceChCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorReferenceChRateWarningThreshold", &fErrorReferenceChRateWarningThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTooManyErrRefCh", &fTooManyErrRefCh);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SBSScintPlane(void *p) {
      return  p ? new(p) ::SBSScintPlane : new ::SBSScintPlane;
   }
   static void *newArray_SBSScintPlane(Long_t nElements, void *p) {
      return p ? new(p) ::SBSScintPlane[nElements] : new ::SBSScintPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_SBSScintPlane(void *p) {
      delete ((::SBSScintPlane*)p);
   }
   static void deleteArray_SBSScintPlane(void *p) {
      delete [] ((::SBSScintPlane*)p);
   }
   static void destruct_SBSScintPlane(void *p) {
      typedef ::SBSScintPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SBSScintPlane

/********************************************************
* sbsDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablesbsDict();

extern "C" void G__set_cpp_environmentsbsDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MPDModule.h");
  G__add_compiledheader("SBSBigBite.h");
  G__add_compiledheader("SBSGEMStand.h");
  G__add_compiledheader("SBSGEMPlane.h");
  G__add_compiledheader("SBSBBShowerCluster.h");
  G__add_compiledheader("SBSBBShower.h");
  G__add_compiledheader("SBSBBTotalShower.h");
  G__add_compiledheader("SBSCDet.h");
  G__add_compiledheader("SBSScintHit.h");
  G__add_compiledheader("SBSScintPMT.h");
  G__add_compiledheader("SBSShowerBlock.h");
  G__add_compiledheader("SBSTimingHodoscope.h");
  G__add_compiledheader("SBSScintBar.h");
  G__add_compiledheader("SBSTdcHit.h");
  G__add_compiledheader("SBSAdcHit.h");
  G__add_compiledheader("SBSScintPartialHit.h");
  G__add_compiledheader("SBSGRINCH.h");
  G__add_compiledheader("SBSGRINCH_ClusterList.h");
  G__add_compiledheader("SBSScintPlane.h");
  G__add_compiledheader("SBSECal.h");
  G__add_compiledheader("SBSECalCluster.h");
  G__add_compiledheader("SBSEArm.h");
  G__add_compiledheader("SBSHCal.h");
  G__add_compiledheader("SBSDecodeF1TDCModule.h");
  G__add_compiledheader("SBSCalorimeter.h");
  G__add_compiledheader("SBSCalorimeterBlock.h");
  G__add_compiledheader("SBSCalorimeterBlockData.h");
  G__cpp_reset_tagtablesbsDict();
}
#include <new>
extern "C" int G__cpp_dllrevsbsDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Decoder */

/* Decoder::MPDModule */
static int G__sbsDict_291_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Decoder::MPDModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Decoder::MPDModule[n];
     } else {
       p = new((void*) gvp) Decoder::MPDModule[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Decoder::MPDModule;
     } else {
       p = new((void*) gvp) Decoder::MPDModule;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Decoder::MPDModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Decoder::MPDModule((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Decoder::MPDModule((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Decoder::MPDModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Decoder::MPDModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Decoder::MPDModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Decoder::MPDModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Decoder::MPDModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Decoder::MPDModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Decoder::MPDModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Decoder::MPDModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_291_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Decoder::MPDModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_291_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Decoder::MPDModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Decoder::MPDModule(*(Decoder::MPDModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Decoder::MPDModule G__TDecodercLcLMPDModule;
static int G__sbsDict_291_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Decoder::MPDModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Decoder::MPDModule*) (soff+(sizeof(Decoder::MPDModule)*i)))->~G__TDecodercLcLMPDModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Decoder::MPDModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Decoder::MPDModule*) (soff))->~G__TDecodercLcLMPDModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_291_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Decoder::MPDModule* dest = (Decoder::MPDModule*) G__getstructoffset();
   *dest = *(Decoder::MPDModule*) libp->para[0].ref;
   const Decoder::MPDModule& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSBigBite */
static int G__sbsDict_610_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBigBite* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSBigBite((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) SBSBigBite((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSBigBite::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBigBite::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSBigBite::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSBigBite::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBigBite*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBigBite::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBigBite::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBigBite::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_610_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBigBite::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSBigBite G__TSBSBigBite;
static int G__sbsDict_610_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSBigBite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSBigBite*) (soff+(sizeof(SBSBigBite)*i)))->~G__TSBSBigBite();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSBigBite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSBigBite*) (soff))->~G__TSBSBigBite();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSGEMPlane */
static int G__sbsDict_613_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGEMPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGEMPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSGEMPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGEMPlane((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSGEMPlane((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGEMPlane((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSGEMPlane((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSGEMPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGEMPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSGEMPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSGEMPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGEMPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGEMPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGEMPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGEMPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_613_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGEMPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSGEMPlane G__TSBSGEMPlane;
static int G__sbsDict_613_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSGEMPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSGEMPlane*) (soff+(sizeof(SBSGEMPlane)*i)))->~G__TSBSGEMPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSGEMPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSGEMPlane*) (soff))->~G__TSBSGEMPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSGEMStand */
static int G__sbsDict_615_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGEMStand* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGEMStand(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSGEMStand(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGEMStand((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSGEMStand((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGEMStand((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSGEMStand((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSGEMStand::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGEMStand::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSGEMStand::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSGEMStand::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGEMStand*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGEMStand::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGEMStand::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGEMStand::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_615_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGEMStand::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSGEMStand G__TSBSGEMStand;
static int G__sbsDict_615_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSGEMStand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSGEMStand*) (soff+(sizeof(SBSGEMStand)*i)))->~G__TSBSGEMStand();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSGEMStand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSGEMStand*) (soff))->~G__TSBSGEMStand();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSShowerBlock */
static int G__sbsDict_626_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSShowerBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSShowerBlock[n];
     } else {
       p = new((void*) gvp) SBSShowerBlock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSShowerBlock;
     } else {
       p = new((void*) gvp) SBSShowerBlock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSShowerBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSShowerBlock(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) SBSShowerBlock(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSShowerBlock*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSShowerBlock*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSShowerBlock*) G__getstructoffset())->GetE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSShowerBlock*) G__getstructoffset())->GetPed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSShowerBlock*) G__getstructoffset())->GetGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSShowerBlock*) G__getstructoffset())->GetRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSShowerBlock*) G__getstructoffset())->GetCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSShowerBlock*) G__getstructoffset())->GetStat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetE((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetPed((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetGain((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetRow((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetCol((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->SetStat((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSShowerBlock*) G__getstructoffset())->operator=((SBSShowerBlock*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->ClearEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSShowerBlock::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSShowerBlock::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSShowerBlock::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSShowerBlock::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSShowerBlock*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSShowerBlock::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSShowerBlock::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSShowerBlock::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_626_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSShowerBlock::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_626_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSShowerBlock* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSShowerBlock(*(SBSShowerBlock*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSShowerBlock G__TSBSShowerBlock;
static int G__sbsDict_626_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSShowerBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSShowerBlock*) (soff+(sizeof(SBSShowerBlock)*i)))->~G__TSBSShowerBlock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSShowerBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSShowerBlock*) (soff))->~G__TSBSShowerBlock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_626_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSShowerBlock* dest = (SBSShowerBlock*) G__getstructoffset();
   *dest = *(SBSShowerBlock*) libp->para[0].ref;
   const SBSShowerBlock& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSBBShowerCluster */
static int G__sbsDict_627_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBBShowerCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBShowerCluster[n];
     } else {
       p = new((void*) gvp) SBSBBShowerCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBShowerCluster;
     } else {
       p = new((void*) gvp) SBSBBShowerCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBBShowerCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSBBShowerCluster((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) SBSBBShowerCluster((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBBShowerCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSBBShowerCluster((Int_t) G__int(libp->para[0]), (SBSShowerBlock*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) SBSBBShowerCluster((Int_t) G__int(libp->para[0]), (SBSShowerBlock*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBShowerCluster*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBShowerCluster*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBShowerCluster*) G__getstructoffset())->GetE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSBBShowerCluster*) G__getstructoffset())->GetMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSBBShowerCluster*) G__getstructoffset())->GetNMaxBlocks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->SetX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->SetY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->SetE((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->SetMult((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSBBShowerCluster*) G__getstructoffset())->GetBlocks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSBBShowerCluster*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->AddBlock((SBSShowerBlock*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->ClearEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->DeleteArrays();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSBBShowerCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBShowerCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSBBShowerCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSBBShowerCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShowerCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBShowerCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBBShowerCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBShowerCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_627_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBBShowerCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_627_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSBBShowerCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSBBShowerCluster(*(SBSBBShowerCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSBBShowerCluster G__TSBSBBShowerCluster;
static int G__sbsDict_627_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSBBShowerCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSBBShowerCluster*) (soff+(sizeof(SBSBBShowerCluster)*i)))->~G__TSBSBBShowerCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSBBShowerCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSBBShowerCluster*) (soff))->~G__TSBSBBShowerCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_627_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBBShowerCluster* dest = (SBSBBShowerCluster*) G__getstructoffset();
   *dest = *(SBSBBShowerCluster*) libp->para[0].ref;
   const SBSBBShowerCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSBBShower */
static int G__sbsDict_628_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBBShower* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSBBShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBShower((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSBBShower((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBShower((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSBBShower((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSBBShower*) G__getstructoffset())->GetNclust());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSBBShower*) G__getstructoffset())->GetNhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBShower*) G__getstructoffset())->GetE((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBShower*) G__getstructoffset())->GetX((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBShower*) G__getstructoffset())->GetY((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSBBShower*) G__getstructoffset())->GetNBlocks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSBBShower*) G__getstructoffset())->GetBlockX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSBBShower*) G__getstructoffset())->GetBlockY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSBBShower*) G__getstructoffset())->GetBlockdX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSBBShower*) G__getstructoffset())->GetBlockdY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSBBShower*) G__getstructoffset())->GetBlockdZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBShower*) G__getstructoffset())->GetBlockA_c((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSBBShower*) G__getstructoffset())->GetNRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSBBShower*) G__getstructoffset())->GetNCols());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSBBShower*) G__getstructoffset())->BlockColRowToNumber((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSBBShower*) G__getstructoffset())->GetClust((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShower*) G__getstructoffset())->AddCluster((SBSBBShowerCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShower*) G__getstructoffset())->RemoveCluster((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShower*) G__getstructoffset())->AddCluster(*(SBSBBShowerCluster*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShower*) G__getstructoffset())->LoadMCHitAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSBBShower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBShower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSBBShower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSBBShower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBShower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBShower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBBShower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBShower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_628_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBBShower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSBBShower G__TSBSBBShower;
static int G__sbsDict_628_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSBBShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSBBShower*) (soff+(sizeof(SBSBBShower)*i)))->~G__TSBSBBShower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSBBShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSBBShower*) (soff))->~G__TSBSBBShower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSBBTotalShower */
static int G__sbsDict_629_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBBTotalShower* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBTotalShower((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSBBTotalShower((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBTotalShower((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSBBTotalShower((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSBBTotalShower* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (THaApparatus*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (THaApparatus*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSBBTotalShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBTotalShower*) G__getstructoffset())->GetE((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBTotalShower*) G__getstructoffset())->GetY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSBBTotalShower*) G__getstructoffset())->GetX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSBBTotalShower*) G__getstructoffset())->GetID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSBBTotalShower*) G__getstructoffset())->GetShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSBBTotalShower*) G__getstructoffset())->GetPreShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBTotalShower*) G__getstructoffset())->LoadMCHitAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSBBTotalShower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBTotalShower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSBBTotalShower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSBBTotalShower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSBBTotalShower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBTotalShower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBBTotalShower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSBBTotalShower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_629_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSBBTotalShower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSBBTotalShower G__TSBSBBTotalShower;
static int G__sbsDict_629_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSBBTotalShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSBBTotalShower*) (soff+(sizeof(SBSBBTotalShower)*i)))->~G__TSBSBBTotalShower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSBBTotalShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSBBTotalShower*) (soff))->~G__TSBSBBTotalShower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSScintPMT */
static int G__sbsDict_630_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintPMT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 12:
     //m: 12
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11]));
     }
     break;
   case 11:
     //m: 11
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     }
     break;
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SBSScintBar*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSScintPMT(
(Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSScintPMT((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPMT((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSScintPMT((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintPMT[n];
       } else {
         p = new((void*) gvp) SBSScintPMT[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintPMT;
       } else {
         p = new((void*) gvp) SBSScintPMT;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPMT*) G__getstructoffset())->GetScintBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetGain((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetPed((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetTDCRes((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetTOffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetTimeWalk((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetTimeWExp((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetScintBar((SBSScintBar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetBarNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetSide((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetRawLowLim((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetRawUpLim((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->SetRawWrapAround((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintPMT*) G__getstructoffset())->GetGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPMT*) G__getstructoffset())->GetPed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintPMT*) G__getstructoffset())->GetTDCRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintPMT*) G__getstructoffset())->GetTOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintPMT*) G__getstructoffset())->GetTimeWalk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintPMT*) G__getstructoffset())->GetTimeWExp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPMT*) G__getstructoffset())->GetBarNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPMT*) G__getstructoffset())->GetSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPMT*) G__getstructoffset())->GetRawLowLim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPMT*) G__getstructoffset())->GetRawUpLim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintPMT*) G__getstructoffset())->GetRawWrapAround());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSScintPMT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPMT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSScintPMT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSScintPMT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPMT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPMT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintPMT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPMT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_630_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintPMT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_630_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSScintPMT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSScintPMT(*(SBSScintPMT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSScintPMT G__TSBSScintPMT;
static int G__sbsDict_630_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSScintPMT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSScintPMT*) (soff+(sizeof(SBSScintPMT)*i)))->~G__TSBSScintPMT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSScintPMT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSScintPMT*) (soff))->~G__TSBSScintPMT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_630_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintPMT* dest = (SBSScintPMT*) G__getstructoffset();
   *dest = *(SBSScintPMT*) libp->para[0].ref;
   const SBSScintPMT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSScintHit */
static int G__sbsDict_631_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSScintHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) SBSScintHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintHit((SBSScintHit*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSScintHit((SBSScintHit*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintHit[n];
       } else {
         p = new((void*) gvp) SBSScintHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintHit;
       } else {
         p = new((void*) gvp) SBSScintHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSScintHit((SBSScintHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) SBSScintHit((SBSScintHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSScintHit(
(SBSScintHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) SBSScintHit(
(SBSScintHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintHit*) G__getstructoffset())->GetScintBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintHit*) G__getstructoffset())->GetPlaneNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintHit*) G__getstructoffset())->GetBarNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintHit*) G__getstructoffset())->GetBarNum_nd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintHit*) G__getstructoffset())->GetHitXPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintHit*) G__getstructoffset())->GetHitYPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintHit*) G__getstructoffset())->GetHitZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintHit*) G__getstructoffset())->GetHitTOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintHit*) G__getstructoffset())->GetHitEdep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintHit*) G__getstructoffset())->GetHitTdiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintHit*) G__getstructoffset())->GetOrder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintHit*) G__getstructoffset())->GetClusterNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetScintBar((SBSScintBar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetPlaneNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetBarNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetBarNum_nd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetYHitPos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetHitTOF((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetHitEdep((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetHitTdiff((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetHitOrder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->SetClusterNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->AddEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintHit*) G__getstructoffset())->CopyScintHit((SBSScintHit*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSScintHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSScintHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSScintHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_631_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_631_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSScintHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSScintHit(*(SBSScintHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSScintHit G__TSBSScintHit;
static int G__sbsDict_631_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSScintHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSScintHit*) (soff+(sizeof(SBSScintHit)*i)))->~G__TSBSScintHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSScintHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSScintHit*) (soff))->~G__TSBSScintHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_631_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintHit* dest = (SBSScintHit*) G__getstructoffset();
   *dest = *(SBSScintHit*) libp->para[0].ref;
   const SBSScintHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSScintBar */
static int G__sbsDict_632_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintBar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 25:
     //m: 25
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Int_t) G__int(libp->para[22]), (Int_t) G__int(libp->para[23])
, (Double_t) G__double(libp->para[24]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Int_t) G__int(libp->para[22]), (Int_t) G__int(libp->para[23])
, (Double_t) G__double(libp->para[24]));
     }
     break;
   case 24:
     //m: 24
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Int_t) G__int(libp->para[22]), (Int_t) G__int(libp->para[23]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Int_t) G__int(libp->para[22]), (Int_t) G__int(libp->para[23]));
     }
     break;
   case 23:
     //m: 23
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Int_t) G__int(libp->para[22]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21])
, (Int_t) G__int(libp->para[22]));
     }
     break;
   case 22:
     //m: 22
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Double_t) G__double(libp->para[21]));
     }
     break;
   case 21:
     //m: 21
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]));
     }
     break;
   case 20:
     //m: 20
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19]));
     }
     break;
   case 19:
     //m: 19
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17])
, (Int_t) G__int(libp->para[18]));
     }
     break;
   case 18:
     //m: 18
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Double_t) G__double(libp->para[17]));
     }
     break;
   case 17:
     //m: 17
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]));
     }
     break;
   case 16:
     //m: 16
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15]));
     }
     break;
   case 15:
     //m: 15
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Int_t) G__int(libp->para[14]));
     }
     break;
   case 14:
     //m: 14
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13]));
     }
     break;
   case 13:
     //m: 13
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
     }
     break;
   case 12:
     //m: 12
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11]));
     }
     break;
   case 11:
     //m: 11
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     }
     break;
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSScintBar(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSScintBar((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintBar((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSScintBar((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintBar[n];
       } else {
         p = new((void*) gvp) SBSScintBar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintBar;
       } else {
         p = new((void*) gvp) SBSScintBar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetXPos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetYPos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetZPos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetXWidth((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetYWidth((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetZWidth((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetC((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetAtt((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetBarType((SBSScintBar::EBarType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetBarNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->SetBarNum_nd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetXPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetYPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetXWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetYWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetZWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetAtt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSScintBar*) G__getstructoffset())->GetLPMT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSScintBar*) G__getstructoffset())->GetRPMT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSScintBar*) G__getstructoffset())->GetBarType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintBar*) G__getstructoffset())->GetBarNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintBar*) G__getstructoffset())->GetBarNum_nd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSScintBar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintBar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSScintBar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSScintBar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintBar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintBar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintBar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintBar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_632_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintBar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_632_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSScintBar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSScintBar(*(SBSScintBar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSScintBar G__TSBSScintBar;
static int G__sbsDict_632_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSScintBar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSScintBar*) (soff+(sizeof(SBSScintBar)*i)))->~G__TSBSScintBar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSScintBar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSScintBar*) (soff))->~G__TSBSScintBar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_632_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintBar* dest = (SBSScintBar*) G__getstructoffset();
   *dest = *(SBSScintBar*) libp->para[0].ref;
   const SBSScintBar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSAdcHit */
static int G__sbsDict_633_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSAdcHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSAdcHit((SBSScintPMT*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSAdcHit((SBSScintPMT*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSAdcHit((SBSScintPMT*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSAdcHit((SBSScintPMT*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSAdcHit[n];
       } else {
         p = new((void*) gvp) SBSAdcHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSAdcHit;
       } else {
         p = new((void*) gvp) SBSAdcHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSAdcHit*) G__getstructoffset())->GetPMT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSAdcHit*) G__getstructoffset())->GetRawAmpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSAdcHit*) G__getstructoffset())->GetAmplPedCor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSAdcHit*) G__getstructoffset())->GetAmpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSAdcHit*) G__getstructoffset())->GetBarNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSAdcHit*) G__getstructoffset())->GetSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSAdcHit*) G__getstructoffset())->CorrectHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSAdcHit*) G__getstructoffset())->SetRawAmpl((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSAdcHit*) G__getstructoffset())->SetBarNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSAdcHit*) G__getstructoffset())->SetSide((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSAdcHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSAdcHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSAdcHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSAdcHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSAdcHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSAdcHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSAdcHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSAdcHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_633_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSAdcHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_633_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSAdcHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSAdcHit(*(SBSAdcHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSAdcHit G__TSBSAdcHit;
static int G__sbsDict_633_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSAdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSAdcHit*) (soff+(sizeof(SBSAdcHit)*i)))->~G__TSBSAdcHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSAdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSAdcHit*) (soff))->~G__TSBSAdcHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_633_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSAdcHit* dest = (SBSAdcHit*) G__getstructoffset();
   *dest = *(SBSAdcHit*) libp->para[0].ref;
   const SBSAdcHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSTdcHit */
static int G__sbsDict_634_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSTdcHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSTdcHit(
(SBSScintPMT*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSTdcHit(
(SBSScintPMT*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSTdcHit((SBSScintPMT*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSTdcHit((SBSScintPMT*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSTdcHit((SBSScintPMT*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSTdcHit((SBSScintPMT*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSTdcHit[n];
       } else {
         p = new((void*) gvp) SBSTdcHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSTdcHit;
       } else {
         p = new((void*) gvp) SBSTdcHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTdcHit*) G__getstructoffset())->GetPMT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTdcHit*) G__getstructoffset())->GetRawTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSTdcHit*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTdcHit*) G__getstructoffset())->GetBarNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTdcHit*) G__getstructoffset())->GetSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SBSTdcHit*) G__getstructoffset())->UpdateTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SBSTdcHit*) G__getstructoffset())->UpdateTime();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSTdcHit*) G__getstructoffset())->SetRawTime((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSTdcHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSTdcHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSTdcHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSTdcHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSTdcHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSTdcHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSTdcHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSTdcHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_634_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSTdcHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_634_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSTdcHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSTdcHit(*(SBSTdcHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSTdcHit G__TSBSTdcHit;
static int G__sbsDict_634_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSTdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSTdcHit*) (soff+(sizeof(SBSTdcHit)*i)))->~G__TSBSTdcHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSTdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSTdcHit*) (soff))->~G__TSBSTdcHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_634_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSTdcHit* dest = (SBSTdcHit*) G__getstructoffset();
   *dest = *(SBSTdcHit*) libp->para[0].ref;
   const SBSTdcHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSScintPartialHit */
static int G__sbsDict_635_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintPartialHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 11:
     //m: 11
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     }
     break;
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit(
(SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit((SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit((SBSScintBar*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPartialHit((SBSScintBar*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSScintPartialHit((SBSScintBar*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintPartialHit[n];
       } else {
         p = new((void*) gvp) SBSScintPartialHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SBSScintPartialHit;
       } else {
         p = new((void*) gvp) SBSScintPartialHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPartialHit*) G__getstructoffset())->GetScintBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintPartialHit*) G__getstructoffset())->GetBarNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintPartialHit*) G__getstructoffset())->GetCaseNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetLt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetRt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetLa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetRa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetLt_raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetRt_raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetLa_raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SBSScintPartialHit*) G__getstructoffset())->GetRa_raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetScintBar((SBSScintBar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetBarNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetCaseNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetLt((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetRt((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetLa((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetRa((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetLt_raw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetRt_raw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetLa_raw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->SetRa_raw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSScintPartialHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPartialHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSScintPartialHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSScintPartialHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPartialHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPartialHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintPartialHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPartialHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_635_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintPartialHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_635_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSScintPartialHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSScintPartialHit(*(SBSScintPartialHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSScintPartialHit G__TSBSScintPartialHit;
static int G__sbsDict_635_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSScintPartialHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSScintPartialHit*) (soff+(sizeof(SBSScintPartialHit)*i)))->~G__TSBSScintPartialHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSScintPartialHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSScintPartialHit*) (soff))->~G__TSBSScintPartialHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_635_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintPartialHit* dest = (SBSScintPartialHit*) G__getstructoffset();
   *dest = *(SBSScintPartialHit*) libp->para[0].ref;
   const SBSScintPartialHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSCDet */
static int G__sbsDict_637_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCDet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCDet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSCDet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCDet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSCDet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCDet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCDet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCDet[n];
     } else {
       p = new((void*) gvp) SBSCDet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCDet;
     } else {
       p = new((void*) gvp) SBSCDet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCDet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((SBSCDet*) G__getstructoffset())->ReadNumberSignStartComment((FILE*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSCDet*) G__getstructoffset())->BuildAllBars(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSCDet*) G__getstructoffset())->BuildCompleteBars(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNBars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNRefHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNLtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNRtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNLaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNRaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNPartHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetBars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetBar((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRefHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRefHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetLtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetLtHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRtHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetLaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetLaHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRaHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetBarHitT((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetBarHitT((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetBarHitA((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetBarHitA((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->GetNRefCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRefCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetRefCh((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCDet*) G__getstructoffset())->AreRefChOkay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetPartHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSCDet*) G__getstructoffset())->GetPartHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSCDet*) G__getstructoffset())->GetMatchRatioTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSCDet*) G__getstructoffset())->FineMatchingHits(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSCDet*) G__getstructoffset())->GetMaxADCHitBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSCDet*) G__getstructoffset())->GetMaxEnergyHitBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSCDet*) G__getstructoffset())->GetMaxADCHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSCDet*) G__getstructoffset())->GetMaxEnergyHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSCDet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCDet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSCDet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSCDet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCDet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCDet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCDet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCDet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_637_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCDet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSCDet G__TSBSCDet;
static int G__sbsDict_637_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSCDet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSCDet*) (soff+(sizeof(SBSCDet)*i)))->~G__TSBSCDet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSCDet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSCDet*) (soff))->~G__TSBSCDet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSTimingHodoscope */
static int G__sbsDict_641_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSTimingHodoscope* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSTimingHodoscope(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSTimingHodoscope(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSTimingHodoscope((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSTimingHodoscope((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSTimingHodoscope* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSTimingHodoscope[n];
     } else {
       p = new((void*) gvp) SBSTimingHodoscope[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSTimingHodoscope;
     } else {
       p = new((void*) gvp) SBSTimingHodoscope;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((SBSTimingHodoscope*) G__getstructoffset())->ReadNumberSignStartComment((FILE*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSTimingHodoscope*) G__getstructoffset())->BuildAllBars(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSTimingHodoscope*) G__getstructoffset())->BuildCompleteBars(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNBars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNRefHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNLtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNRtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNLaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNRaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNPartHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetBars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetBar((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRefHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRefHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetLtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetLtHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRtHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetLaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetLaHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRaHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetBarHitT((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetBarHitT((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetBarHitA((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetBarHitA((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetNRefCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRefCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetRefCh((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->AreRefChOkay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetPartHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSTimingHodoscope*) G__getstructoffset())->GetPartHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSTimingHodoscope*) G__getstructoffset())->GetMatchRatioTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSTimingHodoscope*) G__getstructoffset())->FineMatchingHits(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSTimingHodoscope*) G__getstructoffset())->GetMaxADCHitBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSTimingHodoscope*) G__getstructoffset())->GetMaxEnergyHitBar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSTimingHodoscope*) G__getstructoffset())->GetMaxADCHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SBSTimingHodoscope*) G__getstructoffset())->GetMaxEnergyHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSTimingHodoscope::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSTimingHodoscope::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSTimingHodoscope::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSTimingHodoscope::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSTimingHodoscope*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSTimingHodoscope::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSTimingHodoscope::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSTimingHodoscope::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_641_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSTimingHodoscope::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSTimingHodoscope G__TSBSTimingHodoscope;
static int G__sbsDict_641_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSTimingHodoscope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSTimingHodoscope*) (soff+(sizeof(SBSTimingHodoscope)*i)))->~G__TSBSTimingHodoscope();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSTimingHodoscope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSTimingHodoscope*) (soff))->~G__TSBSTimingHodoscope();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSGRINCH_Hit */
static int G__sbsDict_646_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGRINCH_Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGRINCH_Hit[n];
     } else {
       p = new((void*) gvp) SBSGRINCH_Hit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGRINCH_Hit;
     } else {
       p = new((void*) gvp) SBSGRINCH_Hit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGRINCH_Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSGRINCH_Hit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) SBSGRINCH_Hit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->Show((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->Show((FILE*) G__int(libp->para[0]), (FILE*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetI());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetJ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Hit*) G__getstructoffset())->GetVeto());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetI((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetJ((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetADC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->SetVeto((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSGRINCH_Hit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH_Hit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSGRINCH_Hit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSGRINCH_Hit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Hit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH_Hit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGRINCH_Hit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH_Hit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_646_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGRINCH_Hit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_646_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSGRINCH_Hit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSGRINCH_Hit(*(SBSGRINCH_Hit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSGRINCH_Hit G__TSBSGRINCH_Hit;
static int G__sbsDict_646_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSGRINCH_Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSGRINCH_Hit*) (soff+(sizeof(SBSGRINCH_Hit)*i)))->~G__TSBSGRINCH_Hit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSGRINCH_Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSGRINCH_Hit*) (soff))->~G__TSBSGRINCH_Hit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_646_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGRINCH_Hit* dest = (SBSGRINCH_Hit*) G__getstructoffset();
   *dest = *(SBSGRINCH_Hit*) libp->para[0].ref;
   const SBSGRINCH_Hit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSGRINCH_Cluster */
static int G__sbsDict_647_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGRINCH_Cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGRINCH_Cluster[n];
     } else {
       p = new((void*) gvp) SBSGRINCH_Cluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGRINCH_Cluster;
     } else {
       p = new((void*) gvp) SBSGRINCH_Cluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGRINCH_Cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSGRINCH_Cluster(*(SBSGRINCH_Cluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SBSGRINCH_Cluster(*(SBSGRINCH_Cluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SBSGRINCH_Cluster& obj = ((SBSGRINCH_Cluster*) G__getstructoffset())->operator=(*(SBSGRINCH_Cluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Dist((SBSGRINCH_Cluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert((SBSGRINCH_Hit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert((SBSGRINCH_Hit*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert_Photon((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert_Photon((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert_chi2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert_chi2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert_chi2_corrected((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert_N_chi2_corrected_Photon((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Insert_MaximumLikelihood((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->IsMIP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetPionChi2AnalysisFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetKaonChi2AnalysisFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetProtonChi2AnalysisFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSGRINCH_Cluster*) G__getstructoffset())->GetHitList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSGRINCH_Cluster*) G__getstructoffset())->GetLocalMaximumNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetXcenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetYcenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetXcenter((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetYcenter((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetMIPflag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetPionChi2AnalysisFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetKaonChi2AnalysisFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetProtonChi2AnalysisFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Setchi2_prob((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Setchi2_corrected_prob((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Setnoise_cut_success((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSGRINCH_Cluster*) G__getstructoffset())->FindLocalMaximumNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSGRINCH_Cluster*) G__getstructoffset())->FindResolvedClusterElements((SBSGRINCH_Hit*) G__int(libp->para[0]), (SBSGRINCH_Cluster*) G__int(libp->para[1])
, (TClonesArray*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetTheta_photon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetPhi_photon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SBSGRINCH_Cluster*) G__getstructoffset())->MakeMIP((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SBSGRINCH_Cluster*) G__getstructoffset())->MakeMIP();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetMIP((SBSGRINCH_Cluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetFictious_MIP_Flag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetTheta_photon((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetPhi_photon((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetAngle((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetTrack((THaTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->SetN_Photon((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Setangle((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->Setangle_corrected((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetN_Photon((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle_corrected((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetNphot_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetNphot_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetNphot_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle_corrected_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle_corrected_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getangle_corrected_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetN_chi2_phot_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetN_chi2_phot_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetN_chi2_phot_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_pi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_k());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_prob_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_prob_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_prob_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_prob((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetN_chi2_corrected_phot_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetN_chi2_corrected_phot_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetN_chi2_corrected_phot_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_corrected_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_corrected_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_corrected_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_corrected_prob_pi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_corrected_prob_k((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_corrected_prob_p((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getchi2_corrected_prob((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getnoise_cut_success((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getunresolved_noise_cut_success());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Getresolved_noise_cut_success());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->GetFictious_Mip_Flag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SBSGRINCH_Cluster*) G__getstructoffset())->Show((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SBSGRINCH_Cluster*) G__getstructoffset())->Show((FILE*) G__int(libp->para[0]), (FILE*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SBSGRINCH_Cluster*) G__getstructoffset())->ShowElements((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH_Cluster*) G__getstructoffset())->Test((SBSGRINCH_Hit*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSGRINCH_Cluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH_Cluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSGRINCH_Cluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSGRINCH_Cluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH_Cluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH_Cluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGRINCH_Cluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH_Cluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_647_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGRINCH_Cluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSGRINCH_Cluster G__TSBSGRINCH_Cluster;
static int G__sbsDict_647_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSGRINCH_Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSGRINCH_Cluster*) (soff+(sizeof(SBSGRINCH_Cluster)*i)))->~G__TSBSGRINCH_Cluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSGRINCH_Cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSGRINCH_Cluster*) (soff))->~G__TSBSGRINCH_Cluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSGRINCH */
static int G__sbsDict_651_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSGRINCH* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGRINCH(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSGRINCH(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGRINCH((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSGRINCH((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSGRINCH((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSGRINCH((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH*) G__getstructoffset())->ReadBadPads((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSGRINCH*) G__getstructoffset())->ReadData((FILE*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSGRINCH*) G__getstructoffset())->GetHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSGRINCH*) G__getstructoffset())->GetResolvedHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSGRINCH*) G__getstructoffset())->GetCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSGRINCH*) G__getstructoffset())->GetResolvedCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH*) G__getstructoffset())->GetNumHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH*) G__getstructoffset())->GetNumClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH*) G__getstructoffset())->GetNumResolvedHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH*) G__getstructoffset())->GetNumResolvedClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSGRINCH*) G__getstructoffset())->GetMaxNumHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH*) G__getstructoffset())->SetMaxNumHits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH*) G__getstructoffset())->SetMIPArea((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SBSGRINCH*) G__getstructoffset())->EnableClusterResolving((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SBSGRINCH*) G__getstructoffset())->EnableClusterResolving();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SBSGRINCH*) G__getstructoffset())->EnableBenchmarks((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SBSGRINCH*) G__getstructoffset())->EnableBenchmarks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SBSGRINCH*) G__getstructoffset())->PrintBenchmarks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSGRINCH::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSGRINCH::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSGRINCH::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSGRINCH*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGRINCH::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSGRINCH::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_651_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSGRINCH::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSGRINCH G__TSBSGRINCH;
static int G__sbsDict_651_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSGRINCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSGRINCH*) (soff+(sizeof(SBSGRINCH)*i)))->~G__TSBSGRINCH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSGRINCH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSGRINCH*) (soff))->~G__TSBSGRINCH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSScintPlane */
static int G__sbsDict_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSScintPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) SBSScintPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSScintPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPlane[n];
     } else {
       p = new((void*) gvp) SBSScintPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSScintPlane;
     } else {
       p = new((void*) gvp) SBSScintPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintPlane*) G__getstructoffset())->CoarseProcess(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintPlane*) G__getstructoffset())->FineProcess(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SBSScintPlane*) G__getstructoffset())->IsTracking());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SBSScintPlane*) G__getstructoffset())->IsPid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((SBSScintPlane*) G__getstructoffset())->ReadNumberSignStartComment((FILE*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintPlane*) G__getstructoffset())->BuildAllBars(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSScintPlane*) G__getstructoffset())->BuildCompleteBars(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNBars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNRefHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNLtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNRtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNLaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNRaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNPartHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetBars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetBar((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRefHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRefHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetLtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetLtHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRtHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRtHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetLaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetLaHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRaHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRaHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetBarHitT((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetBarHitT((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetBarHitA((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])
, (const int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetBarHitA((const char) G__int(libp->para[0]), (SBSScintBar*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->GetNRefCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRefCh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetRefCh((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSScintPlane*) G__getstructoffset())->AreRefChOkay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetPartHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SBSScintPlane*) G__getstructoffset())->GetPartHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSScintPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSScintPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSScintPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSScintPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSScintPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_652_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSScintPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSScintPlane G__TSBSScintPlane;
static int G__sbsDict_652_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSScintPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSScintPlane*) (soff+(sizeof(SBSScintPlane)*i)))->~G__TSBSScintPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSScintPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSScintPlane*) (soff))->~G__TSBSScintPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSECalCluster */
static int G__sbsDict_654_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSECalCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSECalCluster[n];
     } else {
       p = new((void*) gvp) SBSECalCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSECalCluster;
     } else {
       p = new((void*) gvp) SBSECalCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSECalCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSECalCluster((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) SBSECalCluster((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSECalCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSECalCluster((Int_t) G__int(libp->para[0]), (SBSShowerBlock*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) SBSECalCluster((Int_t) G__int(libp->para[0]), (SBSShowerBlock*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSECalCluster*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSECalCluster*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSECalCluster*) G__getstructoffset())->GetE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSECalCluster*) G__getstructoffset())->GetMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSECalCluster*) G__getstructoffset())->GetNMaxBlocks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->SetX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->SetY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->SetE((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->SetMult((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSECalCluster*) G__getstructoffset())->GetBlocks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSECalCluster*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->AddBlock((SBSShowerBlock*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->ClearEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->DeleteArrays();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSECalCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSECalCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSECalCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSECalCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECalCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSECalCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSECalCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSECalCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_654_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSECalCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_654_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSECalCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSECalCluster(*(SBSECalCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSECalCluster G__TSBSECalCluster;
static int G__sbsDict_654_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSECalCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSECalCluster*) (soff+(sizeof(SBSECalCluster)*i)))->~G__TSBSECalCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSECalCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSECalCluster*) (soff))->~G__TSBSECalCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_654_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSECalCluster* dest = (SBSECalCluster*) G__getstructoffset();
   *dest = *(SBSECalCluster*) libp->para[0].ref;
   const SBSECalCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSECal */
static int G__sbsDict_655_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSECal* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSECal(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSECal(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSECal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSECal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSECal((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSECal((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSECal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSECal*) G__getstructoffset())->GetNclust());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSECal*) G__getstructoffset())->GetNhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSECal*) G__getstructoffset())->GetE((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSECal*) G__getstructoffset())->GetX((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSECal*) G__getstructoffset())->GetY((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSECal*) G__getstructoffset())->GetNBlocks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSECal*) G__getstructoffset())->GetBlockX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSECal*) G__getstructoffset())->GetBlockY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSECal*) G__getstructoffset())->GetBlockdX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSECal*) G__getstructoffset())->GetBlockdY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SBSECal*) G__getstructoffset())->GetBlockdZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSECal*) G__getstructoffset())->GetBlockA_c((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSECal*) G__getstructoffset())->GetNRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSECal*) G__getstructoffset())->GetNCols());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSECal*) G__getstructoffset())->BlockColRowToNumber((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SBSECal*) G__getstructoffset())->GetClust((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECal*) G__getstructoffset())->AddCluster((SBSECalCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECal*) G__getstructoffset())->RemoveCluster((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECal*) G__getstructoffset())->AddCluster(*(SBSECalCluster*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECal*) G__getstructoffset())->LoadMCHitAt((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSECal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSECal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSECal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSECal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSECal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSECal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSECal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSECal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_655_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSECal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSECal G__TSBSECal;
static int G__sbsDict_655_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSECal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSECal*) (soff+(sizeof(SBSECal)*i)))->~G__TSBSECal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSECal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSECal*) (soff))->~G__TSBSECal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSEArm */
static int G__sbsDict_656_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSEArm* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSEArm((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) SBSEArm((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSEArm));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSEArm::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSEArm::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSEArm::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSEArm::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSEArm*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSEArm::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSEArm::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSEArm::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_656_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSEArm::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSEArm G__TSBSEArm;
static int G__sbsDict_656_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSEArm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSEArm*) (soff+(sizeof(SBSEArm)*i)))->~G__TSBSEArm();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSEArm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSEArm*) (soff))->~G__TSBSEArm();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSCalorimeterBlockData */

/* SBSCalorimeterBlock */
static int G__sbsDict_663_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlock[n];
     } else {
       p = new((void*) gvp) SBSCalorimeterBlock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlock;
     } else {
       p = new((void*) gvp) SBSCalorimeterBlock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSCalorimeterBlock(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) SBSCalorimeterBlock(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSCalorimeterBlock*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSCalorimeterBlock*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SBSCalorimeterBlock*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCalorimeterBlock*) G__getstructoffset())->GetRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCalorimeterBlock*) G__getstructoffset())->GetCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCalorimeterBlock*) G__getstructoffset())->GetLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SBSCalorimeterBlock*) G__getstructoffset())->GetStat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->SetX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->SetY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->SetZ((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->SetRow((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->SetCol((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->SetLayer((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->SetStat((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->ClearEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SBSCalorimeterBlock*) G__getstructoffset())->HasData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSCalorimeterBlock::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlock::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSCalorimeterBlock::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSCalorimeterBlock::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlock*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlock::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlock::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlock::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_663_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlock::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_663_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSCalorimeterBlock* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSCalorimeterBlock(*(SBSCalorimeterBlock*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSCalorimeterBlock G__TSBSCalorimeterBlock;
static int G__sbsDict_663_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSCalorimeterBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSCalorimeterBlock*) (soff+(sizeof(SBSCalorimeterBlock)*i)))->~G__TSBSCalorimeterBlock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSCalorimeterBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSCalorimeterBlock*) (soff))->~G__TSBSCalorimeterBlock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_663_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlock* dest = (SBSCalorimeterBlock*) G__getstructoffset();
   *dest = *(SBSCalorimeterBlock*) libp->para[0].ref;
   const SBSCalorimeterBlock& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSCalorimeterBlockTDC */
static int G__sbsDict_664_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockTDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlockTDC[n];
     } else {
       p = new((void*) gvp) SBSCalorimeterBlockTDC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlockTDC;
     } else {
       p = new((void*) gvp) SBSCalorimeterBlockTDC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockTDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSCalorimeterBlockTDC(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
   } else {
     p = new((void*) gvp) SBSCalorimeterBlockTDC(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSCalorimeterBlockTDC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockTDC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSCalorimeterBlockTDC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSCalorimeterBlockTDC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlockTDC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockTDC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlockTDC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockTDC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_664_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlockTDC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_664_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSCalorimeterBlockTDC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSCalorimeterBlockTDC(*(SBSCalorimeterBlockTDC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSCalorimeterBlockTDC G__TSBSCalorimeterBlockTDC;
static int G__sbsDict_664_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSCalorimeterBlockTDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSCalorimeterBlockTDC*) (soff+(sizeof(SBSCalorimeterBlockTDC)*i)))->~G__TSBSCalorimeterBlockTDC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSCalorimeterBlockTDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSCalorimeterBlockTDC*) (soff))->~G__TSBSCalorimeterBlockTDC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_664_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockTDC* dest = (SBSCalorimeterBlockTDC*) G__getstructoffset();
   *dest = *(SBSCalorimeterBlockTDC*) libp->para[0].ref;
   const SBSCalorimeterBlockTDC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSCalorimeterBlockSamples */
static int G__sbsDict_665_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockSamples* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlockSamples[n];
     } else {
       p = new((void*) gvp) SBSCalorimeterBlockSamples[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlockSamples;
     } else {
       p = new((void*) gvp) SBSCalorimeterBlockSamples;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockSamples* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSCalorimeterBlockSamples(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
   } else {
     p = new((void*) gvp) SBSCalorimeterBlockSamples(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSCalorimeterBlockSamples::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockSamples::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSCalorimeterBlockSamples::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSCalorimeterBlockSamples::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlockSamples*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockSamples::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlockSamples::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockSamples::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_665_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlockSamples::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_665_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSCalorimeterBlockSamples* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSCalorimeterBlockSamples(*(SBSCalorimeterBlockSamples*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSCalorimeterBlockSamples G__TSBSCalorimeterBlockSamples;
static int G__sbsDict_665_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSCalorimeterBlockSamples*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSCalorimeterBlockSamples*) (soff+(sizeof(SBSCalorimeterBlockSamples)*i)))->~G__TSBSCalorimeterBlockSamples();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSCalorimeterBlockSamples*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSCalorimeterBlockSamples*) (soff))->~G__TSBSCalorimeterBlockSamples();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_665_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockSamples* dest = (SBSCalorimeterBlockSamples*) G__getstructoffset();
   *dest = *(SBSCalorimeterBlockSamples*) libp->para[0].ref;
   const SBSCalorimeterBlockSamples& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSCalorimeterBlockSamplesTDC */
static int G__sbsDict_666_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockSamplesTDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlockSamplesTDC[n];
     } else {
       p = new((void*) gvp) SBSCalorimeterBlockSamplesTDC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeterBlockSamplesTDC;
     } else {
       p = new((void*) gvp) SBSCalorimeterBlockSamplesTDC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockSamplesTDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 11
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SBSCalorimeterBlockSamplesTDC(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
   } else {
     p = new((void*) gvp) SBSCalorimeterBlockSamplesTDC(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSCalorimeterBlockSamplesTDC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockSamplesTDC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSCalorimeterBlockSamplesTDC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSCalorimeterBlockSamplesTDC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeterBlockSamplesTDC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockSamplesTDC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlockSamplesTDC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeterBlockSamplesTDC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_666_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeterBlockSamplesTDC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_666_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SBSCalorimeterBlockSamplesTDC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SBSCalorimeterBlockSamplesTDC(*(SBSCalorimeterBlockSamplesTDC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSCalorimeterBlockSamplesTDC G__TSBSCalorimeterBlockSamplesTDC;
static int G__sbsDict_666_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSCalorimeterBlockSamplesTDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSCalorimeterBlockSamplesTDC*) (soff+(sizeof(SBSCalorimeterBlockSamplesTDC)*i)))->~G__TSBSCalorimeterBlockSamplesTDC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSCalorimeterBlockSamplesTDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSCalorimeterBlockSamplesTDC*) (soff))->~G__TSBSCalorimeterBlockSamplesTDC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_666_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeterBlockSamplesTDC* dest = (SBSCalorimeterBlockSamplesTDC*) G__getstructoffset();
   *dest = *(SBSCalorimeterBlockSamplesTDC*) libp->para[0].ref;
   const SBSCalorimeterBlockSamplesTDC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSCalorimeter */
static int G__sbsDict_670_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSCalorimeter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeter(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSCalorimeter(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSCalorimeter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSCalorimeter((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSCalorimeter((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeter*) G__getstructoffset())->ClearEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeter*) G__getstructoffset())->SetWithADCSamples((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeter*) G__getstructoffset())->SetWithTDC((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSCalorimeter*) G__getstructoffset())->DecodeADC(*(THaEvData*) libp->para[0].ref, (SBSCalorimeterBlock*) G__int(libp->para[1])
, (THaDetMap::Module*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SBSCalorimeter*) G__getstructoffset())->DecodeTDC(*(THaEvData*) libp->para[0].ref, (SBSCalorimeterBlock*) G__int(libp->para[1])
, (THaDetMap::Module*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((SBSCalorimeter*) G__getstructoffset())->blkidx((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((SBSCalorimeter*) G__getstructoffset())->blkidx((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeter*) G__getstructoffset())->blkrcl((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSCalorimeter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSCalorimeter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSCalorimeter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSCalorimeter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSCalorimeter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_670_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSCalorimeter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSCalorimeter G__TSBSCalorimeter;
static int G__sbsDict_670_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSCalorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSCalorimeter*) (soff+(sizeof(SBSCalorimeter)*i)))->~G__TSBSCalorimeter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSCalorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSCalorimeter*) (soff))->~G__TSBSCalorimeter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SBSHCal */
static int G__sbsDict_680_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SBSHCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSHCal(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SBSHCal(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSHCal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SBSHCal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SBSHCal((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SBSHCal((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_SBSHCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SBSHCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSHCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SBSHCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SBSHCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SBSHCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSHCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSHCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SBSHCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_680_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SBSHCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SBSHCal G__TSBSHCal;
static int G__sbsDict_680_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SBSHCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SBSHCal*) (soff+(sizeof(SBSHCal)*i)))->~G__TSBSHCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SBSHCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SBSHCal*) (soff))->~G__TSBSHCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Decoder::SBSDecodeF1TDCModule */
static int G__sbsDict_681_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Decoder::SBSDecodeF1TDCModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Decoder::SBSDecodeF1TDCModule[n];
     } else {
       p = new((void*) gvp) Decoder::SBSDecodeF1TDCModule[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Decoder::SBSDecodeF1TDCModule;
     } else {
       p = new((void*) gvp) Decoder::SBSDecodeF1TDCModule;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Decoder::SBSDecodeF1TDCModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Decoder::SBSDecodeF1TDCModule((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Decoder::SBSDecodeF1TDCModule((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Decoder::SBSDecodeF1TDCModule*) G__getstructoffset())->SetResolution((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Decoder::SBSDecodeF1TDCModule*) G__getstructoffset())->SetResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Decoder::SBSDecodeF1TDCModule*) G__getstructoffset())->GetResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Decoder::SBSDecodeF1TDCModule*) G__getstructoffset())->IsHiResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Decoder::SBSDecodeF1TDCModule*) G__getstructoffset())->GetNumHits((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Decoder::SBSDecodeF1TDCModule*) G__getstructoffset())->GetNumSlots());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Decoder::SBSDecodeF1TDCModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Decoder::SBSDecodeF1TDCModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Decoder::SBSDecodeF1TDCModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Decoder::SBSDecodeF1TDCModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Decoder::SBSDecodeF1TDCModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Decoder::SBSDecodeF1TDCModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Decoder::SBSDecodeF1TDCModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Decoder::SBSDecodeF1TDCModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sbsDict_681_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Decoder::SBSDecodeF1TDCModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__sbsDict_681_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Decoder::SBSDecodeF1TDCModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Decoder::SBSDecodeF1TDCModule(*(Decoder::SBSDecodeF1TDCModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Decoder::SBSDecodeF1TDCModule G__TDecodercLcLSBSDecodeF1TDCModule;
static int G__sbsDict_681_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Decoder::SBSDecodeF1TDCModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Decoder::SBSDecodeF1TDCModule*) (soff+(sizeof(Decoder::SBSDecodeF1TDCModule)*i)))->~G__TDecodercLcLSBSDecodeF1TDCModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Decoder::SBSDecodeF1TDCModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Decoder::SBSDecodeF1TDCModule*) (soff))->~G__TDecodercLcLSBSDecodeF1TDCModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__sbsDict_681_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Decoder::SBSDecodeF1TDCModule* dest = (Decoder::SBSDecodeF1TDCModule*) G__getstructoffset();
   *dest = *(Decoder::SBSDecodeF1TDCModule*) libp->para[0].ref;
   const Decoder::SBSDecodeF1TDCModule& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Decoder */

/* Decoder::MPDModule */

/* SBSBigBite */

/* SBSGEMPlane */

/* SBSGEMStand */

/* SBSShowerBlock */

/* SBSBBShowerCluster */

/* SBSBBShower */

/* SBSBBTotalShower */

/* SBSScintPMT */

/* SBSScintHit */

/* SBSScintBar */

/* SBSAdcHit */

/* SBSTdcHit */

/* SBSScintPartialHit */

/* SBSCDet */

/* SBSTimingHodoscope */

/* SBSGRINCH_Hit */

/* SBSGRINCH_Cluster */

/* SBSGRINCH */

/* SBSScintPlane */

/* SBSECalCluster */

/* SBSECal */

/* SBSEArm */

/* SBSCalorimeterBlockData */

/* SBSCalorimeterBlock */

/* SBSCalorimeterBlockTDC */

/* SBSCalorimeterBlockSamples */

/* SBSCalorimeterBlockSamplesTDC */

/* SBSCalorimeter */

/* SBSHCal */

/* Decoder::SBSDecodeF1TDCModule */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncsbsDict {
 public:
  G__Sizep2memfuncsbsDict(): p(&G__Sizep2memfuncsbsDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncsbsDict::*p)();
};

size_t G__get_sizep2memfuncsbsDict()
{
  G__Sizep2memfuncsbsDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancesbsDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule))) {
     Decoder::MPDModule *G__Lderived;
     G__Lderived=(Decoder::MPDModule*)0x1000;
     {
       Decoder::VmeModule *G__Lpbase=(Decoder::VmeModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule),G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLVmeModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Decoder::Module *G__Lpbase=(Decoder::Module*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule),G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite))) {
     SBSBigBite *G__Lderived;
     G__Lderived=(SBSBigBite*)0x1000;
     {
       THaSpectrometer *G__Lpbase=(THaSpectrometer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaApparatus *G__Lpbase=(THaApparatus*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite),G__get_linked_tagnum(&G__sbsDictLN_THaApparatus),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaTrackingModule *G__Lpbase=(THaTrackingModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite),G__get_linked_tagnum(&G__sbsDictLN_THaTrackingModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaVertexModule *G__Lpbase=(THaVertexModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite),G__get_linked_tagnum(&G__sbsDictLN_THaVertexModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane))) {
     SBSGEMPlane *G__Lderived;
     G__Lderived=(SBSGEMPlane*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane),G__get_linked_tagnum(&G__sbsDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand))) {
     SBSGEMStand *G__Lderived;
     G__Lderived=(SBSGEMStand*)0x1000;
     {
       THaTrackingDetector *G__Lpbase=(THaTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand),G__get_linked_tagnum(&G__sbsDictLN_THaTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_THaSubDetector))) {
     THaSubDetector *G__Lderived;
     G__Lderived=(THaSubDetector*)0x1000;
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_THaSubDetector),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_THaSubDetector),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_THaSubDetector),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_THaSubDetector),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock))) {
     SBSShowerBlock *G__Lderived;
     G__Lderived=(SBSShowerBlock*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster))) {
     SBSBBShowerCluster *G__Lderived;
     G__Lderived=(SBSBBShowerCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower))) {
     SBSBBShower *G__Lderived;
     G__Lderived=(SBSBBShower*)0x1000;
     {
       THaPidDetector *G__Lpbase=(THaPidDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_THaPidDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower))) {
     SBSBBTotalShower *G__Lderived;
     G__Lderived=(SBSBBTotalShower*)0x1000;
     {
       THaPidDetector *G__Lpbase=(THaPidDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_THaPidDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT))) {
     SBSScintPMT *G__Lderived;
     G__Lderived=(SBSScintPMT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit))) {
     SBSScintHit *G__Lderived;
     G__Lderived=(SBSScintHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar))) {
     SBSScintBar *G__Lderived;
     G__Lderived=(SBSScintBar*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit))) {
     SBSAdcHit *G__Lderived;
     G__Lderived=(SBSAdcHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit))) {
     SBSTdcHit *G__Lderived;
     G__Lderived=(SBSTdcHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit))) {
     SBSScintPartialHit *G__Lderived;
     G__Lderived=(SBSScintPartialHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet))) {
     SBSCDet *G__Lderived;
     G__Lderived=(SBSCDet*)0x1000;
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope))) {
     SBSTimingHodoscope *G__Lderived;
     G__Lderived=(SBSTimingHodoscope*)0x1000;
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit))) {
     SBSGRINCH_Hit *G__Lderived;
     G__Lderived=(SBSGRINCH_Hit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster))) {
     SBSGRINCH_Cluster *G__Lderived;
     G__Lderived=(SBSGRINCH_Cluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH))) {
     SBSGRINCH *G__Lderived;
     G__Lderived=(SBSGRINCH*)0x1000;
     {
       THaPidDetector *G__Lpbase=(THaPidDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_THaPidDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane))) {
     SBSScintPlane *G__Lderived;
     G__Lderived=(SBSScintPlane*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane),G__get_linked_tagnum(&G__sbsDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster))) {
     SBSECalCluster *G__Lderived;
     G__Lderived=(SBSECalCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSECal))) {
     SBSECal *G__Lderived;
     G__Lderived=(SBSECal*)0x1000;
     {
       THaPidDetector *G__Lpbase=(THaPidDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_THaPidDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm))) {
     SBSEArm *G__Lderived;
     G__Lderived=(SBSEArm*)0x1000;
     {
       THaSpectrometer *G__Lpbase=(THaSpectrometer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaApparatus *G__Lpbase=(THaApparatus*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm),G__get_linked_tagnum(&G__sbsDictLN_THaApparatus),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaTrackingModule *G__Lpbase=(THaTrackingModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm),G__get_linked_tagnum(&G__sbsDictLN_THaTrackingModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaVertexModule *G__Lpbase=(THaVertexModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm),G__get_linked_tagnum(&G__sbsDictLN_THaVertexModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock))) {
     SBSCalorimeterBlock *G__Lderived;
     G__Lderived=(SBSCalorimeterBlock*)0x1000;
     {
       SBSCalorimeterBlockData::ADC *G__Lpbase=(SBSCalorimeterBlockData::ADC*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLADC),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC))) {
     SBSCalorimeterBlockTDC *G__Lderived;
     G__Lderived=(SBSCalorimeterBlockTDC*)0x1000;
     {
       SBSCalorimeterBlock *G__Lpbase=(SBSCalorimeterBlock*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       SBSCalorimeterBlockData::ADC *G__Lpbase=(SBSCalorimeterBlockData::ADC*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLADC),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       SBSCalorimeterBlockData::TDC *G__Lpbase=(SBSCalorimeterBlockData::TDC*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLTDC),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples))) {
     SBSCalorimeterBlockSamples *G__Lderived;
     G__Lderived=(SBSCalorimeterBlockSamples*)0x1000;
     {
       SBSCalorimeterBlock *G__Lpbase=(SBSCalorimeterBlock*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       SBSCalorimeterBlockData::ADC *G__Lpbase=(SBSCalorimeterBlockData::ADC*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLADC),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       SBSCalorimeterBlockData::Samples *G__Lpbase=(SBSCalorimeterBlockData::Samples*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLSamples),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC))) {
     SBSCalorimeterBlockSamplesTDC *G__Lderived;
     G__Lderived=(SBSCalorimeterBlockSamplesTDC*)0x1000;
     {
       SBSCalorimeterBlockSamples *G__Lpbase=(SBSCalorimeterBlockSamples*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       SBSCalorimeterBlock *G__Lpbase=(SBSCalorimeterBlock*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       SBSCalorimeterBlockData::ADC *G__Lpbase=(SBSCalorimeterBlockData::ADC*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLADC),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       SBSCalorimeterBlockData::Samples *G__Lpbase=(SBSCalorimeterBlockData::Samples*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLSamples),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       SBSCalorimeterBlockData::TDC *G__Lpbase=(SBSCalorimeterBlockData::TDC*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLTDC),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter))) {
     SBSCalorimeter *G__Lderived;
     G__Lderived=(SBSCalorimeter*)0x1000;
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal))) {
     SBSHCal *G__Lderived;
     G__Lderived=(SBSHCal*)0x1000;
     {
       SBSCalorimeter *G__Lpbase=(SBSCalorimeter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter),(long)G__Lpbase-(long)G__Lderived,2,1);
     }
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,2,0);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,2,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,2,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,2,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,2,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,2,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,2,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule))) {
     Decoder::SBSDecodeF1TDCModule *G__Lderived;
     G__Lderived=(Decoder::SBSDecodeF1TDCModule*)0x1000;
     {
       Decoder::VmeModule *G__Lpbase=(Decoder::VmeModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule),G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLVmeModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Decoder::Module *G__Lpbase=(Decoder::Module*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule),G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule),G__get_linked_tagnum(&G__sbsDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule),G__get_linked_tagnum(&G__sbsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablesbsDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<ModuleType>",117,G__get_linked_tagnum(&G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<Decoder::Module::ModuleType>",117,G__get_linked_tagnum(&G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<Decoder::Module::ModuleType,less<Decoder::Module::ModuleType> >",117,G__get_linked_tagnum(&G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,UInt_t>",117,G__get_linked_tagnum(&G__sbsDictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,UInt_t>",117,G__get_linked_tagnum(&G__sbsDictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__sbsDictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int,less<string> >",117,G__get_linked_tagnum(&G__sbsDictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SBSGEMPlane*>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<mpdmap_t>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UShort_t>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<UShort_t> >",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<UShort_t> >",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<unsigned short,allocator<unsigned short> > >",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SBSCalorimeterBlock*>",117,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__sbsDictLN_reverse_iteratorlEvectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Decoder */
static void G__setup_memvarDecoder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_Decoder));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("MAXROC=%lldLL",(long long)Decoder::MAXROC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("MAXBANK=%lldLL",(long long)Decoder::MAXBANK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("MAXSLOT=%lldLL",(long long)Decoder::MAXSLOT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("MAXSLOT_FB=%lldLL",(long long)Decoder::MAXSLOT_FB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("MAX_PHYS_EVTYPE=%lldLL",(long long)Decoder::MAX_PHYS_EVTYPE).data(),0,"Types up to this are physics");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("SYNC_EVTYPE=%lldLL",(long long)Decoder::SYNC_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("PRESTART_EVTYPE=%lldLL",(long long)Decoder::PRESTART_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("GO_EVTYPE=%lldLL",(long long)Decoder::GO_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("PAUSE_EVTYPE=%lldLL",(long long)Decoder::PAUSE_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("END_EVTYPE=%lldLL",(long long)Decoder::END_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("TS_PRESCALE_EVTYPE=%lldLL",(long long)Decoder::TS_PRESCALE_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("EPICS_EVTYPE=%lldLL",(long long)Decoder::EPICS_EVTYPE).data(),0,"default in Hall A");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("PRESCALE_EVTYPE=%lldLL",(long long)Decoder::PRESCALE_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("DETMAP_FILE=%lldLL",(long long)Decoder::DETMAP_FILE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("TRIGGER_FILE=%lldLL",(long long)Decoder::TRIGGER_FILE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("SCALER_EVTYPE=%lldLL",(long long)Decoder::SCALER_EVTYPE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLEModuleType),-1,-2,1,G__FastAllocString(2048).Format("kSampleADC=%lldLL",(long long)Decoder::kSampleADC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLEModuleType),-1,-2,1,G__FastAllocString(2048).Format("kPulseIntegral=%lldLL",(long long)Decoder::kPulseIntegral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLEModuleType),-1,-2,1,G__FastAllocString(2048).Format("kPulseTime=%lldLL",(long long)Decoder::kPulseTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLEModuleType),-1,-2,1,G__FastAllocString(2048).Format("kPulsePeak=%lldLL",(long long)Decoder::kPulsePeak).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLEModuleType),-1,-2,1,G__FastAllocString(2048).Format("kPulsePedestal=%lldLL",(long long)Decoder::kPulsePedestal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLEModuleType),-1,-2,1,G__FastAllocString(2048).Format("kCoarseTime=%lldLL",(long long)Decoder::kCoarseTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLEModuleType),-1,-2,1,G__FastAllocString(2048).Format("kFineTime=%lldLL",(long long)Decoder::kFineTime).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Decoder::MPDModule */
static void G__setup_memvarDecodercLcLMPDModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule));
   { Decoder::MPDModule *p; p=(Decoder::MPDModule*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAcqMode=",0,"normal, zero suppression, histogram, synch ...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSamplePeriod=",0,"25 ns, 75 ns ...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumSample=",0,"number of sample / event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumADC=",0,"number of ADC fifos (number of front end cards served by the MPD)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdxA=",0,"ADC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdxS=",0,"Sample");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdxC=",0,"Channel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdxMPD=",0,"MPD ID");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCountS=",0,"Sample Counter from electronics");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCountW=",0,"Word ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fFrameHeader=",0,"Frame Header");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fFrameTrailer=",0,"Frame Trailer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgRcLcLiterator),G__defined_typename("TypeIter_t"),-2,4,"fgThisType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSBigBite */
static void G__setup_memvarSBSBigBite(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite));
   { SBSBigBite *p; p=(SBSBigBite*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSGEMPlane */
static void G__setup_memvarSBSGEMPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane));
   { SBSGEMPlane *p; p=(SBSGEMPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgR),G__defined_typename("vector<mpdmap_t>"),-1,4,"fMPDmap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fChanMapData=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZeroSuppressRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fZeroSuppress=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNch=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStrip=",0,"[fNch]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fadc[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fadc0=",0,"[fNch]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fadc1=",0,"[fNch]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fadc2=",0,"[fNch]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fadc3=",0,"[fNch]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fadc4=",0,"[fNch]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fadc5=",0,"[fNch]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPedestal=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSGEMStand */
static void G__setup_memvarSBSGEMStand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand));
   { SBSGEMStand *p; p=(SBSGEMStand*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgR),G__defined_typename("vector<SBSGEMPlane*>"),-1,4,"fPlanes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_THaCrateMap),-1,-1,4,"fCrateMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSShowerBlock */
static void G__setup_memvarSBSShowerBlock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock));
   { SBSShowerBlock *p; p=(SBSShowerBlock*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,1,-1,-1,-2,4,"kBig=",0,"= 1e15;");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"x position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"y position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPed=",0,"Pedestal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGain=",0,"Gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fE=",0,"Energy deposit in block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRow=",0,"Row of the block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCol=",0,"Column of the block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStat=",0,"Status: 0: not seen, 1: seen, 2: local max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSBBShowerCluster */
static void G__setup_memvarSBSBBShowerCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster));
   { SBSBBShowerCluster *p; p=(SBSBBShowerCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"kBig=",0,"= 1e15;");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"x position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"y position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fE=",0,"Energy deposit in block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMult=",0,"Number of blocks in the cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMaxBlocks=",0,"Max number of blocks");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock),-1,-1,4,"fBlocks=",0,"[fNMaxBlocks] List of blocks in cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSBBShower */
static void G__setup_memvarSBSBBShower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower));
   { SBSBBShower *p; p=(SBSBBShower*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fCoarseProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFineProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxNClust=",0,(char*)NULL);
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNChan=",0,"Number of channels for each module");
   G__memvar_setup((void*)0,82,2,0,-1,G__defined_typename("UShort_t"),-1,2,"fChanMap=",0,"Logical channel numbers ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclublk=",0,"Max. number of blocks composing a cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNrows=",0,"Number of rows");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNcols=",0,"Number of columns");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBlockX=",0,"[fNelem] x positions (cm) of block centers");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBlockY=",0,"[fNelem] y positions (cm) of block centers");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPed=",0,"[fNelem] Pedestals for each block");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fGain=",0,"[fNelem] Gains for each block");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"gconst=",0,"const from gain correction ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"gslope=",0,"slope for gain correction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"acc_charge=",0,"accumulated charge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEmin=",0,"Minimum energy for a cluster center");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNhits=",0,"Number of hits");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA=",0,"[fNelem] Array of ADC amplitudes of blocks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA_p=",0,"[fNelem] Array of ADC minus pedestal values of blocks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA_c=",0,"[fNelem] Array of corrected ADC amplitudes of blocks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAsum_p=",0,"Sum of blocks ADC minus pedestal values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAsum_c=",0,"Sum of blocks corrected ADC amplitudes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclust=",0,"Number of clusters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fE=",0,"[fNClust] Energy (MeV) of clusters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX=",0,"[fNClust] x position (m) of clusters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY=",0,"[fNClust] y position (m) of clusters ");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMult=",0,"[fNClust]  Number of blocks in main cluster");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNblk=",0,"[fNclublk] Numbers of blocks composing main cluster");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEblk=",0,"[fNclublk] Energies of blocks composing main cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTRX=",0,"x position of track cross point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTRY=",0,"y position of track cross point");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fE_c=",0,"[fNClust] Corrected Energy (MeV) of clusters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock),-1,-1,2,"fBlocks=",0,"[fNelem] Array of blocks");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster),-1,-1,2,"fClusters=",0,"[fMaxNClust] ");
   G__memvar_setup((void*)0,85,3,0,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock),-1,-1,2,"fBlkGrid=",0,"[fNrows]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tan_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sin_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cos_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSBBTotalShower */
static void G__setup_memvarSBSBBTotalShower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower));
   { SBSBBTotalShower *p; p=(SBSBBTotalShower*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"kMaxNClust=16LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),-1,-1,2,"fShower=",0,"Shower subdetector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower),-1,-1,2,"fPreShower=",0,"Preshower subdetector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxDx=",0,"Maximum dx between shower and preshower centers");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxDy=",0,"Maximum dx between shower and preshower centers");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclust=",0,"Number of clusters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fE=",0,"[fNClust] Total shower energy");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX=",0,"[fNClust] Total shower X");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY=",0,"[fNClust] Total shower Y");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fID=",0,"[fNClust] ID of Presh and Shower coincidence");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSScintPMT */
static void G__setup_memvarSBSScintPMT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT));
   { SBSScintPMT *p; p=(SBSScintPMT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fGain=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTDCRes=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTimeWalkPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTimeWalkExp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_TRef),-1,-1,2,"fScBar=",0,"to the original bar");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBarNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSide=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRawLowLim=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRawUpLim=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRawWrapAround=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSScintHit */
static void G__setup_memvarSBSScintHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit));
   { SBSScintHit *p; p=(SBSScintHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_TRef),-1,-1,4,"fScBar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPlaneNum=",0,"this or first plane number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBarNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBarNum_nd=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHitXPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHitYPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHitZPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHitTOF=",0,"time of hit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTdiff=",0,"left-to-right PMT time difference");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHitEdep=",0,"total energy deposited");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOrder=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusterNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSScintBar */
static void G__setup_memvarSBSScintBar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar));
   { SBSScintBar *p; p=(SBSScintBar*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSScintBarcLcLEBarType),-1,-2,1,G__FastAllocString(2048).Format("kSpecial=%lldLL",(long long)SBSScintBar::kSpecial).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSScintBarcLcLEBarType),-1,-2,1,G__FastAllocString(2048).Format("kUVA=%lldLL",(long long)SBSScintBar::kUVA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSScintBarcLcLEBarType),-1,-2,1,G__FastAllocString(2048).Format("kGlasgow=%lldLL",(long long)SBSScintBar::kGlasgow).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSScintBarcLcLEBarType),-1,-2,1,G__FastAllocString(2048).Format("kCMU=%lldLL",(long long)SBSScintBar::kCMU).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT),-1,-1,2,"fLPMT=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT),-1,-1,2,"fRPMT=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXPosPlane=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYPosPlane=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZPosPlane=",0,"middle of the bar, relative to the center of the plane it belongs too");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXWidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYWidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZWidth=",0,"full width (from end to end)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fc=",0,"effective speed of light  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fatt=",0,"attenuation");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSScintBarcLcLEBarType),-1,-1,2,"fBarType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBarNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBarNum_nd=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSAdcHit */
static void G__setup_memvarSBSAdcHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit));
   { SBSAdcHit *p; p=(SBSAdcHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_TRef),-1,-1,2,"fPMT=",0,"reference to \"real\" PMT, kept in detector arrays");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRawAmpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAmplPedCor=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBarNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSide=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSTdcHit */
static void G__setup_memvarSBSTdcHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit));
   { SBSTdcHit *p; p=(SBSTdcHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_TRef),-1,-1,2,"fPMT=",0,"reference to \"real\" PMT, kept in detector arrays");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRawTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBarNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSide=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSScintPartialHit */
static void G__setup_memvarSBSScintPartialHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit));
   { SBSScintPartialHit *p; p=(SBSScintPartialHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_TRef),-1,-1,2,"fScBar=",0,"reference to the bar");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBarNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCaseNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLt_raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRt_raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLa=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLa_raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRa=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRa_raw=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSCDet */
static void G__setup_memvarSBSCDet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet));
   { SBSCDet *p; p=(SBSCDet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fCoarseProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFineProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fBars=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNBars=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fHits=",0,"Hits in paddles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRefHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fLaHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRaHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fLtHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRtHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fPartHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRefCh=",0,"reference channels for pipeline tdc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRefHits=",0,"Number of refch that were hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRefOkay=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLTNhit=",0,"Number of Left paddles TDC times */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRTNhit=",0,"Number of Right paddles TDC times  */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLANhit=",0,"Number of Left paddles ADC amplitudes */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRANhit=",0,"Number of Right paddles ADC amplitudes */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPaddlesHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLtIndex=",0,"![fNBars]   //   for left-tdc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRtIndex=",0,"![fNBars]   //       right-tdc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLaIndex=",0,"![fNBars]   //       left-adc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRaIndex=",0,"![fNBars]   //       right-adc");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLE=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRE=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLrawA=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRrawA=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLpedcA=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRpedcA=",0,"[fNBars]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxADCHitBar=",0,"Hit Bar number with max sqrt(RApedc*LApedc)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxEnergyHitBar=",0,"Hit Bar number with max sqrt(RE*LE)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxADCHit=",0,"max sqrt(RApedc*LApedc)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxEnergyHit=",0,"max sqrt(RE*LE)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLT=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRT=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLTcounter=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRTcounter=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"hitcounter=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Energy=",0,"[fNBars] 		");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"TDIFF=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"TOF=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"T_tot=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Yt_pos=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Ya_pos=",0,"[fNBars] 	");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Y_pred=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Y_dev=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAngle=",0,"[fNBars]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackAcceptanceDx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackAcceptanceDy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMatchRatioTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fTrackProj=",0,"projection of track onto scintillator plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventCount=",0,"how many event processed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fErrorReferenceChCount=",0,"how many event got no reference channel");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fErrorReferenceChRateWarningThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTooManyErrRefCh=",0,"flag whether there are too much error reference");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSCDetcLcLESide),-1,-2,2,"kLeft=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSCDetcLcLESide),-1,-2,2,"kRight=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSTimingHodoscope */
static void G__setup_memvarSBSTimingHodoscope(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope));
   { SBSTimingHodoscope *p; p=(SBSTimingHodoscope*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fCoarseProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFineProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fBars=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNBars=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fHits=",0,"Hits in paddles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRefHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fLaHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRaHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fLtHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRtHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fPartHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRefCh=",0,"reference channels for pipeline tdc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRefHits=",0,"Number of refch that were hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRefOkay=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLTNhit=",0,"Number of Left paddles TDC times */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRTNhit=",0,"Number of Right paddles TDC times  */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLANhit=",0,"Number of Left paddles ADC amplitudes */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRANhit=",0,"Number of Right paddles ADC amplitudes */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPaddlesHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLtIndex=",0,"![fNBars]   //   for left-tdc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRtIndex=",0,"![fNBars]   //       right-tdc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLaIndex=",0,"![fNBars]   //       left-adc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRaIndex=",0,"![fNBars]   //       right-adc");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLE=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRE=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLrawA=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRrawA=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLpedcA=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRpedcA=",0,"[fNBars]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxADCHitBar=",0,"Hit Bar number with max sqrt(RApedc*LApedc)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxEnergyHitBar=",0,"Hit Bar number with max sqrt(RE*LE)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxADCHit=",0,"max sqrt(RApedc*LApedc)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxEnergyHit=",0,"max sqrt(RE*LE)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLT=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRT=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLTcounter=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRTcounter=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"hitcounter=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Energy=",0,"[fNBars] 		");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"TDIFF=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"TOF=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"T_tot=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Yt_pos=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Ya_pos=",0,"[fNBars] 	");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Y_pred=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Y_dev=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAngle=",0,"[fNBars]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackAcceptanceDx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackAcceptanceDy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMatchRatioTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fTrackProj=",0,"projection of track onto scintillator plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventCount=",0,"how many event processed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fErrorReferenceChCount=",0,"how many event got no reference channel");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fErrorReferenceChRateWarningThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTooManyErrRefCh=",0,"flag whether there are too much error reference");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscopecLcLESide),-1,-2,2,"kLeft=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscopecLcLESide),-1,-2,2,"kRight=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSGRINCH_Hit */
static void G__setup_memvarSBSGRINCH_Hit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit));
   { SBSGRINCH_Hit *p; p=(SBSGRINCH_Hit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fI=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fJ=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVeto=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSGRINCH_Cluster */
static void G__setup_memvarSBSGRINCH_Cluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster));
   { SBSGRINCH_Cluster *p; p=(SBSGRINCH_Cluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TList),-1,-1,4,"fHitList=",0,"List of hits belonging to this cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLocalMaximumNumber=",0,"number of local maxima.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMIPflag=",0,"True if this cluster is a MIP");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFictious_Mip_Flag=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPionChi2AnalysisFlag=",0,"true if the cluster is employed in the ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fKaonChi2AnalysisFlag=",0,"true if the cluster is employed in the ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fProtonChi2AnalysisFlag=",0,"true if the cluster is employed in the ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXcenter=",0,"(Sum of x*adc)/(sum adc)  of all hits in the list");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYcenter=",0,"(Sum of y*adc)/sum(adc) of all hits in the list");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCharge=",0,"Sum of adc values of all hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTheta_photon=",0,"Theta angle in the RICH system of the photon ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhi_photon=",0,"Phi angle in the RICH system of the photon ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAngle=",0,"Calculated angle wrt particle ray (not used yet)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster),-1,-1,4,"fMIP=",0,"Pointer to MIP cluster belonging to this cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_THaTrack),-1,-1,4,"fTrack=",0,"Track associated with this cluster (only for MIPs)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"N_Photon[3]=",0,"Only for MIPs; number of clusters whose angles ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"angle[3]=",0,"only for MIPs; average of the angles of the ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"angle_corrected[3]=",0,"only for MIPs;  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"N_chi2_Photon[3]=",0,"Only for MIPS; number of photon the chi2 test");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chi2[3]=",0,"only for MIPS; chi square value calculated");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chi2_prob[3]=",0,"only for MIPs; probability of chi2.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"N_chi2_corrected_Photon[3]=",0,"Only for MIPs; number of photon ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chi2_corrected[3]=",0,"only for MIPs, chi2 values when ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chi2_corrected_prob[3]=",0,"only for MIPs, probability of ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fnoise_cut_success=",0,"only for mips. It is equal to 1 when ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"MaximumLikelihood[3]=",0,"only for MIPS; Maximum Likeliood ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"N_MaximumLikelihood_Photon[3]=",0,"Only for MIPS; number of photon the ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ResolvedN_Photon[3]=",0,"The equivalent of N_Photon when ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Resolvedangle[3]=",0,"The equivalent of angle calculated by ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Resolvedangle_corrected[3]=",0,"The equivalent of angle_corrected ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ResolvedN_chi2_Photon[3]=",0,"The equivalent of N_chi2_Photon ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Resolvedchi2[3]=",0,"The equivalent of chi2 when considering");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Resolvedchi2_prob[3]=",0,"The equivalent of chi2_prob when");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ResolvedN_chi2_corrected_Photon[3]=",0,"The equivalent of ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Resolvedchi2_corrected[3]=",0,"The equivalent of ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Resolvedchi2_corrected_prob[3]=",0,"The equivalent of ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fResolved_noise_cut_success=",0,"The equivalent of ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ResolvedMaximumLikelihood[3]=",0,"The equivalent of ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ResolvedN_MaximumLikelihood_Photon[3]=",0,"The equivalent of ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSGRINCH */
static void G__setup_memvarSBSGRINCH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH));
   { SBSGRINCH *p; p=(SBSGRINCH*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNypads=",0,"Number of pads along y (transverse)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fHits=",0,"Array of hits for each event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fClusters=",0,"Clusters of hits");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fResolvedHits=",0,"Hits of resolved clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fResolvedClusters=",0,"Resolved clusters");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster),-1,-1,2,"fMIPs=",0,"MIP clusters for each track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster),-1,-1,2,"fMIP=",0,"MIP cluster of the Golden Track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"L_RAD=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"l_quartz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"l_gap=",0,"length of radiator,quartz,proxiity gap");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"l_emission=",0,"photon emission depth in the radiator.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n_radiator=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n_quartz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n_gap=",0,"the refraction indices ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n_quartz_min=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n_quartz_max=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n_radiator_min=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n_radiator_max=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fiducial_zone_range=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cluster_distribution_sigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"PAD_SIZE_X=",0,"dimension of a pad (mm). ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"PAD_SIZE_Y=",0,"dimension of a pad (mm).");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxdist2=",0,"Search radius for MIP finding");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxxMIP=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinxMIP=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxyMIP=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinyMIP=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMIP_through_interception=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxNumHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoResolve=",0,"true = resolve overlapping clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNseg=",0,"Number of x segments");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXseg=",0,"Array of x segmentation boudaries and offsets");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackX=",0,"x pos of Golden Track in RICH plane");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackY=",0,"y pos of Golden Track in RICH plane");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoBench=",0,"Collect detailed timing statistics");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_THaBenchmark),-1,-1,2,"fBench=",0,"Counters for timing statistics");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"minimum_chi2_degree_of_freedom=",0,"minum number of degree of freedom");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"clear_noise_trial_maximum_number=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"acceptable_chi2_prob=",0,"the probability a reduced chi2 is ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"epsilon=",0,"epsilon parameter in the Maximum Likeood Algorithm ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSScintPlane */
static void G__setup_memvarSBSScintPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane));
   { SBSScintPlane *p; p=(SBSScintPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fBars=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNBars=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fHits=",0,"Hits in paddles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRefHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fLaHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRaHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fLtHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRtHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fPartHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClonesArray),-1,-1,2,"fRefCh=",0,"reference channels for pipeline tdc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRefHits=",0,"Number of refch that were hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRefOkay=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLTNhit=",0,"Number of Left paddles TDC times */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRTNhit=",0,"Number of Right paddles TDC times  */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLANhit=",0,"Number of Left paddles ADC amplitudes */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRANhit=",0,"Number of Right paddles ADC amplitudes */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNPaddlesHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLtIndex=",0,"![fNBars]   //   for left-tdc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRtIndex=",0,"![fNBars]   //       right-tdc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLaIndex=",0,"![fNBars]   //       left-adc");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRaIndex=",0,"![fNBars]   //       right-adc");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLE=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRE=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLrawA=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRrawA=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLpedcA=",0,"[fNBars]    ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRpedcA=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLT=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRT=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLTcounter=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRTcounter=",0,"[fNBars]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"hitcounter=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Energy=",0,"[fNBars] 		");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"TDIFF=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"TOF=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"T_tot=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Yt_pos=",0,"[fNBars] ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Ya_pos=",0,"[fNBars] 	");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Y_pred=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"Y_dev=",0,"[fNBars]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAngle=",0,"[fNBars]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_TVector3),-1,-1,2,"fXax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventCount=",0,"how many event processed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fErrorReferenceChCount=",0,"how many event got no reference channel");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fErrorReferenceChRateWarningThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTooManyErrRefCh=",0,"flag whether there are too much error reference");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlanecLcLESide),-1,-2,2,"kLeft=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlanecLcLESide),-1,-2,2,"kRight=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSECalCluster */
static void G__setup_memvarSBSECalCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster));
   { SBSECalCluster *p; p=(SBSECalCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"kBig=",0,"= 1e15;");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"x position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"y position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fE=",0,"Energy deposit in block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMult=",0,"Number of blocks in the cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMaxBlocks=",0,"Max number of blocks");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock),-1,-1,4,"fBlocks=",0,"[fNMaxBlocks] List of blocks in cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSECal */
static void G__setup_memvarSBSECal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal));
   { SBSECal *p; p=(SBSECal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fCoarseProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFineProcessed=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxNClust=",0,(char*)NULL);
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNChan=",0,"Number of channels for each module");
   G__memvar_setup((void*)0,82,2,0,-1,G__defined_typename("UShort_t"),-1,2,"fChanMap=",0,"Logical channel numbers ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclublk=",0,"Max. number of blocks composing a cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNrows=",0,"Number of rows");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNcols=",0,"Number of columns");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBlockX=",0,"[fNelem] x positions (cm) of block centers");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBlockY=",0,"[fNelem] y positions (cm) of block centers");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPed=",0,"[fNelem] Pedestals for each block");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fGain=",0,"[fNelem] Gains for each block");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"gconst=",0,"const from gain correction ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"gslope=",0,"slope for gain correction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"acc_charge=",0,"accumulated charge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEmin=",0,"Minimum energy for a cluster center");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNhits=",0,"Number of hits");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA=",0,"[fNelem] Array of ADC amplitudes of blocks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA_p=",0,"[fNelem] Array of ADC minus pedestal values of blocks");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA_c=",0,"[fNelem] Array of corrected ADC amplitudes of blocks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAsum_p=",0,"Sum of blocks ADC minus pedestal values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAsum_c=",0,"Sum of blocks corrected ADC amplitudes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclust=",0,"Number of clusters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fE=",0,"[fNClust] Energy (MeV) of clusters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX=",0,"[fNClust] x position (m) of clusters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY=",0,"[fNClust] y position (m) of clusters ");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMult=",0,"[fNClust]  Number of blocks in main cluster");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNblk=",0,"[fNclublk] Numbers of blocks composing main cluster");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEblk=",0,"[fNclublk] Energies of blocks composing main cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTRX=",0,"x position of track cross point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTRY=",0,"y position of track cross point");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fE_c=",0,"[fNClust] Corrected Energy (MeV) of clusters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock),-1,-1,2,"fBlocks=",0,"[fNelem] Array of blocks");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster),-1,-1,2,"fClusters=",0,"[fMaxNClust] ");
   G__memvar_setup((void*)0,85,3,0,G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock),-1,-1,2,"fBlkGrid=",0,"[fNrows]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tan_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sin_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cos_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSEArm */
static void G__setup_memvarSBSEArm(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm));
   { SBSEArm *p; p=(SBSEArm*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSCalorimeterBlockData */
static void G__setup_memvarSBSCalorimeterBlockData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockData));
   {
   }
   G__tag_memvar_reset();
}


   /* SBSCalorimeterBlock */
static void G__setup_memvarSBSCalorimeterBlock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock));
   { SBSCalorimeterBlock *p; p=(SBSCalorimeterBlock*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX=",0,"/< relative x position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY=",0,"/< relative y position of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ=",0,"/< relative z position of the center");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRow=",0,"/< Row of the block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCol=",0,"/< Column of the block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLayer=",0,"/< Layer of the block");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStat=",0,"/< Status: 0: not seen, 1: seen, 2: local max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSCalorimeterBlockTDC */
static void G__setup_memvarSBSCalorimeterBlockTDC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC));
   { SBSCalorimeterBlockTDC *p; p=(SBSCalorimeterBlockTDC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSCalorimeterBlockSamples */
static void G__setup_memvarSBSCalorimeterBlockSamples(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples));
   { SBSCalorimeterBlockSamples *p; p=(SBSCalorimeterBlockSamples*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSCalorimeterBlockSamplesTDC */
static void G__setup_memvarSBSCalorimeterBlockSamplesTDC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC));
   { SBSCalorimeterBlockSamplesTDC *p; p=(SBSCalorimeterBlockSamplesTDC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSCalorimeter */
static void G__setup_memvarSBSCalorimeter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter));
   { SBSCalorimeter *p; p=(SBSCalorimeter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNclublk=",0,"/< Max number of blocks composing a cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNrows=",0,"/< Number of rows");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNcols=",0,"/< Number of columns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNlayers=",0,"/< Number of layers (in z-direction)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fWithTDC=",0,"/< Does this calorimeter have TDC readout?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fWithADCSamples=",0,"/< Does this calorimeter have multi-valued ADC readout?");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fChanMapStart=",0,"/< Starting number for block number (i.e. 0 or 1)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<UShort_t> >"),-1,2,"fChanMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimetercLcLOutputData),-1,-1,2,"fDataOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgR),G__defined_typename("vector<SBSCalorimeterBlock*>"),-1,2,"fBlocks=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNhits=",0,"/< Number of hits in event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SBSHCal */
static void G__setup_memvarSBSHCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal));
   { SBSHCal *p; p=(SBSHCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Decoder::SBSDecodeF1TDCModule */
static void G__setup_memvarDecodercLcLSBSDecodeF1TDCModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule));
   { Decoder::SBSDecodeF1TDCModule *p; p=(Decoder::SBSDecodeF1TDCModule*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModulecLcLEResolution),-1,-2,1,G__FastAllocString(2048).Format("ILO=%lldLL",(long long)Decoder::SBSDecodeF1TDCModule::ILO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModulecLcLEResolution),-1,-2,1,G__FastAllocString(2048).Format("IHI=%lldLL",(long long)Decoder::SBSDecodeF1TDCModule::IHI).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fNumHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fTdcData=",0,"Raw data (either samples or pulse integrals)");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModulecLcLEResolution),-1,-1,4,"fResol=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"IsInit=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"slotmask=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"chanmask=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"datamask=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nF1=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"F1slots=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgRcLcLiterator),G__defined_typename("TypeIter_t"),-2,4,"fgThisType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sbsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarsbsDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDecoder(void) {
   /* Decoder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_Decoder));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDecodercLcLMPDModule(void) {
   /* Decoder::MPDModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule));
   G__memfunc_setup("MPDModule",839,G__sbsDict_291_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MPDModule",839,G__sbsDict_291_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - crate i - 'Int_t' 0 - slot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - adc i - 'Int_t' 0 - sample "
"i - 'Int_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "H - 'UInt_t' 10 - p", "{ return 0; };", (void*) NULL, 1);
   G__memfunc_setup("LoadSlot",802,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'Decoder::THaSlotData' - 0 - sldat H - 'UInt_t' 10 - evbuffer "
"i - 'Int_t' 0 - pos i - 'Int_t' 0 - len", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("as2i",367,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - adc i - 'Int_t' 0 - sample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("asc2i",466,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 8, 
"i - 'Int_t' 0 - adc i - 'Int_t' 0 - sample "
"i - 'Int_t' 0 - chan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_291_0_10, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Decoder::MPDModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_291_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Decoder::MPDModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_291_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Decoder::MPDModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_291_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Decoder::MPDModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_291_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_291_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Decoder::MPDModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_291_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Decoder::MPDModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_291_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Decoder::MPDModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_291_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Decoder::MPDModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MPDModule", 839, G__sbsDict_291_0_22, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule), -1, 0, 1, 1, 1, 0, "u 'Decoder::MPDModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MPDModule", 965, G__sbsDict_291_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_291_0_24, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLMPDModule), -1, 1, 1, 1, 1, 0, "u 'Decoder::MPDModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSBigBite(void) {
   /* SBSBigBite */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite));
   G__memfunc_setup("SBSBigBite",894,G__sbsDict_610_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSBigBite), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - description", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindVertices",1222,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TrackCalc",872,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_610_0_4, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSBigBite::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_610_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBigBite::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_610_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSBigBite::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_610_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSBigBite::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_610_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_610_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBigBite::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_610_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBigBite::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_610_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBigBite::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_610_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBigBite::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSBigBite", 1020, G__sbsDict_610_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSGEMPlane(void) {
   /* SBSGEMPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane));
   G__memfunc_setup("SBSGEMPlane",945,G__sbsDict_613_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSGEMPlane), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaDetectorBase' - 0 '0' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TDatime' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i 'THaAnalysisObject::EMode' - 0 - mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_613_0_9, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSGEMPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_613_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGEMPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_613_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSGEMPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_613_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSGEMPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_613_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_613_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGEMPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_613_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGEMPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_613_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGEMPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_613_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGEMPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSGEMPlane", 1071, G__sbsDict_613_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSGEMStand(void) {
   /* SBSGEMStand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand));
   G__memfunc_setup("SBSGEMStand",955,G__sbsDict_615_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSGEMStand), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 '0' app", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseTrack",1106,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineTrack",887,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDebug",787,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_615_0_13, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSGEMStand::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_615_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGEMStand::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_615_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSGEMStand::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_615_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSGEMStand::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_615_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_615_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGEMStand::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_615_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGEMStand::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_615_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGEMStand::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_615_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGEMStand::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSGEMStand", 1081, G__sbsDict_615_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSShowerBlock(void) {
   /* SBSShowerBlock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock));
   G__memfunc_setup("SBSShowerBlock",1355,G__sbsDict_626_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSShowerBlock",1355,G__sbsDict_626_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock), -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - ped f - 'Float_t' 0 - gain "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_626_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_626_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__sbsDict_626_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPed",569,G__sbsDict_626_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGain",671,G__sbsDict_626_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__sbsDict_626_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCol",574,G__sbsDict_626_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStat",700,G__sbsDict_626_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__sbsDict_626_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__sbsDict_626_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetE",369,G__sbsDict_626_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPed",581,G__sbsDict_626_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGain",683,G__sbsDict_626_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRow",612,G__sbsDict_626_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCol",586,G__sbsDict_626_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStat",712,G__sbsDict_626_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sbsDict_626_0_19, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock), -1, 0, 1, 1, 1, 0, "U 'SBSShowerBlock' - 0 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,G__sbsDict_626_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_626_0_21, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSShowerBlock::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_626_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSShowerBlock::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_626_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSShowerBlock::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_626_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSShowerBlock::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_626_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_626_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSShowerBlock::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_626_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSShowerBlock::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_626_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSShowerBlock::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_626_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSShowerBlock::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSShowerBlock", 1355, G__sbsDict_626_0_33, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock), -1, 0, 1, 1, 1, 0, "u 'SBSShowerBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSShowerBlock", 1481, G__sbsDict_626_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_626_0_35, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock), -1, 1, 1, 1, 1, 0, "u 'SBSShowerBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSBBShowerCluster(void) {
   /* SBSBBShowerCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster));
   G__memfunc_setup("SBSBBShowerCluster",1734,G__sbsDict_627_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSBBShowerCluster",1734,G__sbsDict_627_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nmaxblk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSBBShowerCluster",1734,G__sbsDict_627_0_3, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nmaxblk U 'SBSShowerBlock' - 0 - block", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_627_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_627_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__sbsDict_627_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMult",706,G__sbsDict_627_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMaxBlocks",1266,G__sbsDict_627_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__sbsDict_627_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__sbsDict_627_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetE",369,G__sbsDict_627_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMult",718,G__sbsDict_627_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlocks",894,G__sbsDict_627_0_13, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__sbsDict_627_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBlock",756,G__sbsDict_627_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSShowerBlock' - 0 - block", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,G__sbsDict_627_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,G__sbsDict_627_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_627_0_18, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSBBShowerCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_627_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBShowerCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_627_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSBBShowerCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_627_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSBBShowerCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_627_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_627_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBShowerCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_627_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBBShowerCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_627_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBShowerCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_627_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBBShowerCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSBBShowerCluster", 1734, G__sbsDict_627_0_30, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster), -1, 0, 1, 1, 1, 0, "u 'SBSBBShowerCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSBBShowerCluster", 1860, G__sbsDict_627_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_627_0_32, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster), -1, 1, 1, 1, 1, 0, "u 'SBSBBShowerCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSBBShower(void) {
   /* SBSBBShower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower));
   G__memfunc_setup("SBSBBShower",996,G__sbsDict_628_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNclust",921,G__sbsDict_628_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNhits",806,G__sbsDict_628_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__sbsDict_628_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_628_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_628_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBlocks",972,G__sbsDict_628_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockX",867,G__sbsDict_628_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockY",868,G__sbsDict_628_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockdX",967,G__sbsDict_628_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockdY",968,G__sbsDict_628_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockdZ",969,G__sbsDict_628_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockA_c",1038,G__sbsDict_628_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRows",793,G__sbsDict_628_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNCols",767,G__sbsDict_628_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BlockColRowToNumber",1901,G__sbsDict_628_0_19, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClust",811,G__sbsDict_628_0_20, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSBBShowerCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__sbsDict_628_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSBBShowerCluster' - 0 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveCluster",1360,G__sbsDict_628_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__sbsDict_628_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SBSBBShowerCluster' - 1 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadMCHitAt",1002,G__sbsDict_628_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_628_0_29, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSBBShower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_628_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBShower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_628_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSBBShower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_628_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSBBShower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_628_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_628_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBShower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_628_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBBShower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_628_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBShower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_628_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBBShower::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSBBShower", 1122, G__sbsDict_628_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSBBTotalShower(void) {
   /* SBSBBTotalShower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower));
   G__memfunc_setup("SBSBBTotalShower",1512,G__sbsDict_629_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSBBTotalShower",1512,G__sbsDict_629_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSBBTotalShower), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - shower_name "
"C - - 10 - preshower_name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetE",357,G__sbsDict_629_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_629_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_629_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__sbsDict_629_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShower",920,G__sbsDict_629_0_10, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPreShower",1215,G__sbsDict_629_0_11, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSBBShower), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - run_time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetApparatus",1245,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'THaApparatus' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadMCHitAt",1002,G__sbsDict_629_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Setup",529,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"C - - 10 - name C - - 10 - desc "
"C - - 10 - shnam C - - 10 - psnam "
"U 'THaApparatus' - 0 - app g - - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_629_0_19, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSBBTotalShower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_629_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBTotalShower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_629_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSBBTotalShower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_629_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSBBTotalShower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_629_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_629_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBTotalShower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_629_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBBTotalShower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_629_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSBBTotalShower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_629_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSBBTotalShower::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSBBTotalShower", 1638, G__sbsDict_629_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSScintPMT(void) {
   /* SBSScintPMT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT));
   G__memfunc_setup("SBSScintPMT",986,G__sbsDict_630_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 12, 1, 1, 0, 
"d - 'Double_t' 0 '1.0' gain i - 'Int_t' 0 '0' ped "
"d - 'Double_t' 0 '1.0' res d - 'Double_t' 0 '0.0' off "
"d - 'Double_t' 0 '0.0' walk U 'SBSScintBar' - 0 '0' bar "
"i - 'Int_t' 0 '0' barnum i - 'Int_t' 0 '0' side "
"i - 'Int_t' 0 '0' lowlim i - 'Int_t' 0 '65536' uplim "
"d - 'Double_t' 0 '0' wraparound d - 'Double_t' 0 '-0.5' wexp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScintBar",1078,G__sbsDict_630_0_2, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGain",683,G__sbsDict_630_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - gain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPed",581,G__sbsDict_630_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTDCRes",817,G__sbsDict_630_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTOffset",999,G__sbsDict_630_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeWalk",1098,G__sbsDict_630_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - walk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeWExp",1087,G__sbsDict_630_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - wexp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScintBar",1090,G__sbsDict_630_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSScintBar' - 0 - bar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarNum",881,G__sbsDict_630_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - barnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSide",689,G__sbsDict_630_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawLowLim",1194,G__sbsDict_630_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - lowlim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawUpLim",1085,G__sbsDict_630_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - uplim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawWrapAround",1625,G__sbsDict_630_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - wraparound", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGain",671,G__sbsDict_630_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPed",569,G__sbsDict_630_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTDCRes",805,G__sbsDict_630_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTOffset",987,G__sbsDict_630_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeWalk",1086,G__sbsDict_630_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeWExp",1075,G__sbsDict_630_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum",869,G__sbsDict_630_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSide",677,G__sbsDict_630_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawLowLim",1182,G__sbsDict_630_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawUpLim",1073,G__sbsDict_630_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawWrapAround",1613,G__sbsDict_630_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_630_0_26, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSScintPMT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_630_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPMT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_630_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSScintPMT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_630_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSScintPMT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_630_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_630_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPMT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_630_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintPMT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_630_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPMT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_630_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintPMT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSScintPMT", 986, G__sbsDict_630_0_38, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 1, 1, 1, 0, "u 'SBSScintPMT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSScintPMT", 1112, G__sbsDict_630_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_630_0_40, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 1, 1, 1, 1, 0, "u 'SBSScintPMT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSScintHit(void) {
   /* SBSScintHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit));
   G__memfunc_setup("SBSScintHit",1038,G__sbsDict_631_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 7, 1, 1, 0, 
"U 'SBSScintBar' - 10 - bar i - 'Int_t' 0 - planenum "
"i - 'Int_t' 0 - barnum d - 'Double_t' 0 - ypos "
"d - 'Double_t' 0 - Tof d - 'Double_t' 0 - HitEnergy "
"d - 'Double_t' 0 - Tdiff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSScintHit",1038,G__sbsDict_631_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 1, 1, 1, 0, "U 'SBSScintHit' - 10 '0' pScHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSScintHit",1038,G__sbsDict_631_0_3, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 2, 1, 1, 0, 
"U 'SBSScintHit' - 10 - pScHit i - 'Int_t' 0 - clusternum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSScintHit",1038,G__sbsDict_631_0_4, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 3, 1, 1, 0, 
"U 'SBSScintHit' - 10 - pScHit i - 'Int_t' 0 - planenum "
"i - 'Int_t' 0 - barnum_nd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScintBar",1078,G__sbsDict_631_0_5, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlaneNum",1088,G__sbsDict_631_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum",869,G__sbsDict_631_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum_nd",1174,G__sbsDict_631_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitXPos",975,G__sbsDict_631_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitYPos",976,G__sbsDict_631_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitZPos",977,G__sbsDict_631_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTOF",814,G__sbsDict_631_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitEdep",963,G__sbsDict_631_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTdiff",1074,G__sbsDict_631_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOrder",796,G__sbsDict_631_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterNum",1330,G__sbsDict_631_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScintBar",1090,G__sbsDict_631_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSScintBar' - 0 - bar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlaneNum",1100,G__sbsDict_631_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - planenum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarNum",881,G__sbsDict_631_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - barnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarNum_nd",1186,G__sbsDict_631_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - barnum_nd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYHitPos",988,G__sbsDict_631_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ypos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitTOF",826,G__sbsDict_631_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitEdep",975,G__sbsDict_631_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - HitEnergy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitTdiff",1086,G__sbsDict_631_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Tdiff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitOrder",1101,G__sbsDict_631_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - order", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClusterNum",1342,G__sbsDict_631_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - clusternum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergy",883,G__sbsDict_631_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - HitEnergy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyScintHit",1217,G__sbsDict_631_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'SBSScintHit' - 10 - pScHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_631_0_32, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSScintHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_631_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_631_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSScintHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_631_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSScintHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_631_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_631_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_631_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_631_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_631_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSScintHit", 1038, G__sbsDict_631_0_44, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 1, 1, 1, 0, "u 'SBSScintHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSScintHit", 1164, G__sbsDict_631_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_631_0_46, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 1, 1, 1, 1, 0, "u 'SBSScintHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSScintBar(void) {
   /* SBSScintBar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar));
   G__memfunc_setup("SBSScintBar",1022,G__sbsDict_632_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 25, 1, 1, 0, 
"d - 'Double_t' 0 '0.' x d - 'Double_t' 0 '0.' y "
"d - 'Double_t' 0 '0.' z d - 'Double_t' 0 '1.' wx "
"d - 'Double_t' 0 '1.' wy d - 'Double_t' 0 '1.' wz "
"d - 'Double_t' 0 '3.e8' c d - 'Double_t' 0 '0.' att "
"d - 'Double_t' 0 '1.' lgain i - 'Int_t' 0 '0' lped "
"d - 'Double_t' 0 '1.' lres d - 'Double_t' 0 '0.' loff "
"d - 'Double_t' 0 '0.' lwalk d - 'Double_t' 0 '1.' rgain "
"i - 'Int_t' 0 '0' rped d - 'Double_t' 0 '1.' rres "
"d - 'Double_t' 0 '0.' roff d - 'Double_t' 0 '0.' rwalk "
"i - 'Int_t' 0 '0' barnum i - 'Int_t' 0 '0' llowlim "
"i - 'Int_t' 0 '65535' luplim d - 'Double_t' 0 '0.' lwrapa "
"i - 'Int_t' 0 '0' rlowlim i - 'Int_t' 0 '65535' ruplim "
"d - 'Double_t' 0 '0.' rwrapa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXPos",694,G__sbsDict_632_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYPos",695,G__sbsDict_632_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZPos",696,G__sbsDict_632_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXWidth",900,G__sbsDict_632_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYWidth",901,G__sbsDict_632_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZWidth",902,G__sbsDict_632_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetC",367,G__sbsDict_632_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAtt",597,G__sbsDict_632_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarType",995,G__sbsDict_632_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i 'SBSScintBar::EBarType' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarNum",881,G__sbsDict_632_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - barnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarNum_nd",1186,G__sbsDict_632_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - barnum_nd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXPos",682,G__sbsDict_632_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYPos",683,G__sbsDict_632_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZPos",684,G__sbsDict_632_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXWidth",888,G__sbsDict_632_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYWidth",889,G__sbsDict_632_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZWidth",890,G__sbsDict_632_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetC",355,G__sbsDict_632_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAtt",585,G__sbsDict_632_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLPMT",605,G__sbsDict_632_0_21, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRPMT",611,G__sbsDict_632_0_22, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarType",983,G__sbsDict_632_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum",869,G__sbsDict_632_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum_nd",1174,G__sbsDict_632_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_632_0_26, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSScintBar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_632_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintBar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_632_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSScintBar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_632_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSScintBar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_632_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_632_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintBar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_632_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintBar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_632_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintBar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_632_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintBar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSScintBar", 1022, G__sbsDict_632_0_38, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 1, 1, 1, 0, "u 'SBSScintBar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSScintBar", 1148, G__sbsDict_632_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_632_0_40, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 1, 1, 1, 1, 0, "u 'SBSScintBar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSAdcHit(void) {
   /* SBSAdcHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit));
   G__memfunc_setup("SBSAdcHit",789,G__sbsDict_633_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 2, 1, 1, 0, 
"U 'SBSScintPMT' - 0 'NULL' pmt i - 'Int_t' 0 '0' rawampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMT",529,G__sbsDict_633_0_2, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawAmpl",980,G__sbsDict_633_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplPedCor",1255,G__sbsDict_633_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmpl",682,G__sbsDict_633_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum",869,G__sbsDict_633_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSide",677,G__sbsDict_633_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectHit",1015,G__sbsDict_633_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawAmpl",992,G__sbsDict_633_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - rawampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarNum",881,G__sbsDict_633_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - barnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSide",689,G__sbsDict_633_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_633_0_15, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSAdcHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_633_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSAdcHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_633_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSAdcHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_633_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSAdcHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_633_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_633_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSAdcHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_633_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSAdcHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_633_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSAdcHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_633_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSAdcHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSAdcHit", 789, G__sbsDict_633_0_27, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 1, 1, 1, 0, "u 'SBSAdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSAdcHit", 915, G__sbsDict_633_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_633_0_29, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 1, 1, 1, 1, 0, "u 'SBSAdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSTdcHit(void) {
   /* SBSTdcHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit));
   G__memfunc_setup("SBSTdcHit",808,G__sbsDict_634_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 3, 1, 1, 0, 
"U 'SBSScintPMT' - 10 'NULL' pmt i - 'Int_t' 0 '0' rawtime "
"d - 'Double_t' 0 '0' ext_offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMT",529,G__sbsDict_634_0_2, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawTime",985,G__sbsDict_634_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__sbsDict_634_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum",869,G__sbsDict_634_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSide",677,G__sbsDict_634_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateTime",1010,G__sbsDict_634_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.' ext_offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawTime",997,G__sbsDict_634_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - rawtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_634_0_12, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSTdcHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_634_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSTdcHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_634_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSTdcHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_634_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSTdcHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_634_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_634_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSTdcHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_634_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSTdcHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_634_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSTdcHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_634_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSTdcHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSTdcHit", 808, G__sbsDict_634_0_24, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 0, "u 'SBSTdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSTdcHit", 934, G__sbsDict_634_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_634_0_26, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 1, 1, 1, 1, 0, "u 'SBSTdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSScintPartialHit(void) {
   /* SBSScintPartialHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit));
   G__memfunc_setup("SBSScintPartialHit",1755,G__sbsDict_635_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit), -1, 0, 11, 1, 1, 0, 
"U 'SBSScintBar' - 0 'NULL' bar i - 'Int_t' 0 '-7' barnum "
"i - 'Int_t' 0 '0' CaseNum d - 'Double_t' 0 '0.0' lt "
"d - 'Double_t' 0 '0.0' lt_raw d - 'Double_t' 0 '0.0' rt "
"d - 'Double_t' 0 '0.0' rt_raw d - 'Double_t' 0 '0.0' la "
"d - 'Double_t' 0 '0.0' la_raw d - 'Double_t' 0 '0.0' ra "
"d - 'Double_t' 0 '0.0' ra_raw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScintBar",1078,G__sbsDict_635_0_2, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarNum",869,G__sbsDict_635_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaseNum",972,G__sbsDict_635_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLt",480,G__sbsDict_635_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRt",486,G__sbsDict_635_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLa",461,G__sbsDict_635_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRa",467,G__sbsDict_635_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLt_raw",905,G__sbsDict_635_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRt_raw",911,G__sbsDict_635_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLa_raw",886,G__sbsDict_635_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRa_raw",892,G__sbsDict_635_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScintBar",1090,G__sbsDict_635_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSScintBar' - 0 - bar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBarNum",881,G__sbsDict_635_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - barnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaseNum",984,G__sbsDict_635_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLt",492,G__sbsDict_635_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRt",498,G__sbsDict_635_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLa",473,G__sbsDict_635_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRa",479,G__sbsDict_635_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLt_raw",917,G__sbsDict_635_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRt_raw",923,G__sbsDict_635_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLa_raw",898,G__sbsDict_635_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRa_raw",904,G__sbsDict_635_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_635_0_24, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSScintPartialHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_635_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPartialHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_635_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSScintPartialHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_635_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSScintPartialHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_635_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_635_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPartialHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_635_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintPartialHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_635_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPartialHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_635_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintPartialHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSScintPartialHit", 1755, G__sbsDict_635_0_36, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit), -1, 0, 1, 1, 1, 0, "u 'SBSScintPartialHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSScintPartialHit", 1881, G__sbsDict_635_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_635_0_38, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit), -1, 1, 1, 1, 1, 0, "u 'SBSScintPartialHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSCDet(void) {
   /* SBSCDet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCDet));
   G__memfunc_setup("SBSCDet",584,G__sbsDict_637_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCDet), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - description "
"U 'THaApparatus' - 0 '0' apparatus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSCDet",584,G__sbsDict_637_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCDet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitOutput",1061,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaOutput' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadNumberSignStartComment",2647,G__sbsDict_637_0_7, 67, -1, -1, 0, 3, 1, 1, 0, 
"E - - 0 - fp C - - 0 - buf "
"i - - 10 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildAllBars",1169,G__sbsDict_637_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - trks", "original, partial hits etc.", (void*) NULL, 0);
   G__memfunc_setup("BuildCompleteBars",1713,G__sbsDict_637_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - trks", "only complete hits", (void*) NULL, 0);
   G__memfunc_setup("GetNBars",758,G__sbsDict_637_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__sbsDict_637_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRefHits",1059,G__sbsDict_637_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLtHits",966,G__sbsDict_637_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRtHits",972,G__sbsDict_637_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLaHits",947,G__sbsDict_637_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRaHits",953,G__sbsDict_637_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPartHits",1181,G__sbsDict_637_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBars",680,G__sbsDict_637_0_18, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBar",565,G__sbsDict_637_0_19, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__sbsDict_637_0_20, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__sbsDict_637_0_21, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefHits",981,G__sbsDict_637_0_22, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefHit",866,G__sbsDict_637_0_23, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLtHits",888,G__sbsDict_637_0_24, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLtHit",773,G__sbsDict_637_0_25, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtHits",894,G__sbsDict_637_0_26, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtHit",779,G__sbsDict_637_0_27, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLaHits",869,G__sbsDict_637_0_28, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLaHit",754,G__sbsDict_637_0_29, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaHits",875,G__sbsDict_637_0_30, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaHit",760,G__sbsDict_637_0_31, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarHitT",942,G__sbsDict_637_0_32, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 3, 1, 1, 9, 
"c - - 10 - side U 'SBSScintBar' - 50 - ptr "
"i - - 10 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarHitA",923,G__sbsDict_637_0_33, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 3, 1, 1, 9, 
"c - - 10 - side U 'SBSScintBar' - 50 - ptr "
"i - - 10 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRefCh",822,G__sbsDict_637_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefCh",744,G__sbsDict_637_0_35, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefCh",744,G__sbsDict_637_0_36, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AreRefChOkay",1140,G__sbsDict_637_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartHits",1103,G__sbsDict_637_0_38, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartHit",988,G__sbsDict_637_0_39, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatchRatioTrack",1793,G__sbsDict_637_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineMatchingHits",1605,G__sbsDict_637_0_41, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaxADCHitBar",1352,G__sbsDict_637_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RApedc*LApedc)", (void*) NULL, 0);
   G__memfunc_setup("GetMaxEnergyHitBar",1770,G__sbsDict_637_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RE*LE)", (void*) NULL, 0);
   G__memfunc_setup("GetMaxADCHit",1075,G__sbsDict_637_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RApedc*LApedc)", (void*) NULL, 0);
   G__memfunc_setup("GetMaxEnergyHit",1493,G__sbsDict_637_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RE*LE)", (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"E - - 0 - file u 'TString' - 10 - tag "
"D - 'Double_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTable",776,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 2, 0, 
"E - - 0 - file u 'TString' - 10 - tag "
"D - 'Double_t' 0 - value i - 'Int_t' 10 - maxval "
"I - - 0 - first I - - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TimeWalkCorrection",1846,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"U 'SBSScintPMT' - 0 - pmt d - 'Double_t' 0 - ADC "
"d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__sbsDictLN_SBSCDet), -1, 1, 1, 1, 2, 0, "u 'SBSCDet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_637_0_54, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSCDet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_637_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCDet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_637_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSCDet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_637_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSCDet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_637_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_637_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCDet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_637_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCDet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_637_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCDet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_637_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCDet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSCDet", 710, G__sbsDict_637_0_66, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSTimingHodoscope(void) {
   /* SBSTimingHodoscope */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope));
   G__memfunc_setup("SBSTimingHodoscope",1780,G__sbsDict_641_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - description "
"U 'THaApparatus' - 0 '0' apparatus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSTimingHodoscope",1780,G__sbsDict_641_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitOutput",1061,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaOutput' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadNumberSignStartComment",2647,G__sbsDict_641_0_7, 67, -1, -1, 0, 3, 1, 1, 0, 
"E - - 0 - fp C - - 0 - buf "
"i - - 10 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildAllBars",1169,G__sbsDict_641_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - trks", "original, partial hits etc.", (void*) NULL, 0);
   G__memfunc_setup("BuildCompleteBars",1713,G__sbsDict_641_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - trks", "only complete hits", (void*) NULL, 0);
   G__memfunc_setup("GetNBars",758,G__sbsDict_641_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__sbsDict_641_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRefHits",1059,G__sbsDict_641_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLtHits",966,G__sbsDict_641_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRtHits",972,G__sbsDict_641_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLaHits",947,G__sbsDict_641_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRaHits",953,G__sbsDict_641_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPartHits",1181,G__sbsDict_641_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBars",680,G__sbsDict_641_0_18, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBar",565,G__sbsDict_641_0_19, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__sbsDict_641_0_20, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__sbsDict_641_0_21, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefHits",981,G__sbsDict_641_0_22, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefHit",866,G__sbsDict_641_0_23, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLtHits",888,G__sbsDict_641_0_24, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLtHit",773,G__sbsDict_641_0_25, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtHits",894,G__sbsDict_641_0_26, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtHit",779,G__sbsDict_641_0_27, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLaHits",869,G__sbsDict_641_0_28, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLaHit",754,G__sbsDict_641_0_29, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaHits",875,G__sbsDict_641_0_30, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaHit",760,G__sbsDict_641_0_31, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarHitT",942,G__sbsDict_641_0_32, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 3, 1, 1, 9, 
"c - - 10 - side U 'SBSScintBar' - 50 - ptr "
"i - - 10 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarHitA",923,G__sbsDict_641_0_33, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 3, 1, 1, 9, 
"c - - 10 - side U 'SBSScintBar' - 50 - ptr "
"i - - 10 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRefCh",822,G__sbsDict_641_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefCh",744,G__sbsDict_641_0_35, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefCh",744,G__sbsDict_641_0_36, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AreRefChOkay",1140,G__sbsDict_641_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartHits",1103,G__sbsDict_641_0_38, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartHit",988,G__sbsDict_641_0_39, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatchRatioTrack",1793,G__sbsDict_641_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineMatchingHits",1605,G__sbsDict_641_0_41, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaxADCHitBar",1352,G__sbsDict_641_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RApedc*LApedc)", (void*) NULL, 0);
   G__memfunc_setup("GetMaxEnergyHitBar",1770,G__sbsDict_641_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RE*LE)", (void*) NULL, 0);
   G__memfunc_setup("GetMaxADCHit",1075,G__sbsDict_641_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RApedc*LApedc)", (void*) NULL, 0);
   G__memfunc_setup("GetMaxEnergyHit",1493,G__sbsDict_641_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Hit Bar number with max sqrt(RE*LE)", (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"E - - 0 - file u 'TString' - 10 - tag "
"D - 'Double_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTable",776,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 2, 0, 
"E - - 0 - file u 'TString' - 10 - tag "
"D - 'Double_t' 0 - value i - 'Int_t' 10 - maxval "
"I - - 0 - first I - - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TimeWalkCorrection",1846,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"U 'SBSScintPMT' - 0 - pmt d - 'Double_t' 0 - ADC "
"d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__sbsDictLN_SBSTimingHodoscope), -1, 1, 1, 1, 2, 0, "u 'SBSTimingHodoscope' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_641_0_54, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSTimingHodoscope::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_641_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSTimingHodoscope::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_641_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSTimingHodoscope::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_641_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSTimingHodoscope::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_641_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_641_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSTimingHodoscope::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_641_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSTimingHodoscope::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_641_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSTimingHodoscope::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_641_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSTimingHodoscope::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSTimingHodoscope", 1906, G__sbsDict_641_0_66, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSGRINCH_Hit(void) {
   /* SBSGRINCH_Hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit));
   G__memfunc_setup("SBSGRINCH_Hit",1063,G__sbsDict_646_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSGRINCH_Hit",1063,G__sbsDict_646_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit), -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - number i - 'Int_t' 0 - ADC "
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j "
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__sbsDict_646_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - fout1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__sbsDict_646_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"E - - 0 - fout1 E - - 0 - fout2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__sbsDict_646_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_646_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_646_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetI",361,G__sbsDict_646_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJ",362,G__sbsDict_646_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADC",488,G__sbsDict_646_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlag",666,G__sbsDict_646_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVeto",702,G__sbsDict_646_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumber",917,G__sbsDict_646_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__sbsDict_646_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__sbsDict_646_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetI",373,G__sbsDict_646_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetJ",374,G__sbsDict_646_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADC",500,G__sbsDict_646_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ADC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__sbsDict_646_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVeto",714,G__sbsDict_646_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Veto", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_646_0_23, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSGRINCH_Hit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_646_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH_Hit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_646_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSGRINCH_Hit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_646_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSGRINCH_Hit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_646_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_646_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH_Hit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_646_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGRINCH_Hit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_646_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH_Hit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_646_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGRINCH_Hit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSGRINCH_Hit", 1063, G__sbsDict_646_0_35, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit), -1, 0, 1, 1, 1, 0, "u 'SBSGRINCH_Hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSGRINCH_Hit", 1189, G__sbsDict_646_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_646_0_37, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit), -1, 1, 1, 1, 1, 0, "u 'SBSGRINCH_Hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSGRINCH_Cluster(void) {
   /* SBSGRINCH_Cluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster));
   G__memfunc_setup("SBSGRINCH_Cluster",1508,G__sbsDict_647_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSGRINCH_Cluster",1508,G__sbsDict_647_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster), -1, 0, 1, 1, 1, 0, "u 'SBSGRINCH_Cluster' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__sbsDict_647_0_3, 117, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster), -1, 1, 1, 1, 1, 0, "u 'SBSGRINCH_Cluster' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dist",404,G__sbsDict_647_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'SBSGRINCH_Cluster' - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert",629,G__sbsDict_647_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSGRINCH_Hit' - 0 - theHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert",629,G__sbsDict_647_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'SBSGRINCH_Hit' - 0 - theHit f - 'Float_t' 0 - factor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert_Photon",1356,G__sbsDict_647_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - angle "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert_Photon",1356,G__sbsDict_647_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - angle "
"i - 'Int_t' 0 - ResolvedFlag f - 'Float_t' 0 - expected_angle "
"f - 'Float_t' 0 - central_momentum_expected_angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert_chi2",1082,G__sbsDict_647_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert_chi2",1082,G__sbsDict_647_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - chi2 "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert_chi2_corrected",2132,G__sbsDict_647_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - chi2 "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert_N_chi2_corrected_Photon",3032,G__sbsDict_647_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - flag i - 'Int_t' 0 - N_Photon "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert_MaximumLikelihood",2486,G__sbsDict_647_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - MaximumLikelihood "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMIP",418,G__sbsDict_647_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPionChi2AnalysisFlag",2234,G__sbsDict_647_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKaonChi2AnalysisFlag",2221,G__sbsDict_647_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProtonChi2AnalysisFlag",2470,G__sbsDict_647_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__sbsDict_647_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitList",993,G__sbsDict_647_0_20, 85, G__get_linked_tagnum(&G__sbsDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLocalMaximumNumber",2130,G__sbsDict_647_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXcenter",1017,G__sbsDict_647_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYcenter",1018,G__sbsDict_647_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__sbsDict_647_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXcenter",1029,G__sbsDict_647_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYcenter",1030,G__sbsDict_647_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCharge",886,G__sbsDict_647_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMIPflag",940,G__sbsDict_647_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPionChi2AnalysisFlag",2246,G__sbsDict_647_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetKaonChi2AnalysisFlag",2233,G__sbsDict_647_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProtonChi2AnalysisFlag",2482,G__sbsDict_647_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setchi2_prob",1188,G__sbsDict_647_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - chi2_value "
"i - 'Int_t' 0 - N_Photon i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setchi2_corrected_prob",2238,G__sbsDict_647_0_33, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - flag f - 'Float_t' 0 - chi2_value "
"i - 'Int_t' 0 - N_Photon i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setnoise_cut_success",2125,G__sbsDict_647_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - value i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindLocalMaximumNumber",2227,G__sbsDict_647_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindResolvedClusterElements",2788,G__sbsDict_647_0_36, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'SBSGRINCH_Hit' - 10 - localMaximum U 'SBSGRINCH_Cluster' - 0 - resolvedCluster "
"U 'TClonesArray' - 0 - resolvedHits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta_photon",1549,G__sbsDict_647_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi_photon",1336,G__sbsDict_647_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__sbsDict_647_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__sbsDict_647_0_40, 85, G__get_linked_tagnum(&G__sbsDictLN_THaTrack), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeMIP",612,G__sbsDict_647_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMIP",530,G__sbsDict_647_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSGRINCH_Cluster' - 0 - mip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFictious_MIP_Flag",1936,G__sbsDict_647_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTheta_photon",1561,G__sbsDict_647_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Theta_photon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhi_photon",1348,G__sbsDict_647_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Phi_photon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAngle",787,G__sbsDict_647_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrack",801,G__sbsDict_647_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "U 'THaTrack' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN_Photon",1105,G__sbsDict_647_0_48, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - Value "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setangle",819,G__sbsDict_647_0_49, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - Value "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setangle_corrected",1869,G__sbsDict_647_0_50, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - Value "
"i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN_Photon",1093,G__sbsDict_647_0_51, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle",807,G__sbsDict_647_0_52, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle_corrected",1857,G__sbsDict_647_0_53, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNphot_pi",1121,G__sbsDict_647_0_54, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNphot_k",1011,G__sbsDict_647_0_55, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNphot_p",1016,G__sbsDict_647_0_56, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle_pi",1119,G__sbsDict_647_0_57, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle_k",1009,G__sbsDict_647_0_58, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle_p",1014,G__sbsDict_647_0_59, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle_corrected_pi",2169,G__sbsDict_647_0_60, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle_corrected_k",2059,G__sbsDict_647_0_61, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getangle_corrected_p",2064,G__sbsDict_647_0_62, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN_chi2_phot_pi",1669,G__sbsDict_647_0_63, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN_chi2_phot_k",1559,G__sbsDict_647_0_64, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN_chi2_phot_p",1564,G__sbsDict_647_0_65, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_pi",958,G__sbsDict_647_0_66, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "only for single clysters", (void*) NULL, 0);
   G__memfunc_setup("Getchi2_k",848,G__sbsDict_647_0_67, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "only for single clysters", (void*) NULL, 0);
   G__memfunc_setup("Getchi2_p",853,G__sbsDict_647_0_68, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "only for single clysters", (void*) NULL, 0);
   G__memfunc_setup("Getchi2_pi",958,G__sbsDict_647_0_69, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_k",848,G__sbsDict_647_0_70, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_p",853,G__sbsDict_647_0_71, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_prob_pi",1488,G__sbsDict_647_0_72, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_prob_k",1378,G__sbsDict_647_0_73, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_prob_p",1383,G__sbsDict_647_0_74, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_prob",1176,G__sbsDict_647_0_75, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - flag i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN_chi2_corrected_phot_pi",2719,G__sbsDict_647_0_76, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN_chi2_corrected_phot_k",2609,G__sbsDict_647_0_77, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN_chi2_corrected_phot_p",2614,G__sbsDict_647_0_78, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_corrected_pi",2008,G__sbsDict_647_0_79, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_corrected_k",1898,G__sbsDict_647_0_80, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_corrected_p",1903,G__sbsDict_647_0_81, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_corrected_prob_pi",2538,G__sbsDict_647_0_82, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_corrected_prob_k",2428,G__sbsDict_647_0_83, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_corrected_prob_p",2433,G__sbsDict_647_0_84, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getchi2_corrected_prob",2226,G__sbsDict_647_0_85, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - flag i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getnoise_cut_success",2113,G__sbsDict_647_0_86, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getunresolved_noise_cut_success",3303,G__sbsDict_647_0_87, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getresolved_noise_cut_success",3076,G__sbsDict_647_0_88, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFictious_Mip_Flag",1988,G__sbsDict_647_0_89, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__sbsDict_647_0_90, 121, -1, -1, 0, 1, 1, 1, 8, "E - - 0 - fout1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__sbsDict_647_0_91, 121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 0 - fout1 E - - 0 - fout2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowElements",1246,G__sbsDict_647_0_92, 121, -1, -1, 0, 1, 1, 1, 8, "E - - 0 - fout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Test",416,G__sbsDict_647_0_93, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"U 'SBSGRINCH_Hit' - 10 - theHit f - 'Float_t' 0 - par1 "
"f - 'Float_t' 0 - par2 f - 'Float_t' 0 - par3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_647_0_94, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSGRINCH_Cluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_647_0_95, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH_Cluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_647_0_96, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSGRINCH_Cluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_647_0_97, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSGRINCH_Cluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_647_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_647_0_102, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH_Cluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_647_0_103, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGRINCH_Cluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_647_0_104, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH_Cluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_647_0_105, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGRINCH_Cluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSGRINCH_Cluster", 1634, G__sbsDict_647_0_106, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSGRINCH(void) {
   /* SBSGRINCH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH));
   G__memfunc_setup("SBSGRINCH",675,G__sbsDict_651_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' apparatus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBadPads",1035,G__sbsDict_651_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - infilename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadData",758,G__sbsDict_651_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "E - - 0 - infile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__sbsDict_651_0_8, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolvedHit",1417,G__sbsDict_651_0_9, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Hit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCluster",1026,G__sbsDict_651_0_10, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolvedCluster",1862,G__sbsDict_651_0_11, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSGRINCH_Cluster), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHits",1000,G__sbsDict_651_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumClusters",1445,G__sbsDict_651_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumResolvedHits",1836,G__sbsDict_651_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumResolvedClusters",2281,G__sbsDict_651_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxNumHits",1294,G__sbsDict_651_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxNumHits",1306,G__sbsDict_651_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - MaxNumHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMIPArea",907,G__sbsDict_651_0_18, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - xmin d - 'Double_t' 0 - xmax "
"d - 'Double_t' 0 - ymin d - 'Double_t' 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableClusterResolving",2274,G__sbsDict_651_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableBenchmarks",1605,G__sbsDict_651_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintBenchmarks",1547,G__sbsDict_651_0_21, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Padn2xy",678,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteClusters",1448,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindClusters",1238,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResolveClusters",1589,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindMIP",615,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TClonesArray' - 11 - tracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get_phi_photon",1463,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 8, 
"d - 'Double_t' 0 - x_photon d - 'Double_t' 0 - y_photon "
"d - 'Double_t' 0 - x_mip d - 'Double_t' 0 - y_mip "
"d - 'Double_t' 0 - theta_mip d - 'Double_t' 0 - phi_mip "
"i - 'Int_t' 0 - Calculation_kind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get_a",480,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 8, 
"d - 'Double_t' 0 - theta_mip i - 'Int_t' 0 - Calculation_Kind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get_b",481,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 8, 
"d - 'Double_t' 0 - x_photon d - 'Double_t' 0 - y_photon "
"d - 'Double_t' 0 - x_mip d - 'Double_t' 0 - y_mip "
"d - 'Double_t' 0 - theta_mip d - 'Double_t' 0 - phi_mip "
"i - 'Int_t' 0 - Calculation_kind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get_theta_photon",1676,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 8, 
"d - 'Double_t' 0 - x_photon d - 'Double_t' 0 - y_photon "
"d - 'Double_t' 0 - x_mip d - 'Double_t' 0 - y_mip "
"d - 'Double_t' 0 - theta_mip d - 'Double_t' 0 - phi_mip "
"i - 'Int_t' 0 - Calculation_kind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecoAng",671,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 9, 1, 2, 8, 
"d - 'Double_t' 0 - x_photon d - 'Double_t' 0 - y_photon "
"d - 'Double_t' 1 - theta_photon d - 'Double_t' 1 - phi_photon "
"d - 'Double_t' 0 - x_mip d - 'Double_t' 0 - y_mip "
"d - 'Double_t' 0 - theta_mip d - 'Double_t' 0 - phi_mip "
"i - 'Int_t' 0 - Calculation_kind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cherenkov_Angle",1515,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 8, 
"d - - 0 - mass d - - 0 - momentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearNoise",997,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - igold i - 'Int_t' 0 - ResolvedFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_651_0_36, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSGRINCH::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_651_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_651_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSGRINCH::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_651_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSGRINCH::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_651_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_651_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_651_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGRINCH::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_651_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSGRINCH::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_651_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSGRINCH::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSGRINCH", 801, G__sbsDict_651_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSScintPlane(void) {
   /* SBSScintPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane));
   G__memfunc_setup("SBSScintPlane",1241,G__sbsDict_652_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - description "
"U 'THaDetectorBase' - 0 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSScintPlane",1241,G__sbsDict_652_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitOutput",1061,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaOutput' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__sbsDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - run_time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,G__sbsDict_652_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,G__sbsDict_652_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsTracking",1007,G__sbsDict_652_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPid",473,G__sbsDict_652_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadNumberSignStartComment",2647,G__sbsDict_652_0_10, 67, -1, -1, 0, 3, 1, 1, 0, 
"E - - 0 - fp C - - 0 - buf "
"i - - 10 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildAllBars",1169,G__sbsDict_652_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - trks", "original, partial hits etc.", (void*) NULL, 0);
   G__memfunc_setup("BuildCompleteBars",1713,G__sbsDict_652_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - trks", "only complete hits", (void*) NULL, 0);
   G__memfunc_setup("GetNBars",758,G__sbsDict_652_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__sbsDict_652_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRefHits",1059,G__sbsDict_652_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLtHits",966,G__sbsDict_652_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRtHits",972,G__sbsDict_652_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLaHits",947,G__sbsDict_652_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRaHits",953,G__sbsDict_652_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPartHits",1181,G__sbsDict_652_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBars",680,G__sbsDict_652_0_21, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBar",565,G__sbsDict_652_0_22, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintBar), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__sbsDict_652_0_23, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__sbsDict_652_0_24, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefHits",981,G__sbsDict_652_0_25, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefHit",866,G__sbsDict_652_0_26, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLtHits",888,G__sbsDict_652_0_27, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLtHit",773,G__sbsDict_652_0_28, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtHits",894,G__sbsDict_652_0_29, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtHit",779,G__sbsDict_652_0_30, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLaHits",869,G__sbsDict_652_0_31, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLaHit",754,G__sbsDict_652_0_32, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaHits",875,G__sbsDict_652_0_33, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaHit",760,G__sbsDict_652_0_34, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarHitT",942,G__sbsDict_652_0_35, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSTdcHit), -1, 0, 3, 1, 1, 9, 
"c - - 10 - side U 'SBSScintBar' - 50 - ptr "
"i - - 10 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBarHitA",923,G__sbsDict_652_0_36, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSAdcHit), -1, 0, 3, 1, 1, 9, 
"c - - 10 - side U 'SBSScintBar' - 50 - ptr "
"i - - 10 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRefCh",822,G__sbsDict_652_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefCh",744,G__sbsDict_652_0_38, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefCh",744,G__sbsDict_652_0_39, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPMT), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AreRefChOkay",1140,G__sbsDict_652_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartHits",1103,G__sbsDict_652_0_41, 85, G__get_linked_tagnum(&G__sbsDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartHit",988,G__sbsDict_652_0_42, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPartialHit), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"E - - 0 - file u 'TString' - 10 - tag "
"D - 'Double_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTable",776,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 2, 0, 
"E - - 0 - file u 'TString' - 10 - tag "
"D - 'Double_t' 0 - value i - 'Int_t' 10 - maxval "
"I - - 0 - first I - - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TimeWalkCorrection",1846,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"U 'SBSScintPMT' - 0 - pmt d - 'Double_t' 0 - ADC "
"d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__sbsDictLN_SBSScintPlane), -1, 1, 1, 1, 2, 0, "u 'SBSScintPlane' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_652_0_51, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSScintPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_652_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_652_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSScintPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_652_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSScintPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_652_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_652_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_652_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_652_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSScintPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_652_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSScintPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSScintPlane", 1367, G__sbsDict_652_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSECalCluster(void) {
   /* SBSECalCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster));
   G__memfunc_setup("SBSECalCluster",1311,G__sbsDict_654_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSECalCluster",1311,G__sbsDict_654_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nmaxblk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSECalCluster",1311,G__sbsDict_654_0_3, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nmaxblk U 'SBSShowerBlock' - 0 - block", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_654_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_654_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__sbsDict_654_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMult",706,G__sbsDict_654_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMaxBlocks",1266,G__sbsDict_654_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__sbsDict_654_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__sbsDict_654_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetE",369,G__sbsDict_654_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMult",718,G__sbsDict_654_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlocks",894,G__sbsDict_654_0_13, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSShowerBlock), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__sbsDict_654_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBlock",756,G__sbsDict_654_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSShowerBlock' - 0 - block", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,G__sbsDict_654_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,G__sbsDict_654_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_654_0_18, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSECalCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_654_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSECalCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_654_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSECalCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_654_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSECalCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_654_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_654_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSECalCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_654_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSECalCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_654_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSECalCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_654_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSECalCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSECalCluster", 1311, G__sbsDict_654_0_30, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster), -1, 0, 1, 1, 1, 0, "u 'SBSECalCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSECalCluster", 1437, G__sbsDict_654_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_654_0_32, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster), -1, 1, 1, 1, 1, 0, "u 'SBSECalCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSECal(void) {
   /* SBSECal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSECal));
   G__memfunc_setup("SBSECal",573,G__sbsDict_655_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSECal), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNclust",921,G__sbsDict_655_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNhits",806,G__sbsDict_655_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__sbsDict_655_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_655_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_655_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBlocks",972,G__sbsDict_655_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockX",867,G__sbsDict_655_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockY",868,G__sbsDict_655_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockdX",967,G__sbsDict_655_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockdY",968,G__sbsDict_655_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockdZ",969,G__sbsDict_655_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlockA_c",1038,G__sbsDict_655_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRows",793,G__sbsDict_655_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNCols",767,G__sbsDict_655_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BlockColRowToNumber",1901,G__sbsDict_655_0_19, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClust",811,G__sbsDict_655_0_20, 85, G__get_linked_tagnum(&G__sbsDictLN_SBSECalCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__sbsDict_655_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SBSECalCluster' - 0 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveCluster",1360,G__sbsDict_655_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__sbsDict_655_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SBSECalCluster' - 1 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadMCHitAt",1002,G__sbsDict_655_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_655_0_29, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSECal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_655_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSECal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_655_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSECal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_655_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSECal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_655_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_655_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSECal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_655_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSECal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_655_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSECal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_655_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSECal::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSECal", 699, G__sbsDict_655_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSEArm(void) {
   /* SBSEArm */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSEArm));
   G__memfunc_setup("SBSEArm",589,G__sbsDict_656_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSEArm), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - description", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindVertices",1222,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TrackCalc",872,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_656_0_4, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSEArm::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_656_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSEArm::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_656_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSEArm::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_656_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSEArm::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_656_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_656_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSEArm::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_656_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSEArm::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_656_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSEArm::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_656_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSEArm::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSEArm", 715, G__sbsDict_656_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSCalorimeterBlockData(void) {
   /* SBSCalorimeterBlockData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockData));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSCalorimeterBlock(void) {
   /* SBSCalorimeterBlock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock));
   G__memfunc_setup("SBSCalorimeterBlock",1866,G__sbsDict_663_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSCalorimeterBlock",1866,G__sbsDict_663_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock), -1, 0, 8, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z i - 'Int_t' 0 - row "
"i - 'Int_t' 0 - col i - 'Int_t' 0 - layer "
"f - 'Float_t' 0 - adc_ped f - 'Float_t' 0 - adc_gain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__sbsDict_663_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__sbsDict_663_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__sbsDict_663_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__sbsDict_663_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCol",574,G__sbsDict_663_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__sbsDict_663_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStat",700,G__sbsDict_663_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__sbsDict_663_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__sbsDict_663_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__sbsDict_663_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRow",612,G__sbsDict_663_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCol",586,G__sbsDict_663_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLayer",809,G__sbsDict_663_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStat",712,G__sbsDict_663_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,G__sbsDict_663_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasData",662,G__sbsDict_663_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_663_0_19, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSCalorimeterBlock::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_663_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlock::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_663_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSCalorimeterBlock::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_663_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSCalorimeterBlock::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_663_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_663_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlock::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_663_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlock::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_663_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlock::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_663_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlock::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSCalorimeterBlock", 1866, G__sbsDict_663_0_31, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock), -1, 0, 1, 1, 1, 0, "u 'SBSCalorimeterBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSCalorimeterBlock", 1992, G__sbsDict_663_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_663_0_33, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlock), -1, 1, 1, 1, 1, 0, "u 'SBSCalorimeterBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSCalorimeterBlockTDC(void) {
   /* SBSCalorimeterBlockTDC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC));
   G__memfunc_setup("SBSCalorimeterBlockTDC",2085,G__sbsDict_664_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSCalorimeterBlockTDC",2085,G__sbsDict_664_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC), -1, 0, 10, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z i - 'Int_t' 0 - row "
"i - 'Int_t' 0 - col i - 'Int_t' 0 - layer "
"f - 'Float_t' 0 - adc_ped f - 'Float_t' 0 - adc_gain "
"f - 'Float_t' 0 - tdc_offset f - 'Float_t' 0 - tdc_cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasData",662,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_664_0_5, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSCalorimeterBlockTDC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_664_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockTDC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_664_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSCalorimeterBlockTDC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_664_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSCalorimeterBlockTDC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_664_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_664_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockTDC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_664_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlockTDC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_664_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockTDC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_664_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlockTDC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSCalorimeterBlockTDC", 2085, G__sbsDict_664_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC), -1, 0, 1, 1, 1, 0, "u 'SBSCalorimeterBlockTDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSCalorimeterBlockTDC", 2211, G__sbsDict_664_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_664_0_19, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockTDC), -1, 1, 1, 1, 1, 0, "u 'SBSCalorimeterBlockTDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSCalorimeterBlockSamples(void) {
   /* SBSCalorimeterBlockSamples */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples));
   G__memfunc_setup("SBSCalorimeterBlockSamples",2591,G__sbsDict_665_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSCalorimeterBlockSamples",2591,G__sbsDict_665_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples), -1, 0, 9, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z i - 'Int_t' 0 - row "
"i - 'Int_t' 0 - col i - 'Int_t' 0 - layer "
"f - 'Float_t' 0 - adc_ped f - 'Float_t' 0 - adc_gain "
"f - 'Float_t' 0 - adc_ped_mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasData",662,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_665_0_5, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSCalorimeterBlockSamples::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_665_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockSamples::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_665_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSCalorimeterBlockSamples::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_665_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSCalorimeterBlockSamples::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_665_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_665_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockSamples::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_665_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlockSamples::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_665_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockSamples::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_665_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlockSamples::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSCalorimeterBlockSamples", 2591, G__sbsDict_665_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples), -1, 0, 1, 1, 1, 0, "u 'SBSCalorimeterBlockSamples' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSCalorimeterBlockSamples", 2717, G__sbsDict_665_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_665_0_19, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamples), -1, 1, 1, 1, 1, 0, "u 'SBSCalorimeterBlockSamples' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSCalorimeterBlockSamplesTDC(void) {
   /* SBSCalorimeterBlockSamplesTDC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC));
   G__memfunc_setup("SBSCalorimeterBlockSamplesTDC",2810,G__sbsDict_666_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSCalorimeterBlockSamplesTDC",2810,G__sbsDict_666_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC), -1, 0, 11, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z i - 'Int_t' 0 - row "
"i - 'Int_t' 0 - col i - 'Int_t' 0 - layer "
"f - 'Float_t' 0 - adc_ped f - 'Float_t' 0 - adc_gain "
"f - 'Float_t' 0 - adc_ped_mult f - 'Float_t' 0 - tdc_offset "
"f - 'Float_t' 0 - tdc_cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasData",662,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_666_0_5, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSCalorimeterBlockSamplesTDC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_666_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockSamplesTDC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_666_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSCalorimeterBlockSamplesTDC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_666_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSCalorimeterBlockSamplesTDC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_666_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_666_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockSamplesTDC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_666_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlockSamplesTDC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_666_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeterBlockSamplesTDC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_666_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeterBlockSamplesTDC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSCalorimeterBlockSamplesTDC", 2810, G__sbsDict_666_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC), -1, 0, 1, 1, 1, 0, "u 'SBSCalorimeterBlockSamplesTDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSCalorimeterBlockSamplesTDC", 2936, G__sbsDict_666_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_666_0_19, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC), -1, 1, 1, 1, 1, 0, "u 'SBSCalorimeterBlockSamplesTDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSCalorimeter(void) {
   /* SBSCalorimeter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter));
   G__memfunc_setup("SBSCalorimeter",1375,G__sbsDict_670_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSCalorimeter), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,G__sbsDict_670_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWithADCSamples",1637,G__sbsDict_670_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWithTDC",931,G__sbsDict_670_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DecodeADC",780,G__sbsDict_670_0_8, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"u 'THaEvData' - 11 - - U 'SBSCalorimeterBlock' - 0 - blk "
"U 'THaDetMap::Module' - 0 - d i - 'Int_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DecodeTDC",799,G__sbsDict_670_0_9, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"u 'THaEvData' - 11 - - U 'SBSCalorimeterBlock' - 0 - blk "
"U 'THaDetMap::Module' - 0 - d i - 'Int_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("blkidx",638,G__sbsDict_670_0_10, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col "
"i - 'Int_t' 0 '0' layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("blkrcl",634,G__sbsDict_670_0_11, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 1 - row "
"i - 'Int_t' 1 - col i - 'Int_t' 1 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_670_0_14, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSCalorimeter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_670_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_670_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSCalorimeter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_670_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSCalorimeter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_670_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_670_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_670_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_670_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSCalorimeter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_670_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSCalorimeter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSCalorimeter", 1501, G__sbsDict_670_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSBSHCal(void) {
   /* SBSHCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_SBSHCal));
   G__memfunc_setup("SBSHCal",576,G__sbsDict_680_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_SBSHCal), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__sbsDict_680_0_2, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SBSHCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_680_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSHCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_680_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SBSHCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_680_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SBSHCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_680_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_680_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSHCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_680_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSHCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_680_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SBSHCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_680_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SBSHCal::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SBSHCal", 702, G__sbsDict_680_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDecodercLcLSBSDecodeF1TDCModule(void) {
   /* Decoder::SBSDecodeF1TDCModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule));
   G__memfunc_setup("SBSDecodeF1TDCModule",1764,G__sbsDict_681_0_1, 105, G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SBSDecodeF1TDCModule",1764,G__sbsDict_681_0_2, 105, G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - crate i - 'Int_t' 0 - slot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSlot",606,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - rdata", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetData",666,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - chan i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetResolution",1376,G__sbsDict_681_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolution",1364,G__sbsDict_681_0_8, 105, G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModulecLcLEResolution), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHiResolution",1441,G__sbsDict_681_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHits",1000,G__sbsDict_681_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - chan", "const { return fNumHits; };", (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "H - 'UInt_t' 10 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumSlots",1125,G__sbsDict_681_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadSlot",802,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'Decoder::THaSlotData' - 0 - sldat H - 'UInt_t' 10 - evbuffer "
"i - 'Int_t' 0 - pos i - 'Int_t' 0 - len", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadSlot",802,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'Decoder::THaSlotData' - 0 - sldat H - 'UInt_t' 10 - evbuffer "
"H - 'UInt_t' 10 - pstop", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__sbsDict_681_0_15, 85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Decoder::SBSDecodeF1TDCModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__sbsDict_681_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Decoder::SBSDecodeF1TDCModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__sbsDict_681_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Decoder::SBSDecodeF1TDCModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__sbsDict_681_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Decoder::SBSDecodeF1TDCModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sbsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sbsDict_681_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sbsDict_681_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Decoder::SBSDecodeF1TDCModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sbsDict_681_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Decoder::SBSDecodeF1TDCModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__sbsDict_681_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Decoder::SBSDecodeF1TDCModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sbsDict_681_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Decoder::SBSDecodeF1TDCModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SBSDecodeF1TDCModule", 1764, G__sbsDict_681_0_27, (int) ('i'), G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule), -1, 0, 1, 1, 1, 0, "u 'Decoder::SBSDecodeF1TDCModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SBSDecodeF1TDCModule", 1890, G__sbsDict_681_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__sbsDict_681_0_29, (int) ('u'), G__get_linked_tagnum(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule), -1, 1, 1, 1, 1, 0, "u 'Decoder::SBSDecodeF1TDCModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncsbsDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalsbsDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcsbsDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__sbsDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_Decoder = { "Decoder" , 110 , -1 };
G__linked_taginfo G__sbsDictLN_DecodercLcLModule = { "Decoder::Module" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_DecodercLcLVmeModule = { "Decoder::VmeModule" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_DecodercLcLTHaSlotData = { "Decoder::THaSlotData" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_DecodercLcLEModuleType = { "Decoder::EModuleType" , 101 , -1 };
G__linked_taginfo G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgR = { "set<Decoder::Module::ModuleType,less<Decoder::Module::ModuleType>,allocator<Decoder::Module::ModuleType> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgRcLcLiterator = { "set<Decoder::Module::ModuleType,less<Decoder::Module::ModuleType>,allocator<Decoder::Module::ModuleType> >::iterator" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_DecodercLcLMPDModule = { "Decoder::MPDModule" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaRunBase = { "THaRunBase" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaEvData = { "THaEvData" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaOutput = { "THaOutput" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaAnalysisObject = { "THaAnalysisObject" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaAnalysisObjectcLcLEStatus = { "THaAnalysisObject::EStatus" , 101 , -1 };
G__linked_taginfo G__sbsDictLN_THaAnalysisObjectcLcLEMode = { "THaAnalysisObject::EMode" , 101 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaDetector = { "THaDetector" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaApparatus = { "THaApparatus" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaVertexModule = { "THaVertexModule" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaTrack = { "THaTrack" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaSpectrometer = { "THaSpectrometer" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaTrackingModule = { "THaTrackingModule" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__sbsDictLN_THaDetMap = { "THaDetMap" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaDetectorBase = { "THaDetectorBase" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaSpectrometerDetector = { "THaSpectrometerDetector" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaNonTrackingDetector = { "THaNonTrackingDetector" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaPidDetector = { "THaPidDetector" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSBigBite = { "SBSBigBite" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaTrackingDetector = { "THaTrackingDetector" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSGEMPlane = { "SBSGEMPlane" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaCrateMap = { "THaCrateMap" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSGEMStand = { "SBSGEMStand" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgR = { "vector<SBSGEMPlane*,allocator<SBSGEMPlane*> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SBSGEMPlane*,allocator<SBSGEMPlane*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaSubDetector = { "THaSubDetector" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgR = { "vector<mpdmap_t,allocator<mpdmap_t> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<mpdmap_t,allocator<mpdmap_t> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSShowerBlock = { "SBSShowerBlock" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSBBShowerCluster = { "SBSBBShowerCluster" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSBBShower = { "SBSBBShower" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSBBTotalShower = { "SBSBBTotalShower" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSScintPMT = { "SBSScintPMT" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSScintHit = { "SBSScintHit" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSScintBar = { "SBSScintBar" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSAdcHit = { "SBSAdcHit" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSTdcHit = { "SBSTdcHit" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSScintPartialHit = { "SBSScintPartialHit" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCDet = { "SBSCDet" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCDetcLcLESide = { "SBSCDet::ESide" , 101 , -1 };
G__linked_taginfo G__sbsDictLN_SBSScintBarcLcLEBarType = { "SBSScintBar::EBarType" , 101 , -1 };
G__linked_taginfo G__sbsDictLN_SBSTimingHodoscope = { "SBSTimingHodoscope" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSTimingHodoscopecLcLESide = { "SBSTimingHodoscope::ESide" , 101 , -1 };
G__linked_taginfo G__sbsDictLN_SBSGRINCH_Hit = { "SBSGRINCH_Hit" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSGRINCH_Cluster = { "SBSGRINCH_Cluster" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaBenchmark = { "THaBenchmark" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSGRINCH = { "SBSGRINCH" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSScintPlane = { "SBSScintPlane" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSScintPlanecLcLESide = { "SBSScintPlane::ESide" , 101 , -1 };
G__linked_taginfo G__sbsDictLN_SBSECalCluster = { "SBSECalCluster" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSECal = { "SBSECal" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSEArm = { "SBSEArm" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlockData = { "SBSCalorimeterBlockData" , 110 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlockDatacLcLADC = { "SBSCalorimeterBlockData::ADC" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlockDatacLcLTDC = { "SBSCalorimeterBlockData::TDC" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlockDatacLcLSamples = { "SBSCalorimeterBlockData::Samples" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlock = { "SBSCalorimeterBlock" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlockTDC = { "SBSCalorimeterBlockTDC" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlockSamples = { "SBSCalorimeterBlockSamples" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeterBlockSamplesTDC = { "SBSCalorimeterBlockSamplesTDC" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_THaDetMapcLcLModule = { "THaDetMap::Module" , 115 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimeter = { "SBSCalorimeter" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSCalorimetercLcLOutputData = { "SBSCalorimeter::OutputData" , 115 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR = { "vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_vectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgR = { "vector<SBSCalorimeterBlock*,allocator<SBSCalorimeterBlock*> >" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_reverse_iteratorlEvectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SBSCalorimeterBlock*,allocator<SBSCalorimeterBlock*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_SBSHCal = { "SBSHCal" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule = { "Decoder::SBSDecodeF1TDCModule" , 99 , -1 };
G__linked_taginfo G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModulecLcLEResolution = { "Decoder::SBSDecodeF1TDCModule::EResolution" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablesbsDict() {
  G__sbsDictLN_TClass.tagnum = -1 ;
  G__sbsDictLN_TBuffer.tagnum = -1 ;
  G__sbsDictLN_TMemberInspector.tagnum = -1 ;
  G__sbsDictLN_TObject.tagnum = -1 ;
  G__sbsDictLN_TNamed.tagnum = -1 ;
  G__sbsDictLN_TString.tagnum = -1 ;
  G__sbsDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__sbsDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__sbsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__sbsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_TList.tagnum = -1 ;
  G__sbsDictLN_TClonesArray.tagnum = -1 ;
  G__sbsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_Decoder.tagnum = -1 ;
  G__sbsDictLN_DecodercLcLModule.tagnum = -1 ;
  G__sbsDictLN_DecodercLcLVmeModule.tagnum = -1 ;
  G__sbsDictLN_DecodercLcLTHaSlotData.tagnum = -1 ;
  G__sbsDictLN_DecodercLcLEModuleType.tagnum = -1 ;
  G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgR.tagnum = -1 ;
  G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgRcLcLiterator.tagnum = -1 ;
  G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_DecodercLcLMPDModule.tagnum = -1 ;
  G__sbsDictLN_THaRunBase.tagnum = -1 ;
  G__sbsDictLN_TDatime.tagnum = -1 ;
  G__sbsDictLN_THaEvData.tagnum = -1 ;
  G__sbsDictLN_TVector3.tagnum = -1 ;
  G__sbsDictLN_THaOutput.tagnum = -1 ;
  G__sbsDictLN_THaAnalysisObject.tagnum = -1 ;
  G__sbsDictLN_THaAnalysisObjectcLcLEStatus.tagnum = -1 ;
  G__sbsDictLN_THaAnalysisObjectcLcLEMode.tagnum = -1 ;
  G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__sbsDictLN_THaDetector.tagnum = -1 ;
  G__sbsDictLN_THaApparatus.tagnum = -1 ;
  G__sbsDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__sbsDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__sbsDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__sbsDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__sbsDictLN_THaVertexModule.tagnum = -1 ;
  G__sbsDictLN_THaTrack.tagnum = -1 ;
  G__sbsDictLN_THaSpectrometer.tagnum = -1 ;
  G__sbsDictLN_THaTrackingModule.tagnum = -1 ;
  G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__sbsDictLN_THaDetMap.tagnum = -1 ;
  G__sbsDictLN_THaDetectorBase.tagnum = -1 ;
  G__sbsDictLN_TRef.tagnum = -1 ;
  G__sbsDictLN_THaSpectrometerDetector.tagnum = -1 ;
  G__sbsDictLN_THaNonTrackingDetector.tagnum = -1 ;
  G__sbsDictLN_THaPidDetector.tagnum = -1 ;
  G__sbsDictLN_SBSBigBite.tagnum = -1 ;
  G__sbsDictLN_THaTrackingDetector.tagnum = -1 ;
  G__sbsDictLN_SBSGEMPlane.tagnum = -1 ;
  G__sbsDictLN_THaCrateMap.tagnum = -1 ;
  G__sbsDictLN_SBSGEMStand.tagnum = -1 ;
  G__sbsDictLN_vectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_THaSubDetector.tagnum = -1 ;
  G__sbsDictLN_vectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_SBSShowerBlock.tagnum = -1 ;
  G__sbsDictLN_SBSBBShowerCluster.tagnum = -1 ;
  G__sbsDictLN_SBSBBShower.tagnum = -1 ;
  G__sbsDictLN_SBSBBTotalShower.tagnum = -1 ;
  G__sbsDictLN_SBSScintPMT.tagnum = -1 ;
  G__sbsDictLN_SBSScintHit.tagnum = -1 ;
  G__sbsDictLN_SBSScintBar.tagnum = -1 ;
  G__sbsDictLN_SBSAdcHit.tagnum = -1 ;
  G__sbsDictLN_SBSTdcHit.tagnum = -1 ;
  G__sbsDictLN_SBSScintPartialHit.tagnum = -1 ;
  G__sbsDictLN_SBSCDet.tagnum = -1 ;
  G__sbsDictLN_SBSCDetcLcLESide.tagnum = -1 ;
  G__sbsDictLN_SBSScintBarcLcLEBarType.tagnum = -1 ;
  G__sbsDictLN_SBSTimingHodoscope.tagnum = -1 ;
  G__sbsDictLN_SBSTimingHodoscopecLcLESide.tagnum = -1 ;
  G__sbsDictLN_SBSGRINCH_Hit.tagnum = -1 ;
  G__sbsDictLN_SBSGRINCH_Cluster.tagnum = -1 ;
  G__sbsDictLN_THaBenchmark.tagnum = -1 ;
  G__sbsDictLN_SBSGRINCH.tagnum = -1 ;
  G__sbsDictLN_SBSScintPlane.tagnum = -1 ;
  G__sbsDictLN_SBSScintPlanecLcLESide.tagnum = -1 ;
  G__sbsDictLN_SBSECalCluster.tagnum = -1 ;
  G__sbsDictLN_SBSECal.tagnum = -1 ;
  G__sbsDictLN_SBSEArm.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlockData.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlockDatacLcLADC.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlockDatacLcLTDC.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlockDatacLcLSamples.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlock.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlockTDC.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlockSamples.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeterBlockSamplesTDC.tagnum = -1 ;
  G__sbsDictLN_THaDetMapcLcLModule.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimeter.tagnum = -1 ;
  G__sbsDictLN_SBSCalorimetercLcLOutputData.tagnum = -1 ;
  G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_vectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgR.tagnum = -1 ;
  G__sbsDictLN_reverse_iteratorlEvectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__sbsDictLN_SBSHCal.tagnum = -1 ;
  G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule.tagnum = -1 ;
  G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModulecLcLEResolution.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablesbsDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TString);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TList);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_Decoder),0,-1,0,(char*)NULL,G__setup_memvarDecoder,G__setup_memfuncDecoder);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_DecodercLcLModule);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_DecodercLcLVmeModule);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_DecodercLcLTHaSlotData);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_DecodercLcLEModuleType);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_setlEDecodercLcLModulecLcLModuleTypecOlesslEDecodercLcLModulecLcLModuleTypegRcOallocatorlEDecodercLcLModulecLcLModuleTypegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_DecodercLcLMPDModule),sizeof(Decoder::MPDModule),-1,324864,"INFN MPD Module ",G__setup_memvarDecodercLcLMPDModule,G__setup_memfuncDecodercLcLMPDModule);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaRunBase);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaEvData);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaOutput);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaAnalysisObject);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaAnalysisObjectcLcLEStatus);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaAnalysisObjectcLcLEMode);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaDetector);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaApparatus);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaVertexModule);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaTrack);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaSpectrometer);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaTrackingModule);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaDetMap);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaDetectorBase);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_TRef);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaSpectrometerDetector);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaNonTrackingDetector);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaPidDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSBigBite),sizeof(SBSBigBite),-1,324608,"BigBite spectrometer",G__setup_memvarSBSBigBite,G__setup_memfuncSBSBigBite);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaTrackingDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSGEMPlane),sizeof(SBSGEMPlane),-1,324608,(char*)NULL,G__setup_memvarSBSGEMPlane,G__setup_memfuncSBSGEMPlane);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaCrateMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSGEMStand),sizeof(SBSGEMStand),-1,324608,(char*)NULL,G__setup_memvarSBSGEMStand,G__setup_memfuncSBSGEMStand);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlESBSGEMPlanemUcOallocatorlESBSGEMPlanemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaSubDetector);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlEmpdmap_tcOallocatorlEmpdmap_tgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSShowerBlock),sizeof(SBSShowerBlock),-1,325888,"Generic shower block class",G__setup_memvarSBSShowerBlock,G__setup_memfuncSBSShowerBlock);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSBBShowerCluster),sizeof(SBSBBShowerCluster),-1,324864,"Generic shower cluster class",G__setup_memvarSBSBBShowerCluster,G__setup_memfuncSBSBBShowerCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSBBShower),sizeof(SBSBBShower),-1,324608,"Generic shower detector class",G__setup_memvarSBSBBShower,G__setup_memfuncSBSBBShower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSBBTotalShower),sizeof(SBSBBTotalShower),-1,324608,"A total shower detector (shower plus preshower)",G__setup_memvarSBSBBTotalShower,G__setup_memfuncSBSBBTotalShower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSScintPMT),sizeof(SBSScintPMT),-1,292096,"Class to represent a PMT on the neutron bars",G__setup_memvarSBSScintPMT,G__setup_memfuncSBSScintPMT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSScintHit),sizeof(SBSScintHit),-1,324864,"Reconstructed hit-information for a complete hit",G__setup_memvarSBSScintHit,G__setup_memfuncSBSScintHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSScintBar),sizeof(SBSScintBar),-1,292096,"Scintillator bar (PMT pointers/geometry) info.",G__setup_memvarSBSScintBar,G__setup_memfuncSBSScintBar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSAdcHit),sizeof(SBSAdcHit),-1,292096,"ADC and calibrated amplitude hit",G__setup_memvarSBSAdcHit,G__setup_memfuncSBSAdcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSTdcHit),sizeof(SBSTdcHit),-1,292096,"TDC and real-time for a Hit. Per PMT",G__setup_memvarSBSTdcHit,G__setup_memfuncSBSTdcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSScintPartialHit),sizeof(SBSScintPartialHit),-1,292096,"Partial(not complete L/R A/T) scintillator hit",G__setup_memvarSBSScintPartialHit,G__setup_memfuncSBSScintPartialHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCDet),sizeof(SBSCDet),-1,326912,"Describes scintillator plane with F1TDC as a detector",G__setup_memvarSBSCDet,G__setup_memfuncSBSCDet);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCDetcLcLESide);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSScintBarcLcLEBarType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSTimingHodoscope),sizeof(SBSTimingHodoscope),-1,326912,"Describes scintillator plane with F1TDC as a detector",G__setup_memvarSBSTimingHodoscope,G__setup_memfuncSBSTimingHodoscope);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSTimingHodoscopecLcLESide);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSGRINCH_Hit),sizeof(SBSGRINCH_Hit),-1,324864,"A hit in the RICH",G__setup_memvarSBSGRINCH_Hit,G__setup_memfuncSBSGRINCH_Hit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSGRINCH_Cluster),sizeof(SBSGRINCH_Cluster),-1,294656,"A cluster of hits in the RICH",G__setup_memvarSBSGRINCH_Cluster,G__setup_memfuncSBSGRINCH_Cluster);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaBenchmark);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSGRINCH),sizeof(SBSGRINCH),-1,324608,"The Hall A RICH",G__setup_memvarSBSGRINCH,G__setup_memfuncSBSGRINCH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSScintPlane),sizeof(SBSScintPlane),-1,326912,"Describes scintillator plane with F1TDC as a subdetector",G__setup_memvarSBSScintPlane,G__setup_memfuncSBSScintPlane);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSScintPlanecLcLESide);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSECalCluster),sizeof(SBSECalCluster),-1,324864,"Generic shower cluster class",G__setup_memvarSBSECalCluster,G__setup_memfuncSBSECalCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSECal),sizeof(SBSECal),-1,324608,"Generic shower detector class",G__setup_memvarSBSECal,G__setup_memfuncSBSECal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSEArm),sizeof(SBSEArm),-1,324608,"BigBite spectrometer",G__setup_memvarSBSEArm,G__setup_memfuncSBSEArm);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlockData),0,-1,262144,(char*)NULL,G__setup_memvarSBSCalorimeterBlockData,G__setup_memfuncSBSCalorimeterBlockData);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLADC);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLTDC);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlockDatacLcLSamples);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlock),sizeof(SBSCalorimeterBlock),-1,324864,"/< Generic shower block class single-valued",G__setup_memvarSBSCalorimeterBlock,G__setup_memfuncSBSCalorimeterBlock);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlockTDC),sizeof(SBSCalorimeterBlockTDC),-1,324864,"/< Single-valued ADC with TDC",G__setup_memvarSBSCalorimeterBlockTDC,G__setup_memfuncSBSCalorimeterBlockTDC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlockSamples),sizeof(SBSCalorimeterBlockSamples),-1,324864,"/< Single-valued ADC with ",G__setup_memvarSBSCalorimeterBlockSamples,G__setup_memfuncSBSCalorimeterBlockSamples);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeterBlockSamplesTDC),sizeof(SBSCalorimeterBlockSamplesTDC),-1,324864,"/< Multi-valued ADC with TDC",G__setup_memvarSBSCalorimeterBlockSamplesTDC,G__setup_memfuncSBSCalorimeterBlockSamplesTDC);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_THaDetMapcLcLModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimeter),sizeof(SBSCalorimeter),-1,324608,"Generic shower detector class",G__setup_memvarSBSCalorimeter,G__setup_memfuncSBSCalorimeter);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSCalorimetercLcLOutputData);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_vectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_reverse_iteratorlEvectorlESBSCalorimeterBlockmUcOallocatorlESBSCalorimeterBlockmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_SBSHCal),sizeof(SBSHCal),-1,324608,"HCal detector class",G__setup_memvarSBSHCal,G__setup_memfuncSBSHCal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModule),sizeof(Decoder::SBSDecodeF1TDCModule),-1,324864,"JLab F1 TDC Module, test version",G__setup_memvarDecodercLcLSBSDecodeF1TDCModule,G__setup_memfuncDecodercLcLSBSDecodeF1TDCModule);
   G__get_linked_tagnum_fwd(&G__sbsDictLN_DecodercLcLSBSDecodeF1TDCModulecLcLEResolution);
}
extern "C" void G__cpp_setupsbsDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupsbsDict()");
  G__set_cpp_environmentsbsDict();
  G__cpp_setup_tagtablesbsDict();

  G__cpp_setup_inheritancesbsDict();

  G__cpp_setup_typetablesbsDict();

  G__cpp_setup_memvarsbsDict();

  G__cpp_setup_memfuncsbsDict();
  G__cpp_setup_globalsbsDict();
  G__cpp_setup_funcsbsDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncsbsDict();
  return;
}
class G__cpp_setup_initsbsDict {
  public:
    G__cpp_setup_initsbsDict() { G__add_setup_func("sbsDict",(G__incsetup)(&G__cpp_setupsbsDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initsbsDict() { G__remove_setup_func("sbsDict"); }
};
G__cpp_setup_initsbsDict G__cpp_setup_initializersbsDict;

